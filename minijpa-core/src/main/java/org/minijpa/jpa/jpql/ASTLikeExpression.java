/* Generated By:JJTree: Do not edit this line. ASTLikeExpression.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.minijpa.jpa.jpql;

import org.minijpa.sql.model.condition.Condition;

public class ASTLikeExpression extends SimpleNode implements ConditionNode {

    private boolean not = false;
    private String patternValue;
    private String inputParameter;
    private String escapeCharacter;
    private Condition condition;

    public ASTLikeExpression(int id) {
        super(id);
    }

    public ASTLikeExpression(JpqlParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JpqlParserVisitor visitor, Object data) {

        return visitor.visit(this, data);
    }

    public boolean isNot() {
        return not;
    }

    public void setNot(boolean not) {
        this.not = not;
    }

    public String getPatternValue() {
        return patternValue;
    }

    public void setPatternValue(String patternValue) {
        this.patternValue = patternValue;
    }

    public String getInputParameter() {
        return inputParameter;
    }

    public void setInputParameter(String inputParameter) {
        this.inputParameter = inputParameter;
    }

    public String getEscapeCharacter() {
        return escapeCharacter;
    }

    public void setEscapeCharacter(String escapeCharacter) {
        this.escapeCharacter = escapeCharacter;
    }

    @Override
    public Condition getCondition() {
        return condition;
    }

    @Override
    public void setCondition(Condition condition) {
        this.condition = condition;
    }
}
/* JavaCC - OriginalChecksum=1a9d840ffff3d21cd0cede0f6b787b9e (do not edit this line) */
