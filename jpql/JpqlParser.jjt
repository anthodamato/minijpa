options {
  STATIC=false;
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
  DEBUG_PARSER=true;
  DEBUG_LOOKAHEAD=true;
//  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(JpqlParser)

package org.minijpa.jpa.jpql;

public class JpqlParser {
//  public static void main(String args[]) throws ParseException {
//    JpqlParser parser = new JpqlParser(System.in);
//    parser.QL_statement();
//  }
}

PARSER_END(JpqlParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN [IGNORE_CASE]:
{
 <AS:        "AS">
|<ABS:       "ABS">
|<ALL:       "ALL">
|<AND:       "AND">
|<ANY:       "ANY">
|<ASC:       "ASC">
|<AVG:       "AVG">
|<BETWEEN:      "BETWEEN">
|<BOTH:      "BOTH">
|<BY:        "BY">
|<CASE:      "CASE">
|<COALESCE:  "COALESCE">
|<CONCAT:    "CONCAT">
|<COUNT:     "COUNT">
|<CURRENT_DATE:        "CURRENT_DATE">
|<CURRENT_TIME:        "CURRENT_TIME">
|<CURRENT_TIMESTAMP:   "CURRENT_TIMESTAMP">
|<DESC:      "DESC">
|<DISTINCT:  "DISTINCT">
|<ELSE:      "ELSE">
|<EMPTY:       "EMPTY">
|<END:       "END">
|<ENTRY:     "ENTRY">
|<ESCAPE:     "ESCAPE">
|<EXISTS:     "EXISTS">
|<FALSE:     "FALSE">
|<FETCH:     "FETCH">
|<FROM:      "FROM">
|<FUNCTION:  "FUNCTION">
|<GROUP:     "GROUP">
|<HAVING:    "HAVING">
|<INDEX:     "INDEX">
|<INNER:     "INNER">
|<IN:        "IN">
|<IS:        "IS">
|<JOIN:      "JOIN">
|<KEY:       "KEY">
|<LEADING:   "LEADING">
|<LEFT:      "LEFT">
|<LENGTH:        "LENGTH">
|<LIKE:      "LIKE">
|<LOCATE:        "LOCATE">
|<LOWER:     "LOWER">
|<MEMBER:    "MEMBER">
|<MIN:       "MIN">
|<MAX:       "MAX">
|<MOD:       "MOD">
|<NEW:       "NEW">
|<NOT:       "NOT">
|<NULL:      "NULL">
|<NULLIF:    "NULLIF">
|<OBJECT:        "OBJECT">
|<OF:        "OF">
|<OR:        "OR">
|<ORDER:        "ORDER">
|<OUTER:     "OUTER">
|<SELECT:    "SELECT">
|<SIZE:      "SIZE">
|<SOME:      "SOME">
|<SQRT:      "SQRT">
|<SUBSTRING: "SUBSTRING">
|<SUM:       "SUM">
|<THEN:      "THEN">
|<TRAILING:  "TRAILING">
|<TREAT:     "TREAT">
|<TRIM:      "TRIM">
|<TRUE:      "TRUE">
|<TYPE:      "TYPE">
|<UPPER:     "UPPER">
|<WHEN:      "WHEN">
|<WHERE:     "WHERE">
|<VALUE:     "VALUE">
}

// 'identification_variable' replaced by NAME
// 'single_valued_object_field' replaced by NAME

TOKEN :
{
  <NAME: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  <COMMA: ",">
|
  <DOT:   ".">
|
  <OPEN_BRACKET: "(">
|
  <CLOSE_BRACKET: ")">
| 
  <STRING_LITERAL: "'" ( (~["'","\n","\r"]) | ("''") )* "'">
|
  <NUMERIC_LITERAL: ( ["0"-"9"] )+ >
|
  <INPUT_PARAMETER: "?" <NUMERIC_LITERAL> | ":" <NAME> >
|
  <GT:    ">" >
| <GE:    ">=" >
| <LT:    "<" >
| <LE:    "<=" >
| <NE:    "<>" >
| <EQ:    "=" >
}

String anyIdentifier() :
{
 Token t;
}
{
   (t=<NAME>
  | t=<AS>
  | t=<ABS>
  | t=<ALL>
  | t=<AND>
  | t=<ANY>
  | t=<ASC>
  | t=<AVG>
  | t=<BETWEEN>
  | t=<BOTH>
  | t=<BY>
  | t=<CASE>
  | t=<COALESCE>
  | t=<CONCAT>
  | t=<COUNT>
  | t=<CURRENT_DATE>
  | t=<CURRENT_TIME>
  | t=<CURRENT_TIMESTAMP>
  | t=<DESC>
  | t=<DISTINCT>
  | t=<ELSE>
  | t=<EMPTY>
  | t=<END>
  | t=<ENTRY>
  | t=<ESCAPE>
  | t=<EXISTS>
  | t=<FALSE>
  | t=<FETCH>
  | t=<FROM>
  | t=<FUNCTION>
  | t=<GROUP>
  | t=<HAVING>
  | t=<INDEX>
  | t=<INNER>
  | t=<IN>
  | t=<IS>
  | t=<JOIN>
  | t=<KEY>
  | t=<LEADING>
  | t=<LEFT>
  | t=<LENGTH>
  | t=<LIKE>
  | t=<LOCATE>
  | t=<LOWER>
  | t=<MEMBER>
  | t=<MIN>
  | t=<MAX>
  | t=<MOD>
  | t=<NEW>
  | t=<NOT>
  | t=<NULL>
  | t=<NULLIF>
  | t=<OBJECT>
  | t=<OF>
  | t=<OR>
  | t=<ORDER>
  | t=<OUTER>
  | t=<SELECT>
  | t=<SIZE>
  | t=<SOME>
  | t=<SQRT>
  | t=<SUBSTRING>
  | t=<SUM>
  | t=<THEN>
  | t=<TRAILING>
  | t=<TREAT>
  | t=<TRIM>
  | t=<TRUE>
  | t=<TYPE>
  | t=<UPPER>
  | t=<WHEN>
  | t=<WHERE>
  | t=<VALUE>
 )
 {return t.image;}
}


ASTQLStatement QL_statement() #QLStatement :
{ String result; }
{
  select_statement() <EOF>
  { return jjtThis; }
}


//   select_statement ::= select_clause from_clause [where_clause] [groupby_clause]
//      [having_clause] [orderby_clause]
void select_statement() #SelectStatement :
{
}
{
  select_clause()
  from_clause()
  [
   where_clause()
  ]
}


// select_clause ::= SELECT [DISTINCT] select_item {, select_item}*
void select_clause() #SelectClause :
{
  StringBuilder sb=new StringBuilder();
  String s;
  Token t;
}
{
  <SELECT>
  [<DISTINCT>
   {
     jjtThis.setDistinct(true);
   }
  ]
  select_item()
  (
   <COMMA>
   select_item()
  )*
}


// select_item ::= select_expression [[AS] result_variable]
void select_item() #SelectItem :
{
  Token t;
}
{
  select_expression()
  [
   [<AS>]
   t=<NAME>
   {
     jjtThis.setAlias(t.image);
   }
  ]
}


// select_expression ::=
//    single_valued_path_expression |
//    aggregate_expression |
//    scalar_expression |
//    identification_variable |
//    OBJECT(identification_variable) |
//    constructor_expression
void select_expression() #SelectExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
 LOOKAHEAD((<NAME> ",") | (<NAME> <FROM>))
 t=<NAME>
   {
     jjtThis.setIdentificationVariable(t.image);
   }
 |

// LOOKAHEAD(single_valued_path_expression())
 LOOKAHEAD(2)
 single_valued_path_expression()

 |
// LOOKAHEAD(aggregate_expression())
 LOOKAHEAD(2)
 aggregate_expression()

 |
// LOOKAHEAD(scalar_expression())
 LOOKAHEAD(2)
 scalar_expression()

 |
 <OBJECT>
 <OPEN_BRACKET>
 t=<NAME>
   {
     jjtThis.setObjectIdentificationVariable(t.image);
   }
 <CLOSE_BRACKET>

 |
 LOOKAHEAD(2)
 s=constructor_expression()
   {
     sb.append(s);
   }
// |
// t=<NAME>
//   {
//     jjtThis.setIdentificationVariable(t.image);
//   }
}


// constructor_item ::=
//    single_valued_path_expression |
//    aggregate_expression |
//    scalar_expression |
//    identification_variable
void constructor_item() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
 LOOKAHEAD(3)
 single_valued_path_expression()
 
 |
 LOOKAHEAD(2)
 aggregate_expression()

 |
 LOOKAHEAD(3)
 scalar_expression()
  
 |
 t=<NAME>
 {
   sb.append(t.image);
 }
}


// constructor_expression ::=
//    NEW constructor_name (constructor_item {, constructor_item}*)
String constructor_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
 t=<NEW>
   {
     sb.append(t.image);
   }
 t=<NAME>
   {
     sb.append(t.image);
   }
 t=<OPEN_BRACKET>
   {
     sb.append(t.image);
   }
 constructor_item()
 (
  t=<COMMA>
    {
      sb.append(t.image);
    }
  constructor_item()
 )*
 t=<CLOSE_BRACKET>
   {
     sb.append(t.image);
   }
 { return sb.toString(); }
}


//  join_spec ::= [LEFT [OUTER] | INNER] JOIN
JoinType join_spec() :
{
  JoinType jt=new JoinType();
}
{
  [<LEFT>
   {
    jt.setLeft(true);
   }
   [<OUTER>
    {
     jt.setOuter(true);
    }
   ]
   |
   <INNER>
    {
     jt.setInner(true);
    }
  ]
  <JOIN>
  { return jt; }
}


String single_valued_embeddable_object_field() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
}
{
  (t=<NAME>
     {
      sb.append(t.image);
     }
   t=<DOT>
     {
      sb.append(".");
     }
  )*
  { return sb.toString(); }
}


//   join_single_valued_path_expression ::= 
//        identification_variable.{single_valued_embeddable_object_field.}*single_valued_object_field
//
//// MODIFIED AS:
//
//   join_single_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*NAME
String join_single_valued_path_expression() #JoinSingleValuedPathExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
    {
     sb.append(t.image);
    }
  t=<DOT>
    {
     sb.append(".");
    }
  (
   LOOKAHEAD(2)
   s=single_valued_embeddable_object_field()
     {
      sb.append(s);
     }
   t=<DOT>
     {
      sb.append(".");
     }
  )*
  t=<NAME>
    {
     sb.append(t.image);
    }
  {
    jjtThis.jjtSetValue(sb.toString());
    return sb.toString();
  }
}


// join_collection_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*collection_valued_field
//
//// MODIFIED AS:
//
// join_collection_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*FIELD_NAME
/*
String join_collection_valued_path_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
    {
     sb.append(t.image);
    }
  t=<DOT>
    {
     sb.append(".");
    }
  (
   s=single_valued_embeddable_object_field()
     {
      sb.append(s);
     }
   t=<DOT>
     {
      sb.append(".");
     }
  )*
  t=<NAME>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}
*/


// Must be a subtype, entity name?
String subtype() #Subtype :
{
  Token t;
}
{
  t=<NAME>
  { return t.image; }
}


//  join_association_path_expression ::=
//      join_collection_valued_path_expression |
//      join_single_valued_path_expression |
//      TREAT(join_collection_valued_path_expression AS subtype) |
//      TREAT(join_single_valued_path_expression AS subtype)
//
//// MODIFIED AS:
//
//  join_association_path_expression ::=
//      join_single_valued_path_expression |
//      TREAT(join_single_valued_path_expression AS subtype)
void join_association_path_expression() #JoinAssociationPathExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  s=join_single_valued_path_expression()
    {
      jjtThis.setJoinSingleValuedPathExpression(s);
    }
    
  |
  t=<TREAT>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  s=join_single_valued_path_expression()
//    {
//      sb.append(s);
//    }
  t=<AS>
    {
     sb.append(" ");
     sb.append(t.image);
    }
  s=subtype()
    {
      sb.append(" ");
      sb.append(s);
    }
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
//  { return sb.toString(); }
}


//  join ::= join_spec join_association_path_expression [AS] identification_variable [join_condition]
// TODO: to be completed
void join() #Join :
{
  Token t;
  JoinType jt;
}
{
  jt=join_spec()
    {
      jjtThis.setJoinType(jt);
    }
  join_association_path_expression()
  [t=<AS>]
  t=<NAME>
    {
      jjtThis.setIdentificationVariable(t.image);
    }
}


//    fetch_join ::= join_spec FETCH join_association_path_expression
void fetch_join() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  JoinType jt;
}
{
  jt=join_spec()
    {
//      jjtThis.setJoinType(jt);
    }
  <FETCH>
  join_association_path_expression()
    {
      sb.append(" ");
//      sb.append(s);
    }
//  { return sb.toString(); }
}


//   entity_name
String entity_name() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}


//   range_variable_declaration ::= entity_name [AS] identification_variable
void range_variable_declaration() #RangeVariableDeclaration :
{
  Token t;
  String s;
}
{
  s=anyIdentifier()
  {
    jjtThis.setEntityName(s);
  }
  [t=<AS>]
  t=<NAME>
  {
    jjtThis.setAlias(t.image);     
  }
}


//  identification_variable_declaration ::= range_variable_declaration {join | fetch_join}*
void identification_variable_declaration() #IdentificationVariableDeclaration :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
   range_variable_declaration()
   (
    LOOKAHEAD(2)
    join()
    |
    fetch_join()
      {
      }
   )*
}


//    from_clause ::= FROM  identification_variable_declaration
//          {, {identification_variable_declaration | collection_member_declaration}}*
void from_clause() #FromClause :
{
}
{
   <FROM>
   identification_variable_declaration()
   (
     <COMMA>
     (
      LOOKAHEAD(2)
      identification_variable_declaration()
     |
      collection_member_declaration()
     )
   )*
}


// map_field_identification_variable ::= KEY(identification_variable) | VALUE(identification_variable)
MapFieldIdentificationVariable map_field_identification_variable() #MapFieldIdentificationVariable :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  MapFieldIdentificationVariable mapFieldIdentificationVariable=new MapFieldIdentificationVariable();
}
{
 <KEY>
 {
//   jjtThis.setKey(true);
   mapFieldIdentificationVariable.setMapField(MapField.KEY);
 }
 <OPEN_BRACKET>
 t=<NAME>
 {
//   jjtThis.setIdentificationVariable(t.image);
   mapFieldIdentificationVariable.setIdentificationVariable(t.image);
 }
 <CLOSE_BRACKET>
 |
 <VALUE>
 {
//   jjtThis.setKey(false);
   mapFieldIdentificationVariable.setMapField(MapField.VALUE);
 }
 <OPEN_BRACKET>
 t=<NAME>
 {
//   jjtThis.setIdentificationVariable(t.image);
   mapFieldIdentificationVariable.setIdentificationVariable(t.image);
 }
 <CLOSE_BRACKET>
 { return mapFieldIdentificationVariable; }
}


// qualified_identification_variable ::= map_field_identification_variable | ENTRY(identification_variable)
void qualified_identification_variable() #QualifiedIdentificationVariable :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  MapFieldIdentificationVariable mapFieldIdentificationVariable;
}
{
 mapFieldIdentificationVariable=map_field_identification_variable()
 {
   jjtThis.setMapFieldIdentificationVariable(mapFieldIdentificationVariable);
 }
 |
 <ENTRY>
 <OPEN_BRACKET>
 t=<NAME>
 {
   jjtThis.setEntryIdentificationVariable(t.image);
 }
 <CLOSE_BRACKET>
}


// general_identification_variable ::= identification_variable | map_field_identification_variable
void general_identification_variable() #GeneralIdentificationVariable :
{
  Token t;
  MapFieldIdentificationVariable mapFieldIdentificationVariable;
}
{
 t=<NAME>
 {
   jjtThis.setIdentificationVariable(t.image);
 }
 |
 mapFieldIdentificationVariable=map_field_identification_variable()
 {
   jjtThis.setMapFieldIdentificationVariable(mapFieldIdentificationVariable);
 }
}


// simple_subpath ::= general_identification_variable | general_identification_variable{.single_valued_object_field}*
void simple_subpath() #SimpleSubpath :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
 LOOKAHEAD(2)
 general_identification_variable()
 |
 general_identification_variable()
 (
   LOOKAHEAD(2)
   <DOT>
   t=<NAME>
   {
     jjtThis.addPath(t.image);
   }
 )*
}


// general_subpath ::= simple_subpath | treated_subpath{.single_valued_object_field}*
void general_subpath() #GeneralSubpath :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
   simple_subpath()
   |
   treated_subpath()
   (
     LOOKAHEAD(2)
     t=<DOT>
     t=<NAME>
     {
       jjtThis.addPath(t.image);
     }
   )*
}


//  treated_subpath ::= TREAT(general_subpath AS subtype)
void treated_subpath() #TreatedSubpath :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <TREAT>
  <OPEN_BRACKET>
  general_subpath()
  <AS>
  t=<NAME>
  {
    jjtThis.setSubtype(t.image);
  }
  <CLOSE_BRACKET>
}


// state_field_path_expression ::= general_subpath.state_field
void state_field_path_expression() #StateFieldPathExpression :
{
  Token t;
}
{
 general_subpath()
 <DOT>
 t=<NAME>
 {
   jjtThis.setStateField(t.image);
 }
}


// state_valued_path_expression ::= state_field_path_expression | general_identification_variable
void state_valued_path_expression() #StateValuedPathExpression :
{
}
{
   LOOKAHEAD(3)
   state_field_path_expression()
   |
   general_identification_variable()
}


//   functions_returning_strings ::=
//      CONCAT(string_expression, string_expression{, string_expression}*) |
//      SUBSTRING(string_expression, arithmetic_expression[, arithmetic_expression]) |
//      TRIM([[trim_specification] [trim_character] FROM] string_expression) |
//      LOWER(string_expression) |
//      UPPER(string_expression)
//   trim_specification ::= LEADING | TRAILING | BOTH
String functions_returning_strings() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<CONCAT>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  string_expression()
  t=<COMMA>
    {
     sb.append(t.image);
    }
  string_expression()
  (
    t=<COMMA>
      {
       sb.append(t.image);
      }
    string_expression()
  )*
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<SUBSTRING>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  string_expression()
  t=<COMMA>
    {
     sb.append(t.image);
    }
  arithmetic_expression()
  (
    t=<COMMA>
      {
       sb.append(t.image);
      }
    arithmetic_expression()
  )*
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<TRIM>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  [
   LOOKAHEAD(2)
   [
    t=<LEADING>
      {
       sb.append(t.image);
      }
    |
    t=<TRAILING>
      {
       sb.append(t.image);
      }
    |
    t=<BOTH>
      {
       sb.append(t.image);
      }
   ]
   [
    t=<STRING_LITERAL>
      {
       sb.append(t.image);
      }
   ]
   t=<FROM>
     {
      sb.append(t.image);
     }
  ]
  string_expression()
  <CLOSE_BRACKET>
  { return sb.toString(); }
  
  |
    t=<LOWER>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  string_expression()
  t=<CLOSE_BRACKET>
  { return sb.toString(); }

  |
    t=<UPPER>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  string_expression()
  t=<CLOSE_BRACKET>
  { return sb.toString(); }
}


//   functions_returning_datetime ::=
//      CURRENT_DATE |
//      CURRENT_TIME |
//      CURRENT_TIMESTAMP
org.minijpa.jdbc.db.SqlFunction functions_returning_datetime() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <CURRENT_DATE>
  {
    return org.minijpa.jdbc.db.SqlFunction.CURRENT_DATE;
  }
  
  |
  <CURRENT_TIME>
  {
    return org.minijpa.jdbc.db.SqlFunction.CURRENT_TIME;
  }
    
  |
  <CURRENT_TIMESTAMP>
  {
    return org.minijpa.jdbc.db.SqlFunction.CURRENT_TIMESTAMP;
  }
}


//   functions_returning_numerics ::=
//      LENGTH(string_expression) |
//      LOCATE(string_expression, string_expression[, arithmetic_expression]) |
//      ABS(arithmetic_expression) |
//      SQRT(arithmetic_expression) |
//      MOD(arithmetic_expression, arithmetic_expression) |
//      SIZE(collection_valued_path_expression) |
//      INDEX(identification_variable)
String functions_returning_numerics() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<LENGTH>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  string_expression()
  <CLOSE_BRACKET>
  { return sb.toString(); }
  
  |
  t=<LOCATE>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  string_expression()
  t=<COMMA>
    {
     sb.append(t.image);
    }
  arithmetic_expression()
  (
    t=<COMMA>
      {
       sb.append(t.image);
      }
    arithmetic_expression()
  )
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<ABS>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  arithmetic_expression()
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<SQRT>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  arithmetic_expression()
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<MOD>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  arithmetic_expression()
  t=<COMMA>
    {
     sb.append(t.image);
    }
  arithmetic_expression()
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<SIZE>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  collection_valued_path_expression()
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  t=<INDEX>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  t=<NAME>
    {
     sb.append(t.image);
    }
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}


// single_valued_object_path_expression ::= general_subpath.single_valued_object_field
void single_valued_object_path_expression() #SingleValuedObjectPathExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  general_subpath()
  <DOT>
  t=<NAME>
  {
    jjtThis.setSingleValuedObjectField(t.image);
  }
}


// aggregate_expression ::=
//    {AVG | MAX | MIN | SUM} ([DISTINCT] state_valued_path_expression) |
//    COUNT ([DISTINCT] identification_variable | state_valued_path_expression | single_valued_object_path_expression) |
//    function_invocation
void aggregate_expression() #AggregateExpression :
{
  Token t;
  String s;
}
{
  (
   <AVG>
   {
     jjtThis.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.AVG);
   }
   |
   <MAX>
   {
     jjtThis.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.MAX);
   }
   |
   <MIN>
   {
     jjtThis.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.MIN);
   }
   |
   <SUM>
   {
     jjtThis.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.SUM);
   }
  )
  <OPEN_BRACKET>
  [
   <DISTINCT>
   {
     jjtThis.setDistinct(true);
   }
  ]
  state_valued_path_expression()
  <CLOSE_BRACKET>
  
  |
   <COUNT>
   {
     jjtThis.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.COUNT);
   }
  <OPEN_BRACKET>
  [
   <DISTINCT>
   {
     jjtThis.setDistinct(true);
   }
  ]
  t=<NAME>
    {
      jjtThis.setIdentificationVariable(t.image);
    }
  |
  LOOKAHEAD(3)
  state_valued_path_expression()
  |
  single_valued_object_path_expression()
  <CLOSE_BRACKET>

  |
  s=function_invocation()
    {
      //sb.append(s);
    }
}


//   function_invocation ::= FUNCTION(function_name{, function_arg}*)
String function_invocation() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<FUNCTION>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  t=<NAME>
    {
     sb.append(t.image);
    }
  (
   t=<COMMA>
     {
       sb.append(t.image);
     }
   function_arg()
  )*
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}


//   function_arg ::=
//      literal |
//      state_valued_path_expression |
//      input_parameter |
//      scalar_expression
void function_arg() #FunctionArg :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(2)
  t=<NAME>
    {
     sb.append(t.image);
    }
  
  |
  LOOKAHEAD(3)
  state_valued_path_expression()
  
  |
  LOOKAHEAD(2)
  t=<INPUT_PARAMETER>
    {
     sb.append(t.image);
    }

  |
  scalar_expression()
}


// scalar_expression ::=
//    arithmetic_expression |
//    string_expression |
//    enum_expression |
//    datetime_expression |
//    boolean_expression |
//    case_expression |
//    entity_type_expression
void scalar_expression() #ScalarExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(3)
  string_expression()

  |
  LOOKAHEAD(3)
  datetime_expression()

  |
  LOOKAHEAD(3)
  arithmetic_expression()
  
  |
  LOOKAHEAD(3)
  boolean_expression()

  |
  LOOKAHEAD(3)
  enum_expression()
  
  |
  case_expression()
  
  |
  s=entity_type_expression()
    {
     sb.append("");
     sb.append(s);
    }
}


//   nullif_expression::= NULLIF(scalar_expression, scalar_expression)
void nullif_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NULLIF>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  scalar_expression()
  t=<COMMA>
    {
      sb.append(t.image);
    }
  scalar_expression()
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
}


//   coalesce_expression ::= COALESCE(scalar_expression{, scalar_expression}+)
void coalesce_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<COALESCE>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  scalar_expression()
  (
  t=<COMMA>
    {
      sb.append(t.image);
    }
  scalar_expression()
  )+
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
}


//   simple_when_clause ::= WHEN scalar_expression THEN scalar_expression
void simple_when_clause() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<WHEN>
    {
     sb.append(t.image);
    }
  scalar_expression()
  t=<THEN>
    {
      sb.append(t.image);
    }
  scalar_expression()
}


// type_discriminator ::=
//        TYPE(general_identification_variable |
//          single_valued_object_path_expression |
//          input_parameter)
String type_discriminator() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<TYPE>
    {
     sb.append(t.image);
    }
  t=<OPEN_BRACKET>
    {
     sb.append(t.image);
    }
  general_identification_variable()
  t=<CLOSE_BRACKET>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
  
  |
  single_valued_object_path_expression()
  { return sb.toString(); }
  
  |
  t=<INPUT_PARAMETER>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}


//   case_operand ::= state_valued_path_expression | type_discriminator
void case_operand() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(3)
  state_valued_path_expression()
  |
  s=type_discriminator()
    {
      sb.append(s);
    }
}


//   simple_case_expression ::=
//      CASE case_operand simple_when_clause {simple_when_clause}*
//      ELSE scalar_expression
//      END
void simple_case_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<CASE>
    {
     sb.append(t.image);
    }
  case_operand()
  simple_when_clause()
  (
   simple_when_clause()
  )*
  t=<ELSE>
    {
     sb.append(t.image);
    }
  scalar_expression()
  t=<END>
    {
     sb.append(t.image);
    }
}


//   when_clause ::= WHEN conditional_expression THEN scalar_expression
void when_clause() #WhenClause :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <WHEN>
  conditional_expression()
  <THEN>
  scalar_expression()
}


//   general_case_expression::= CASE when_clause {when_clause}* ELSE scalar_expression END
void general_case_expression() #GeneralCaseExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<CASE>
    {
     sb.append(t.image);
    }
  when_clause()
  (
   when_clause()
  )*
  t=<ELSE>
    {
     sb.append(t.image);
    }
  scalar_expression()
  t=<END>
    {
     sb.append(t.image);
    }  
}


//   case_expression ::=
//      general_case_expression |
//      simple_case_expression |
//      coalesce_expression |
//      nullif_expression
void case_expression() #CaseExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(2)
  general_case_expression()
  
  |
  simple_case_expression()

  |
  coalesce_expression()
  
  |
  nullif_expression()
}


// entity_type_expression ::= type_discriminator | entity_type_literal | input_parameter
String entity_type_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(2)
  s=type_discriminator()
    {
      sb.append(s);
    }
  { return sb.toString(); }

  |  
  t=<NAME>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }

  |
  t=<INPUT_PARAMETER>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}


// simple_entity_expression ::= identification_variable | input_parameter
String simple_entity_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }

  |
  t=<INPUT_PARAMETER>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  { return sb.toString(); }
}


// entity_expression ::= single_valued_object_path_expression | simple_entity_expression
String entity_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(2)
  single_valued_object_path_expression()
  { return sb.toString(); }

  |  
  s=simple_entity_expression()
    {
      sb.append(s);
    }
  { return sb.toString(); }
}


// enum_expression ::=
//    state_valued_path_expression |
//    enum_literal |
//    input_parameter |
//    case_expression |
//    (subquery)
void enum_expression() #EnumExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(2)
  state_valued_path_expression()

  |  
  t=<NAME>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  
  |
  t=<INPUT_PARAMETER>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  
  |
  case_expression()
  
  |
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
}


// boolean_literal ::= <TRUE> | <FALSE>
Boolean boolean_literal() :
{
}
{
 <TRUE>
 {
  return Boolean.TRUE;
 }
 |
 <FALSE>
 {
  return Boolean.FALSE;
 }
}


// boolean_expression ::=
//    state_valued_path_expression |
//    boolean_literal |
//    input_parameter |
//    case_expression |
//    function_invocation |
//    (subquery)
 void boolean_expression() #BooleanExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  Boolean booleanValue;
}
{
  LOOKAHEAD(2)
  state_valued_path_expression()

  |
  booleanValue=boolean_literal()
  {
    jjtThis.setBooleanValue(booleanValue);
  }
  
  |
  t=<INPUT_PARAMETER>
  {
    jjtThis.setInputParameter(t.image);
  }
  
  |
  case_expression()
  
  |
  s=function_invocation()
    {
      sb.append(" ");
      sb.append(s);
    }

  |
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
}


// datetime_expression ::=
//    state_valued_path_expression |
//    input_parameter |
//    functions_returning_datetime |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    date_time_timestamp_literal |
//    (subquery)
void datetime_expression() #DatetimeExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  org.minijpa.jdbc.db.SqlFunction sqlFunction;
}
{
  LOOKAHEAD(2)
  state_valued_path_expression()

  |
  t=<INPUT_PARAMETER>
  {
    jjtThis.setInputParameter(t.image);
  }

  |
  sqlFunction=functions_returning_datetime()
  {
    jjtThis.setSqlFunction(sqlFunction);
  }

  |
  LOOKAHEAD(3)
  aggregate_expression()

  |
  case_expression()

  |
  s=function_invocation()
    {
      sb.append(" ");
      sb.append(s);
    }

  |  
  t=<NAME>
    {
      sb.append(" ");
      sb.append(t.image);
    }

  |
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
}


// string_expression ::=
//    state_valued_path_expression |
//    string_literal |
//    input_parameter |
//    functions_returning_strings |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    (subquery)
void string_expression() #StringExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD("(" <SELECT>)
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
  |
  
  LOOKAHEAD(3)
  state_valued_path_expression()
  |
  t=<STRING_LITERAL>
  {
    jjtThis.setStringLiteral(t.image);
  }
  |
  t=<INPUT_PARAMETER>
  {
    jjtThis.setInputParameter(t.image);
  }
  |
  s=functions_returning_strings()
    {
      sb.append(" ");
      sb.append(s);
    }
  |
  LOOKAHEAD(3)
  aggregate_expression()
  |
  case_expression()
  |
  s=function_invocation()
    {
      sb.append(" ");
      sb.append(s);
    }
//  |
//  <OPEN_BRACKET>
//  subquery()
//  <CLOSE_BRACKET>
}


// arithmetic_primary ::=
//    state_valued_path_expression |
//    numeric_literal |
//    (arithmetic_expression) |
//    input_parameter |
//    functions_returning_numerics |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    (subquery)
void arithmetic_primary() #ArithmeticPrimary :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD("(" <SELECT>)
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
  |

  t=<NUMERIC_LITERAL>
    {
      jjtThis.setResult(t.image);
    }
  |
  LOOKAHEAD(3)
  state_valued_path_expression()

  |
  LOOKAHEAD(2)
  t=<OPEN_BRACKET>
    {
      sb.append(t.image);
    }
  arithmetic_expression()
  t=<CLOSE_BRACKET>
    {
      sb.append(t.image);
    }
  
  |
  t=<INPUT_PARAMETER>
  {
    jjtThis.setInputParameter(t.image);
  }
  
  |
  s=functions_returning_numerics()
    {
      sb.append(" ");
      sb.append(s);
    }

  |
  LOOKAHEAD(3)
  aggregate_expression()

  |
  case_expression()
  
  |
  s=function_invocation()
    {
      sb.append(" ");
      sb.append(s);
    }
}


// arithmetic_factor ::= [{+ | -}] arithmetic_primary
void arithmetic_factor() #ArithmeticFactor :
{
}
{
 [
  "+"
    {
      jjtThis.setSign("+");
    }
  |
  "-"
    {
      jjtThis.setSign("-");
    }
 ]
  arithmetic_primary()
}


// arithmetic_term ::= arithmetic_factor | arithmetic_term {* | /} arithmetic_factor
// LEFT RECURSION
// SOLVED AS:
// arithmetic_term ::= arithmetic_factor {{* | /} arithmetic_factor}*
void arithmetic_term() #ArithmeticTerm :
{
}
{
  arithmetic_factor()

  (
   LOOKAHEAD(2)
   (
   "*"
     {
       jjtThis.addSign("*");
     }
   |
   "/"
     {
       jjtThis.addSign("/");
     }
   )
   arithmetic_factor()
  )*
}


// arithmetic_expression ::= arithmetic_term | arithmetic_expression {+ | -} arithmetic_term
// LEFT RECURSION
// SOLVED AS:
// arithmetic_expression ::= arithmetic_term {{+ | -} arithmetic_term}*
void arithmetic_expression() #ArithmeticExpression :
{
}
{
  arithmetic_term()
  (
   (
   "+"
     {
       jjtThis.addSign("+");
     }
   |
   "-"
     {
       jjtThis.addSign("-");
     }
   )
   arithmetic_term()
  )*
}


// all_or_any_expression ::= {ALL | ANY | SOME} (subquery)
void all_or_any_expression() #AllOrAnyExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  (
  t=<ALL>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  |
  t=<ANY>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  |
  t=<SOME>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  )
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
}


String comparison_operator() :
{
  Token t;
}
{
  t=<GT>
  {
    return t.image;
  }
  |  
  t=<GE>
  {
    return t.image;
  }
  |  
  t=<LT>
  {
    return t.image;
  }
  |  
  t=<LE>
  {
    return t.image;
  }
  |  
  t=<NE>
  {
    return t.image;
  }
  |  
  t=<EQ>
  {
    return t.image;
  }
}


// string_expression_comparison ::= string_expression comparison_operator {string_expression | all_or_any_expression}
void string_expression_comparison() #StringExpressionComparison :
{
  String s;
  StringBuilder sb=new StringBuilder();
}
{
  string_expression()
  s=comparison_operator()
  {
    jjtThis.setComparisonOperator(s);
  }
  (
   string_expression()
   |
   all_or_any_expression()
  )
}


// arithmetic_expression_comparison ::= arithmetic_expression comparison_operator {arithmetic_expression | all_or_any_expression}
void arithmetic_expression_comparison() #ArithmeticExpressionComparison :
{
  String s;
  StringBuilder sb=new StringBuilder();
}
{
  arithmetic_expression()
  s=comparison_operator()
  {
    jjtThis.setComparisonOperator(s);
  }
  (
   arithmetic_expression()
   |
   all_or_any_expression()
  )
}


// boolean_expression_comparison ::= boolean_expression {= | <>} {boolean_expression | all_or_any_expression}
void boolean_expression_comparison() #BooleanExpressionComparison :
{
  String s;
  StringBuilder sb=new StringBuilder();
}
{
  boolean_expression()
  (
   "="
   {
    jjtThis.setComparisonOperator("=");
   }
   |
   "<>"
   {
    jjtThis.setComparisonOperator("<>");
   }
  )
  (
   boolean_expression()
   |
   all_or_any_expression()
  )
}


// datetime_expression_comparison ::= datetime_expression comparison_operator {datetime_expression | all_or_any_expression}
void datetime_expression_comparison() #DatetimeExpressionComparison :
{
  String s;
  StringBuilder sb=new StringBuilder();
}
{
  datetime_expression()
  s=comparison_operator()
  {
    jjtThis.setComparisonOperator(s);
  }
  (
   datetime_expression()
   |
   all_or_any_expression()
  )
}


// comparison_expression ::=
//    string_expression_comparison |
//    arithmetic_expression_comparison |
//    boolean_expression_comparison |
//    datetime_expression_comparison |
//    enum_expression {= | <>} {enum_expression | all_or_any_expression} |
//    entity_expression {= | <>} {entity_expression | all_or_any_expression} |
//    entity_type_expression {= | <>} entity_type_expression
void comparison_expression() #ComparisonExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(string_expression_comparison())
  string_expression_comparison()
  |

  LOOKAHEAD(arithmetic_expression_comparison())
  arithmetic_expression_comparison()
  |

  LOOKAHEAD(boolean_expression_comparison())
  boolean_expression_comparison()
  |

  LOOKAHEAD(datetime_expression_comparison())
  datetime_expression_comparison()
  |
  
  LOOKAHEAD(3)
  enum_expression()
  s=comparison_operator()
  {
    jjtThis.setComparisonOperator(s);
  }
  (
   enum_expression()
   |
   all_or_any_expression()
  )
  |
  LOOKAHEAD(3)
  s=entity_expression()
    {
      sb.append(" ");
      sb.append(s);
    }
  s=comparison_operator()
  {
    jjtThis.setComparisonOperator(s);
  }
  (
   s=entity_expression()
     {
       sb.append(" ");
       sb.append(s);
     }
   |
   all_or_any_expression()
  )
  |
  s=entity_type_expression()
    {
      sb.append(" ");
      sb.append(s);
    }
  s=comparison_operator()
  {
    jjtThis.setComparisonOperator(s);
  }
  s=entity_type_expression()
    {
      sb.append(" ");
      sb.append(s);
    }
}


// exists_expression ::= [NOT] EXISTS (subquery)
void exists_expression() #ExistsExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  [
  t=<NOT>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  t=<EXISTS>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  <OPEN_BRACKET>
  subquery()
  <CLOSE_BRACKET>
}


// entity_or_value_expression ::=
//    single_valued_object_path_expression |
//    state_field_path_expression |
//    simple_entity_or_value_expression
//
// simple_entity_or_value_expression ::=
//    identification_variable |
//    input_parameter |
//    literal
String entity_or_value_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(3)
  single_valued_object_path_expression()
    {
      return sb.toString();
    }
    
  |
  LOOKAHEAD(2)
  state_field_path_expression()
    {
      return sb.toString();
    }
    
  |
  t=<NAME>
    {
      sb.append(" ");
      sb.append(t.image);
      return sb.toString();
    }
  
  |
  t=<INPUT_PARAMETER>
    {
      sb.append(" ");
      sb.append(t.image);
      return sb.toString();
    }
}


// collection_valued_path_expression ::= general_subpath.{collection_valued_field}
void collection_valued_path_expression() #CollectionValuedPathExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  general_subpath()
  <DOT>
  (
  t=<NAME>
    {
      jjtThis.setCollectionValuedField(t.image);
    }
  )
}


//  collection_member_expression ::= entity_or_value_expression [NOT] MEMBER [OF] collection_valued_path_expression
String collection_member_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  s=entity_or_value_expression()
    {
      sb.append(" ");
      sb.append(s);
    }
  [
  t=<NOT>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  t=<MEMBER>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  [
  t=<OF>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  collection_valued_path_expression()
  { return sb.toString(); }
}


// empty_collection_comparison_expression ::= collection_valued_path_expression IS [NOT] EMPTY
String empty_collection_comparison_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  collection_valued_path_expression()
  t=<IS>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  [
  t=<NOT>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  t=<EMPTY>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  { return sb.toString(); }
}


// null_comparison_expression ::= {single_valued_path_expression | input_parameter} IS [NOT] NULL
void null_comparison_expression() #NullComparisonExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
 (
  single_valued_path_expression()
  |
   t=<INPUT_PARAMETER>
     {
       jjtThis.setInputParameter(t.image);
     }
  )
  <IS>
  [
   <NOT>
   {
     jjtThis.setNot(true);
   }
  ]
  <NULL>
}


// like_expression ::= string_expression [NOT] LIKE pattern_value [ESCAPE escape_character]
void like_expression() #LikeExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  string_expression()
  [
   <NOT>
   {
     jjtThis.setNot(true);
   }
  ]
  <LIKE>
  t=<STRING_LITERAL>
    {
      jjtThis.setPatternValue(t.image);
    }
  [
   <ESCAPE>
   t=<STRING_LITERAL>
     {
       sb.append(" ");
       sb.append(t.image);
     }
  ]
}


// in_item ::= literal | single_valued_input_parameter
void in_item() #InItem :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<STRING_LITERAL>
    {
      jjtThis.setLiteral(t.image);
    }

  |
  t=<INPUT_PARAMETER>
    {
      jjtThis.setInputParameter(t.image);
    }
}


// in_expression ::= {state_valued_path_expression | type_discriminator} [NOT] IN
//        {(in_item{, in_item}*) | (subquery) | collection_valued_input_parameter}
void in_expression() #InExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  (
  LOOKAHEAD(3)
  state_valued_path_expression()
  |
  s=type_discriminator()
    {
      sb.append(" ");
      sb.append(s);
    }
  )
  [
   <NOT>
   {
     jjtThis.setNot(true);
   }
  ]
  
  <IN>
  (
   LOOKAHEAD(2)
   (
    in_item()
    (
     <COMMA>
     in_item()
    )*
   )
  |
   <OPEN_BRACKET>
   subquery()
   <CLOSE_BRACKET>
   |
   t=<INPUT_PARAMETER>
     {
       sb.append(t.image);
     }
  )
}


// between_expression ::=
//    arithmetic_expression [NOT] BETWEEN arithmetic_expression AND arithmetic_expression |
//    string_expression [NOT] BETWEEN string_expression AND string_expression |
//    datetime_expression [NOT] BETWEEN datetime_expression AND datetime_expression
String between_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(arithmetic_expression())
  arithmetic_expression()
  [
  t=<NOT>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  t=<BETWEEN>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  arithmetic_expression()
  t=<AND>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  arithmetic_expression()
  { return sb.toString(); }

  |
  LOOKAHEAD(string_expression())
  string_expression()
  [
  t=<NOT>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  t=<BETWEEN>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  string_expression()
  t=<AND>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  string_expression()
  { return sb.toString(); }
  
  |
  datetime_expression()
  [
  t=<NOT>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  ]
  t=<BETWEEN>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  datetime_expression()
  t=<AND>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  datetime_expression()
  { return sb.toString(); }
}


// simple_cond_expression ::=
//    comparison_expression |
//    between_expression |
//      in_expression |
//    like_expression |
//    null_comparison_expression |
//    empty_collection_comparison_expression |
//    collection_member_expression |
//    exists_expression
void simple_cond_expression() #SimpleCondExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(3)
  comparison_expression()
  |
  LOOKAHEAD(3)
  s=between_expression()
    {
      sb.append(" ");
      sb.append(s);
    }

  |
  LOOKAHEAD(3)
  in_expression()
  
  |
  LOOKAHEAD(3)
  like_expression()
  
  |
  LOOKAHEAD(3)
  null_comparison_expression()
  
  |
  LOOKAHEAD(3)
  s=empty_collection_comparison_expression()
    {
      sb.append(" ");
      sb.append(s);
    }
  
  |
  s=collection_member_expression()
    {
      sb.append(" ");
      sb.append(s);
    }
  
  |
  exists_expression()
}


// conditional_primary ::= simple_cond_expression | (conditional_expression)
void conditional_primary() #ConditionalPrimary :
{
  Token t;
  String s;
}
{
  LOOKAHEAD(3)
  simple_cond_expression()
  |
   <OPEN_BRACKET>
   conditional_expression()
   <CLOSE_BRACKET>
}


// conditional_factor ::= [NOT] conditional_primary
void conditional_factor() #ConditionalFactor :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
 [
  LOOKAHEAD(2)
  <NOT>
  {
    jjtThis.setNot(true);
  }
 ]
 conditional_primary()
}


// conditional_term ::= conditional_factor | conditional_term AND conditional_factor
// LEFT RECURSION
// SOLVED AS:
// conditional_term ::= conditional_factor {AND conditional_factor}*
void conditional_term() #ConditionalTerm :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  conditional_factor()
  (
   <AND>
   conditional_factor()
  )*
}


// conditional_expression ::= conditional_term | conditional_expression OR conditional_term
// LEFT RECURSION
// SOLVED AS:
// conditional_expression ::= conditional_term {OR conditional_term}*
void conditional_expression() #ConditionalExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  conditional_term()
  (  
   <OR>
   conditional_term()
  )*
}


// where_clause ::= WHERE conditional_expression
void where_clause() #WhereClause :
{
}
{
  <WHERE>
  conditional_expression()
}


//   single_valued_path_expression ::=
//      qualified_identification_variable |
//      TREAT(qualified_identification_variable AS subtype) |
//      state_field_path_expression |
//      single_valued_object_path_expression
//
//  MODIFIED as: ('state_field_path_expression' and 'single_valued_object_path_expression' could be the same)
//
//   single_valued_path_expression ::=
//      qualified_identification_variable |
//      TREAT(qualified_identification_variable AS subtype) |
//      state_field_path_expression |
void single_valued_path_expression() #SingleValuedPathExpression :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(3)
  state_field_path_expression()
  
  |
  LOOKAHEAD(3)
  <TREAT>
  <OPEN_BRACKET>
  qualified_identification_variable()
  <AS>
  s=subtype()
    {
      jjtThis.setSubtype(s);
    }
  <CLOSE_BRACKET>

  |
  LOOKAHEAD(3)
  qualified_identification_variable()
    
//  |
//  single_valued_object_path_expression()
}


// simple_select_expression::=
//    single_valued_path_expression |
//    aggregate_expression |
//    scalar_expression |
//    identification_variable
void simple_select_expression() #SimpleSelectExpression :
{
  Token t;
}
{
  LOOKAHEAD(single_valued_path_expression())
  single_valued_path_expression()

  |
  LOOKAHEAD(2)
  aggregate_expression()
  
  |
  LOOKAHEAD(3)
  scalar_expression()
  
  |
  t=<NAME>
  {
    jjtThis.setIdentificationVariable(t.image);
  }
}


// simple_select_clause ::= SELECT [DISTINCT] simple_select_expression
void simple_select_clause() #SimpleSelectClause :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <SELECT>
  [
   <DISTINCT>
   {
     jjtThis.setDistinct(true);
   }
  ]
  simple_select_expression()
}


// derived_collection_member_declaration ::= IN
//     superquery_identification_variable.{single_valued_object_field.}*collection_valued_field
void derived_collection_member_declaration() #DerivedCollectionMemberDeclaration :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <IN>
  t=<NAME>
  {
    jjtThis.setIdentificationVariable(t.image);
  }
  <DOT>
  (
   LOOKAHEAD(2)
   t=<NAME>
   {
     jjtThis.addPath(t.image);
   }
   <DOT>
  )*
  t=<NAME>
  {
    jjtThis.setCollectionValuedField(t.image);
   }
}


// treated_derived_path ::= TREAT(general_derived_path AS subtype)
void treated_derived_path() #TreatedDerivedPath :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <TREAT>
  <OPEN_BRACKET>
  general_derived_path()
  <AS>
  s=subtype()
    {
      sb.append(" ");
      sb.append(s);
    }
  <CLOSE_BRACKET>
}


// simple_derived_path ::= superquery_identification_variable{.single_valued_object_field}*
void simple_derived_path() #SimpleDerivedPath :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
  {
    jjtThis.setIdentificationVariable(t.image);
  }
  (
   LOOKAHEAD(2)
   <DOT>
   t=<NAME>
   {
     jjtThis.addPath(t.image);
   }
  )*
}


// general_derived_path ::= simple_derived_path | treated_derived_path{.single_valued_object_field}*
void general_derived_path() #GeneralDerivedPath :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  simple_derived_path()
  
  |
  treated_derived_path()
  (
   LOOKAHEAD(2)
   <DOT>
   t=<NAME>
   {
     jjtThis.addPath(t.image);
   }
  )*
}


// derived_path_expression ::=
//    general_derived_path.single_valued_object_field |
//    general_derived_path.collection_valued_field
void derived_path_expression() #DerivedPathExpression :
{
  Token t;
}
{
  general_derived_path()
  <DOT>
  t=<NAME>
  {
    jjtThis.setField(t.image);
  }
}


// subselect_identification_variable_declaration ::=
//    identification_variable_declaration |
//    derived_path_expression [AS] identification_variable {join}* |
//    derived_collection_member_declaration
void subselect_identification_variable_declaration() #SubselectIdentificationVariableDeclaration :
{
  Token t;
}
{
  LOOKAHEAD(identification_variable_declaration())
  identification_variable_declaration()
  |
  
  LOOKAHEAD(2)
  general_derived_path()     //  derived_path_expression()
  [<AS>]
  t=<NAME>
  {
    jjtThis.setEntityAlias(t.image);
  }
  (
   join()
  )*
  
  |
  derived_collection_member_declaration()
}


// subquery_from_clause ::=
//    FROM subselect_identification_variable_declaration {, subselect_identification_variable_declaration |
//           collection_member_declaration}*
void subquery_from_clause() #SubqueryFromClause :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <FROM>
  subselect_identification_variable_declaration()
  (
   <COMMA>
//   LOOKAHEAD(3)
   subselect_identification_variable_declaration()
   |
   collection_member_declaration()
  )*
}


//   collection_member_declaration ::=
//      IN (collection_valued_path_expression) [AS] identification_variable
void collection_member_declaration() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <IN>
  <OPEN_BRACKET>
  collection_valued_path_expression()
  [<AS>]
  t=<NAME>
    {
     sb.append(" ");
     sb.append(t.image);
    }
  <CLOSE_BRACKET>
}


// subquery ::= simple_select_clause subquery_from_clause [where_clause]
//    [groupby_clause] [having_clause]
void subquery() #Subquery :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  simple_select_clause()
  subquery_from_clause()
  [
   where_clause()
  ]
  [
   groupby_clause()
  ]
  [
   having_clause()
  ]
}


// orderby_item ::=
//    state_field_path_expression |
//    general_identification_variable |
//    result_variable
//    [ASC | DESC]
String orderby_item() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(3)
  state_field_path_expression()
    {
      return sb.toString();
    }
    
  |
  LOOKAHEAD(2)
  general_identification_variable()
    {
      return "";
    }
    
  |
  t=<NAME>
    {
      sb.append(" ");
      sb.append(t.image);
      return sb.toString();
    }

  [
   t=<ASC>
     {
       sb.append(" ");
       sb.append(t.image);
     }
   |
   t=<DESC>
     {
       sb.append(" ");
       sb.append(t.image);
     }
  ]
  { return sb.toString(); }
}


// orderby_clause ::= ORDER BY orderby_item {, orderby_item}*
String orderby_clause() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<ORDER>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  t=<BY>
    {
      sb.append(" ");
      sb.append(t.image);
    }
  s=orderby_item()
    {
      sb.append(" ");
      sb.append(s);
    }
  (
  t=<COMMA>
    {
      sb.append(t.image);
    }
  s=orderby_item()
    {
      sb.append("");
      sb.append(s);
    }
  )*
  
  { return sb.toString(); }
}


// having_clause ::= HAVING conditional_expression
void having_clause() #HavingClause :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <HAVING>
  conditional_expression()
}


// groupby_item ::= single_valued_path_expression | identification_variable
void groupby_item() #GroupbyItem :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  LOOKAHEAD(2)
  single_valued_path_expression()
  
  |
  t=<NAME>
    {
      jjtThis.setIdentificationVariable(t.image);
    }
}


// groupby_clause ::= GROUP BY groupby_item {, groupby_item}*
void groupby_clause() #GroupbyClause :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  <GROUP>
  <BY>
  groupby_item()
  (
   <COMMA>
   groupby_item()
  )*
}




