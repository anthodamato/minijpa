/*
 * Copyright 2021 Antonio Damato <anto.damato@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.minijpa.jdbc.db;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Optional;
import org.minijpa.jdbc.DDLData;
import org.minijpa.jdbc.DefaultNameTranslator;
import org.minijpa.jdbc.JoinColumnAttribute;
import org.minijpa.jdbc.MetaAttribute;
import org.minijpa.jdbc.NameTranslator;
import org.minijpa.jdbc.PkGenerationType;
import org.minijpa.jdbc.PkStrategy;

public abstract class BasicDbJdbc implements DbJdbc {

    private final NameTranslator nameTranslator = new DefaultNameTranslator();

    @Override
    public NameTranslator getNameTranslator() {
	return nameTranslator;
    }

    @Override
    public PkStrategy findPkStrategy(PkGenerationType pkGenerationType) {
	if (pkGenerationType == null)
	    return PkStrategy.PLAIN;

	if (pkGenerationType == PkGenerationType.IDENTITY)
	    return PkStrategy.IDENTITY;

	if (pkGenerationType == PkGenerationType.SEQUENCE
		|| pkGenerationType == PkGenerationType.AUTO)
	    return PkStrategy.SEQUENCE;

	return PkStrategy.PLAIN;
    }

    public String buildColumnDefinition(Class<?> type, Optional<DDLData> ddlData) {
	if (type == Integer.class || (type.isPrimitive() && type.getName().equals("int")))
	    return "integer";

	if (type == Long.class || (type.isPrimitive() && type.getName().equals("long")))
	    return "bigint";

	if (type == Float.class || (type.isPrimitive() && type.getName().equals("float")))
	    return "float";

	if (type == Double.class || (type.isPrimitive() && type.getName().equals("double")))
	    return "double";

	if (type == BigDecimal.class) {
	    int precision = getDefaultPrecision();
	    int scale = getDefaultScale();
	    if (ddlData.isPresent() && ddlData.get().getPrecision().isPresent() && ddlData.get().getPrecision().get() != 0)
		precision = ddlData.get().getPrecision().get();

	    if (ddlData.isPresent() && ddlData.get().getScale().isPresent() && ddlData.get().getScale().get() != 0)
		scale = ddlData.get().getScale().get();

	    return "decimal(" + precision + "," + scale + ")";
	}

	if (type == Date.class || type == java.sql.Date.class)
	    return "date";

	if (type == Timestamp.class)
	    return "timestamp";

	if (type == String.class)
	    return "varchar(" + ddlData.get().getLength().get() + ")";

	if (type == Boolean.class || (type.isPrimitive() && type.getName().equals("boolean")))
	    return "boolean";

	return "";
    }

    @Override
    public String buildColumnDefinition(MetaAttribute metaAttribute) {
	return buildColumnDefinition(metaAttribute.getReadWriteDbType(), metaAttribute.getDdlData());
    }

    @Override
    public String buildColumnDefinition(JoinColumnAttribute joinColumnAttribute) {
	return buildColumnDefinition(joinColumnAttribute.getType(), Optional.empty());
    }

    @Override
    public String buildIdentityColumnDefinition(MetaAttribute metaAttribute) {
	return buildColumnDefinition(metaAttribute.getType(), metaAttribute.getDdlData()) + " generated by default as identity";
    }

}
