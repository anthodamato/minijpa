/* JpqlParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JpqlParser.java */
package org.minijpa.jpa.jpql;

public class JpqlParser/*@bgen(jjtree)*/implements JpqlParserTreeConstants, JpqlParserConstants {/*@bgen(jjtree)*/
  protected JJTJpqlParserState jjtree = new JJTJpqlParserState();

  final public ASTQLStatement QL_statement() throws ParseException {/*@bgen(jjtree) QLStatement */
  ASTQLStatement jjtn000 = new ASTQLStatement(JJTQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String result;
    try {
      select_statement();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

//   select_statement ::= select_clause from_clause [where_clause] [groupby_clause]
//      [having_clause] [orderby_clause]
  final public void select_statement() throws ParseException {/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      select_clause();
      from_clause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        where_clause();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// select_clause ::= SELECT [DISTINCT] select_item {, select_item}*
  final public void select_clause() throws ParseException {/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);StringBuilder sb=new StringBuilder();
  String s;
  Token t;
    try {
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISTINCT:{
        jj_consume_token(DISTINCT);
jjtn000.setDistinct(true);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      select_item();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        select_item();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// select_item ::= select_expression [[AS] result_variable]
  final public void select_item() throws ParseException {/*@bgen(jjtree) SelectItem */
  ASTSelectItem jjtn000 = new ASTSelectItem(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      select_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:
      case NAME:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          jj_consume_token(AS);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        t = jj_consume_token(NAME);
jjtn000.setAlias(t.image);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// select_expression ::=
//    single_valued_path_expression |
//    scalar_expression |
//    aggregate_expression |
//    identification_variable |
//    OBJECT(identification_variable) |
//    constructor_expression
  final public void select_expression() throws ParseException {/*@bgen(jjtree) SelectExpression */
  ASTSelectExpression jjtn000 = new ASTSelectExpression(JJTSELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_1(2147483647)) {
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
      } else if (jj_2_2(2)) {
        single_valued_path_expression();
      } else if (jj_2_3(2)) {
        scalar_expression();
      } else if (jj_2_4(2)) {
        s = aggregate_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OBJECT:{
          jj_consume_token(OBJECT);
          jj_consume_token(OPEN_BRACKET);
          t = jj_consume_token(NAME);
jjtn000.setObjectIdentificationVariable(t.image);
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          if (jj_2_5(2)) {
            s = constructor_expression();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
sb.append(s);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// constructor_item ::=
//    single_valued_path_expression |
//    scalar_expression |
//    aggregate_expression |
//    identification_variable
  final public void constructor_item() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_6(3)) {
      single_valued_path_expression();
    } else if (jj_2_7(3)) {
      scalar_expression();
    } else if (jj_2_8(2)) {
      s = aggregate_expression();
sb.append(s);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
sb.append(t.image);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// constructor_expression ::=
//    NEW constructor_name (constructor_item {, constructor_item}*)
  final public String constructor_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(NEW);
sb.append(t.image);
    t = jj_consume_token(NAME);
sb.append(t.image);
    t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
    constructor_item();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(COMMA);
sb.append(t.image);
      constructor_item();
    }
    t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

//  join_spec ::= [LEFT [OUTER] | INNER] JOIN
  final public JoinType join_spec() throws ParseException {JoinType jt=new JoinType();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INNER:
    case LEFT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT:{
        jj_consume_token(LEFT);
jt.setLeft(true);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OUTER:{
          jj_consume_token(OUTER);
jt.setOuter(true);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        break;
        }
      case INNER:{
        jj_consume_token(INNER);
jt.setInner(true);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(JOIN);
{if ("" != null) return jt;}
    throw new Error("Missing return statement in function");
}

  final public String single_valued_embeddable_object_field() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(NAME);
sb.append(t.image);
      t = jj_consume_token(DOT);
sb.append(".");
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

//   join_single_valued_path_expression ::= 
//        identification_variable.{single_valued_embeddable_object_field.}*single_valued_object_field
//
//// MODIFIED AS:
//
//   join_single_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*NAME
  final public String join_single_valued_path_expression() throws ParseException {/*@bgen(jjtree) JoinSingleValuedPathExpression */
  ASTJoinSingleValuedPathExpression jjtn000 = new ASTJoinSingleValuedPathExpression(JJTJOINSINGLEVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      t = jj_consume_token(NAME);
sb.append(t.image);
      t = jj_consume_token(DOT);
sb.append(".");
      label_4:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_4;
        }
        s = single_valued_embeddable_object_field();
sb.append(s);
        t = jj_consume_token(DOT);
sb.append(".");
      }
      t = jj_consume_token(NAME);
sb.append(t.image);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(sb.toString());
    {if ("" != null) return sb.toString();}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

// join_collection_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*collection_valued_field
//
//// MODIFIED AS:
//
// join_collection_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*FIELD_NAME
/*
String join_collection_valued_path_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
    {
     sb.append(t.image);
    }
  t=<DOT>
    {
     sb.append(".");
    }
  (
   s=single_valued_embeddable_object_field()
     {
      sb.append(s);
     }
   t=<DOT>
     {
      sb.append(".");
     }
  )*
  t=<NAME>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}
*/


// Must be a subtype, entity name?
  final public String subtype() throws ParseException {/*@bgen(jjtree) Subtype */
  ASTSubtype jjtn000 = new ASTSubtype(JJTSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

//  join_association_path_expression ::=
//      join_collection_valued_path_expression |
//      join_single_valued_path_expression |
//      TREAT(join_collection_valued_path_expression AS subtype) |
//      TREAT(join_single_valued_path_expression AS subtype)
//
//// MODIFIED AS:
//
//  join_association_path_expression ::=
//      join_single_valued_path_expression |
//      TREAT(join_single_valued_path_expression AS subtype)
  final public void join_association_path_expression() throws ParseException {/*@bgen(jjtree) JoinAssociationPathExpression */
  ASTJoinAssociationPathExpression jjtn000 = new ASTJoinAssociationPathExpression(JJTJOINASSOCIATIONPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        s = join_single_valued_path_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setJoinSingleValuedPathExpression(s);
        break;
        }
      case TREAT:{
        t = jj_consume_token(TREAT);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        s = join_single_valued_path_expression();
        //    {
        //      sb.append(s);
        //    }
          t = jj_consume_token(AS);
sb.append(" ");
     sb.append(t.image);
        s = subtype();
sb.append(" ");
      sb.append(s);
        t = jj_consume_token(CLOSE_BRACKET);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//  join ::= join_spec join_association_path_expression [AS] identification_variable [join_condition]
// TODO: to be completed
  final public void join() throws ParseException {/*@bgen(jjtree) Join */
  ASTJoin jjtn000 = new ASTJoin(JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  JoinType jt;
    try {
      jt = join_spec();
jjtn000.setJoinType(jt);
      join_association_path_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        t = jj_consume_token(AS);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//    fetch_join ::= join_spec FETCH join_association_path_expression
  final public void fetch_join() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  JoinType jt;
    jt = join_spec();

    jj_consume_token(FETCH);
    join_association_path_expression();
sb.append(" ");
//      sb.append(s);

}

//   entity_name
  final public String entity_name() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

//   range_variable_declaration ::= entity_name [AS] identification_variable
  final public void range_variable_declaration() throws ParseException {/*@bgen(jjtree) RangeVariableDeclaration */
  ASTRangeVariableDeclaration jjtn000 = new ASTRangeVariableDeclaration(JJTRANGEVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
t=getNextToken();
    jjtn000.setEntityName(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        t = jj_consume_token(AS);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setAlias(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//  identification_variable_declaration ::= range_variable_declaration {join | fetch_join}*
  final public void identification_variable_declaration() throws ParseException {/*@bgen(jjtree) IdentificationVariableDeclaration */
  ASTIdentificationVariableDeclaration jjtn000 = new ASTIdentificationVariableDeclaration(JJTIDENTIFICATIONVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      range_variable_declaration();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INNER:
        case JOIN:
        case LEFT:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        if (jj_2_10(2)) {
          join();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INNER:
          case JOIN:
          case LEFT:{
            fetch_join();

            break;
            }
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

//    from_clause ::= FROM  identification_variable_declaration
//          {, {identification_variable_declaration | collection_member_declaration}}*
  final public void from_clause() throws ParseException {/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FROM);
      identification_variable_declaration();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:
        case NAME:{
          identification_variable_declaration();
          break;
          }
        case IN:{
          collection_member_declaration();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

// map_field_identification_variable ::= KEY(identification_variable) | VALUE(identification_variable)
  final public MapFieldIdentificationVariable map_field_identification_variable() throws ParseException {/*@bgen(jjtree) MapFieldIdentificationVariable */
  ASTMapFieldIdentificationVariable jjtn000 = new ASTMapFieldIdentificationVariable(JJTMAPFIELDIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  MapFieldIdentificationVariable mapFieldIdentificationVariable=new MapFieldIdentificationVariable();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:{
        jj_consume_token(KEY);
//   jjtThis.setKey(true);
   mapFieldIdentificationVariable.setMapField(MapField.KEY);
        jj_consume_token(OPEN_BRACKET);
        t = jj_consume_token(NAME);
//   jjtThis.setIdentificationVariable(t.image);
   mapFieldIdentificationVariable.setIdentificationVariable(t.image);
        jj_consume_token(CLOSE_BRACKET);
        break;
        }
      case VALUE:{
        jj_consume_token(VALUE);
//   jjtThis.setKey(false);
   mapFieldIdentificationVariable.setMapField(MapField.VALUE);
        jj_consume_token(OPEN_BRACKET);
        t = jj_consume_token(NAME);
//   jjtThis.setIdentificationVariable(t.image);
   mapFieldIdentificationVariable.setIdentificationVariable(t.image);
        jj_consume_token(CLOSE_BRACKET);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
{if ("" != null) return mapFieldIdentificationVariable;}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
}

// qualified_identification_variable ::= map_field_identification_variable | ENTRY(identification_variable)
  final public void qualified_identification_variable() throws ParseException {/*@bgen(jjtree) QualifiedIdentificationVariable */
  ASTQualifiedIdentificationVariable jjtn000 = new ASTQualifiedIdentificationVariable(JJTQUALIFIEDIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  MapFieldIdentificationVariable mapFieldIdentificationVariable;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:
      case VALUE:{
        mapFieldIdentificationVariable = map_field_identification_variable();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setMapFieldIdentificationVariable(mapFieldIdentificationVariable);
        break;
        }
      case ENTRY:{
        jj_consume_token(ENTRY);
        jj_consume_token(OPEN_BRACKET);
        t = jj_consume_token(NAME);
jjtn000.setEntryIdentificationVariable(t.image);
        jj_consume_token(CLOSE_BRACKET);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// general_identification_variable ::= identification_variable | map_field_identification_variable
  final public void general_identification_variable() throws ParseException {/*@bgen(jjtree) GeneralIdentificationVariable */
  ASTGeneralIdentificationVariable jjtn000 = new ASTGeneralIdentificationVariable(JJTGENERALIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  MapFieldIdentificationVariable mapFieldIdentificationVariable;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
        break;
        }
      case KEY:
      case VALUE:{
        mapFieldIdentificationVariable = map_field_identification_variable();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setMapFieldIdentificationVariable(mapFieldIdentificationVariable);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// simple_subpath ::= general_identification_variable | general_identification_variable{.single_valued_object_field}*
  final public void simple_subpath() throws ParseException {/*@bgen(jjtree) SimpleSubpath */
  ASTSimpleSubpath jjtn000 = new ASTSimpleSubpath(JJTSIMPLESUBPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_12(2)) {
        general_identification_variable();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case VALUE:
        case NAME:{
          general_identification_variable();
          label_7:
          while (true) {
            if (jj_2_11(2)) {
              ;
            } else {
              break label_7;
            }
            jj_consume_token(DOT);
            t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
          }
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// general_subpath ::= simple_subpath | treated_subpath{.single_valued_object_field}*
  final public void general_subpath() throws ParseException {/*@bgen(jjtree) GeneralSubpath */
  ASTGeneralSubpath jjtn000 = new ASTGeneralSubpath(JJTGENERALSUBPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:
      case VALUE:
      case NAME:{
        simple_subpath();
        break;
        }
      case TREAT:{
        treated_subpath();
        label_8:
        while (true) {
          if (jj_2_13(2)) {
            ;
          } else {
            break label_8;
          }
          t = jj_consume_token(DOT);
          t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

//  treated_subpath ::= TREAT(general_subpath AS subtype)
  final public void treated_subpath() throws ParseException {/*@bgen(jjtree) TreatedSubpath */
  ASTTreatedSubpath jjtn000 = new ASTTreatedSubpath(JJTTREATEDSUBPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      jj_consume_token(TREAT);
      jj_consume_token(OPEN_BRACKET);
      general_subpath();
      jj_consume_token(AS);
      t = jj_consume_token(NAME);
jjtn000.setSubtype(t.image);
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// state_field_path_expression ::= general_subpath.state_field
  final public void state_field_path_expression() throws ParseException {/*@bgen(jjtree) StateFieldPathExpression */
  ASTStateFieldPathExpression jjtn000 = new ASTStateFieldPathExpression(JJTSTATEFIELDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      general_subpath();
      jj_consume_token(DOT);
      t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setStateField(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// state_valued_path_expression ::= state_field_path_expression | general_identification_variable
  final public void state_valued_path_expression() throws ParseException {/*@bgen(jjtree) StateValuedPathExpression */
  ASTStateValuedPathExpression jjtn000 = new ASTStateValuedPathExpression(JJTSTATEVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(3)) {
        state_field_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case VALUE:
        case NAME:{
          general_identification_variable();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

//   functions_returning_strings ::=
//      CONCAT(string_expression, string_expression{, string_expression}*) |
//      SUBSTRING(string_expression, arithmetic_expression[, arithmetic_expression]) |
//      TRIM([[trim_specification] [trim_character] FROM] string_expression) |
//      LOWER(string_expression) |
//      UPPER(string_expression)
//   trim_specification ::= LEADING | TRAILING | BOTH
  final public String functions_returning_strings() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONCAT:{
      t = jj_consume_token(CONCAT);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      string_expression();
      t = jj_consume_token(COMMA);
sb.append(t.image);
      string_expression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_9;
        }
        t = jj_consume_token(COMMA);
sb.append(t.image);
        string_expression();
      }
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case SUBSTRING:{
      t = jj_consume_token(SUBSTRING);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      string_expression();
      t = jj_consume_token(COMMA);
sb.append(t.image);
      arithmetic_expression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        t = jj_consume_token(COMMA);
sb.append(t.image);
        arithmetic_expression();
      }
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case TRIM:{
      t = jj_consume_token(TRIM);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      if (jj_2_15(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOTH:
        case LEADING:
        case TRAILING:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LEADING:{
            t = jj_consume_token(LEADING);
sb.append(t.image);
            break;
            }
          case TRAILING:{
            t = jj_consume_token(TRAILING);
sb.append(t.image);
            break;
            }
          case BOTH:{
            t = jj_consume_token(BOTH);
sb.append(t.image);
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING_LITERAL:{
          t = jj_consume_token(STRING_LITERAL);
sb.append(t.image);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        t = jj_consume_token(FROM);
sb.append(t.image);
      } else {
        ;
      }
      string_expression();
      jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
      break;
      }
    case LOWER:{
      t = jj_consume_token(LOWER);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      string_expression();
      t = jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
      break;
      }
    case UPPER:{
      t = jj_consume_token(UPPER);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      string_expression();
      t = jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//   functions_returning_datetime ::=
//      CURRENT_DATE |
//      CURRENT_TIME |
//      CURRENT_TIMESTAMP
  final public org.minijpa.jdbc.db.SqlFunction functions_returning_datetime() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CURRENT_DATE:{
      jj_consume_token(CURRENT_DATE);
{if ("" != null) return org.minijpa.jdbc.db.SqlFunction.CURRENT_DATE;}
      break;
      }
    case CURRENT_TIME:{
      jj_consume_token(CURRENT_TIME);
{if ("" != null) return org.minijpa.jdbc.db.SqlFunction.CURRENT_TIME;}
      break;
      }
    case CURRENT_TIMESTAMP:{
      jj_consume_token(CURRENT_TIMESTAMP);
{if ("" != null) return org.minijpa.jdbc.db.SqlFunction.CURRENT_TIMESTAMP;}
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//   functions_returning_numerics ::=
//      LENGTH(string_expression) |
//      LOCATE(string_expression, string_expression[, arithmetic_expression]) |
//      ABS(arithmetic_expression) |
//      SQRT(arithmetic_expression) |
//      MOD(arithmetic_expression, arithmetic_expression) |
//      SIZE(collection_valued_path_expression) |
//      INDEX(identification_variable)
  final public String functions_returning_numerics() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
      t = jj_consume_token(LENGTH);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      string_expression();
      jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
      break;
      }
    case LOCATE:{
      t = jj_consume_token(LOCATE);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      string_expression();
      t = jj_consume_token(COMMA);
sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(COMMA);
sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case ABS:{
      t = jj_consume_token(ABS);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case SQRT:{
      t = jj_consume_token(SQRT);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case MOD:{
      t = jj_consume_token(MOD);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(COMMA);
sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case SIZE:{
      t = jj_consume_token(SIZE);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      collection_valued_path_expression();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case INDEX:{
      t = jj_consume_token(INDEX);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      t = jj_consume_token(NAME);
sb.append(t.image);
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// single_valued_object_path_expression ::= general_subpath.single_valued_object_field
  final public void single_valued_object_path_expression() throws ParseException {/*@bgen(jjtree) SingleValuedObjectPathExpression */
  ASTSingleValuedObjectPathExpression jjtn000 = new ASTSingleValuedObjectPathExpression(JJTSINGLEVALUEDOBJECTPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      general_subpath();
      jj_consume_token(DOT);
      t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setSingleValuedObjectField(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// aggregate_expression ::=
//    {AVG | MAX | MIN | SUM} ([DISTINCT] state_valued_path_expression) |
//    COUNT ([DISTINCT] identification_variable |
//    state_valued_path_expression |
//    single_valued_object_path_expression) |
//    function_invocation
  final public String aggregate_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AVG:
    case MIN:
    case MAX:
    case SUM:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AVG:{
        t = jj_consume_token(AVG);
sb.append(t.image);
        break;
        }
      case MAX:{
        t = jj_consume_token(MAX);
sb.append(t.image);
        break;
        }
      case MIN:{
        t = jj_consume_token(MIN);
sb.append(t.image);
        break;
        }
      case SUM:{
        t = jj_consume_token(SUM);
sb.append(t.image);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISTINCT:{
        t = jj_consume_token(DISTINCT);
sb.append("");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      state_valued_path_expression();
{if ("" != null) return sb.toString();}
      break;
      }
    case COUNT:{
      t = jj_consume_token(COUNT);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISTINCT:{
        t = jj_consume_token(DISTINCT);
sb.append("");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      t = jj_consume_token(NAME);
sb.append(t.image);
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      if (jj_2_16(3)) {
        state_valued_path_expression();
{if ("" != null) return sb.toString();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case TREAT:
        case VALUE:
        case NAME:{
          single_valued_object_path_expression();
          break;
          }
        case FUNCTION:{
          s = function_invocation();
sb.append("");
      sb.append(s);
{if ("" != null) return sb.toString();}
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

//   function_invocation ::= FUNCTION(function_name{, function_arg}*)
  final public String function_invocation() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(FUNCTION);
sb.append(t.image);
    t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
    t = jj_consume_token(NAME);
sb.append(t.image);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(COMMA);
sb.append(t.image);
      function_arg();
    }
    t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

//   function_arg ::=
//      literal |
//      state_valued_path_expression |
//      input_parameter |
//      scalar_expression
  final public void function_arg() throws ParseException {/*@bgen(jjtree) FunctionArg */
  ASTFunctionArg jjtn000 = new ASTFunctionArg(JJTFUNCTIONARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_17(2)) {
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
      } else if (jj_2_18(3)) {
        state_valued_path_expression();
      } else if (jj_2_19(2)) {
        t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABS:
        case AVG:
        case CASE:
        case COALESCE:
        case CONCAT:
        case COUNT:
        case CURRENT_DATE:
        case CURRENT_TIME:
        case CURRENT_TIMESTAMP:
        case FALSE:
        case FUNCTION:
        case INDEX:
        case KEY:
        case LENGTH:
        case LOCATE:
        case LOWER:
        case MIN:
        case MAX:
        case MOD:
        case NULLIF:
        case SIZE:
        case SQRT:
        case SUBSTRING:
        case SUM:
        case TREAT:
        case TRIM:
        case TRUE:
        case TYPE:
        case UPPER:
        case VALUE:
        case NAME:
        case OPEN_BRACKET:
        case STRING_LITERAL:
        case NUMERIC_LITERAL:
        case INPUT_PARAMETER:
        case 91:
        case 92:{
          scalar_expression();
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// scalar_expression ::=
//    arithmetic_expression |
//    string_expression |
//    enum_expression |
//    datetime_expression |
//    boolean_expression |
//    case_expression |
//    entity_type_expression
  final public void scalar_expression() throws ParseException {/*@bgen(jjtree) ScalarExpression */
  ASTScalarExpression jjtn000 = new ASTScalarExpression(JJTSCALAREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_20(3)) {
        string_expression();
      } else if (jj_2_21(3)) {
        datetime_expression();
      } else if (jj_2_22(3)) {
        arithmetic_expression();
      } else if (jj_2_23(3)) {
        boolean_expression();
      } else if (jj_2_24(3)) {
        enum_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:
        case COALESCE:
        case NULLIF:{
          case_expression();
          break;
          }
        case KEY:
        case TREAT:
        case TYPE:
        case VALUE:
        case NAME:
        case INPUT_PARAMETER:{
          s = entity_type_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append("");
     sb.append(s);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//   nullif_expression::= NULLIF(scalar_expression, scalar_expression)
  final public void nullif_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(NULLIF);
sb.append(t.image);
    t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
    scalar_expression();
    t = jj_consume_token(COMMA);
sb.append(t.image);
    scalar_expression();
    t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
}

//   coalesce_expression ::= COALESCE(scalar_expression{, scalar_expression}+)
  final public void coalesce_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(COALESCE);
sb.append(t.image);
    t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
    scalar_expression();
    label_12:
    while (true) {
      t = jj_consume_token(COMMA);
sb.append(t.image);
      scalar_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_12;
      }
    }
    t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
}

//   simple_when_clause ::= WHEN scalar_expression THEN scalar_expression
  final public void simple_when_clause() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(WHEN);
sb.append(t.image);
    scalar_expression();
    t = jj_consume_token(THEN);
sb.append(t.image);
    scalar_expression();
}

// type_discriminator ::=
//        TYPE(general_identification_variable |
//          single_valued_object_path_expression |
//          input_parameter)
  final public String type_discriminator() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      t = jj_consume_token(TYPE);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      general_identification_variable();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case KEY:
    case TREAT:
    case VALUE:
    case NAME:{
      single_valued_object_path_expression();
{if ("" != null) return sb.toString();}
      break;
      }
    case INPUT_PARAMETER:{
      t = jj_consume_token(INPUT_PARAMETER);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//   case_operand ::= state_valued_path_expression | type_discriminator
  final public void case_operand() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_25(3)) {
      state_valued_path_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:
      case TREAT:
      case TYPE:
      case VALUE:
      case NAME:
      case INPUT_PARAMETER:{
        s = type_discriminator();
sb.append(s);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

//   simple_case_expression ::=
//      CASE case_operand simple_when_clause {simple_when_clause}*
//      ELSE scalar_expression
//      END
  final public void simple_case_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(CASE);
sb.append(t.image);
    case_operand();
    simple_when_clause();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_13;
      }
      simple_when_clause();
    }
    t = jj_consume_token(ELSE);
sb.append(t.image);
    scalar_expression();
    t = jj_consume_token(END);
sb.append(t.image);
}

//   when_clause ::= WHEN conditional_expression THEN scalar_expression
  final public void when_clause() throws ParseException {/*@bgen(jjtree) WhenClause */
  ASTWhenClause jjtn000 = new ASTWhenClause(JJTWHENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      jj_consume_token(WHEN);
      conditional_expression();
      jj_consume_token(THEN);
      scalar_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//   general_case_expression::= CASE when_clause {when_clause}* ELSE scalar_expression END
  final public void general_case_expression() throws ParseException {/*@bgen(jjtree) GeneralCaseExpression */
  ASTGeneralCaseExpression jjtn000 = new ASTGeneralCaseExpression(JJTGENERALCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      t = jj_consume_token(CASE);
sb.append(t.image);
      when_clause();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHEN:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_14;
        }
        when_clause();
      }
      t = jj_consume_token(ELSE);
sb.append(t.image);
      scalar_expression();
      t = jj_consume_token(END);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//   case_expression ::=
//      general_case_expression |
//      simple_case_expression |
//      coalesce_expression |
//      nullif_expression
  final public void case_expression() throws ParseException {/*@bgen(jjtree) CaseExpression */
  ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_26(2)) {
        general_case_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          simple_case_expression();
          break;
          }
        case COALESCE:{
          coalesce_expression();
          break;
          }
        case NULLIF:{
          nullif_expression();
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// entity_type_expression ::= type_discriminator | entity_type_literal | input_parameter
  final public String entity_type_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_27(2)) {
      s = type_discriminator();
sb.append(s);
{if ("" != null) return sb.toString();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case INPUT_PARAMETER:{
        t = jj_consume_token(INPUT_PARAMETER);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// simple_entity_expression ::= identification_variable | input_parameter
  final public String simple_entity_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME:{
      t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    case INPUT_PARAMETER:{
      t = jj_consume_token(INPUT_PARAMETER);
sb.append(" ");
      sb.append(t.image);
{if ("" != null) return sb.toString();}
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// entity_expression ::= single_valued_object_path_expression | simple_entity_expression
  final public String entity_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_28(2)) {
      single_valued_object_path_expression();
{if ("" != null) return sb.toString();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:
      case INPUT_PARAMETER:{
        s = simple_entity_expression();
sb.append(s);
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// enum_expression ::=
//    state_valued_path_expression |
//    enum_literal |
//    input_parameter |
//    case_expression |
//    (subquery)
  final public void enum_expression() throws ParseException {/*@bgen(jjtree) EnumExpression */
  ASTEnumExpression jjtn000 = new ASTEnumExpression(JJTENUMEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_29(2)) {
        state_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(t.image);
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(t.image);
          break;
          }
        case CASE:
        case COALESCE:
        case NULLIF:{
          case_expression();
          break;
          }
        case OPEN_BRACKET:{
          jj_consume_token(OPEN_BRACKET);
          subquery();
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// boolean_literal ::= <TRUE> | <FALSE>
  final public Boolean boolean_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return Boolean.TRUE;}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return Boolean.FALSE;}
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// boolean_expression ::=
//    state_valued_path_expression |
//    boolean_literal |
//    input_parameter |
//    case_expression |
//    function_invocation |
//    (subquery)
  final public  void boolean_expression() throws ParseException {/*@bgen(jjtree) BooleanExpression */
  ASTBooleanExpression jjtn000 = new ASTBooleanExpression(JJTBOOLEANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  Boolean booleanValue;
    try {
      if (jj_2_30(2)) {
        state_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case TRUE:{
          booleanValue = boolean_literal();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setBooleanValue(booleanValue);
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
          break;
          }
        case CASE:
        case COALESCE:
        case NULLIF:{
          case_expression();
          break;
          }
        case FUNCTION:{
          s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
          break;
          }
        case OPEN_BRACKET:{
          jj_consume_token(OPEN_BRACKET);
          subquery();
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// datetime_expression ::=
//    state_valued_path_expression |
//    input_parameter |
//    functions_returning_datetime |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    date_time_timestamp_literal |
//    (subquery)
  final public void datetime_expression() throws ParseException {/*@bgen(jjtree) DatetimeExpression */
  ASTDatetimeExpression jjtn000 = new ASTDatetimeExpression(JJTDATETIMEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  org.minijpa.jdbc.db.SqlFunction sqlFunction;
    try {
      if (jj_2_31(2)) {
        state_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
          break;
          }
        case CURRENT_DATE:
        case CURRENT_TIME:
        case CURRENT_TIMESTAMP:{
          sqlFunction = functions_returning_datetime();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setSqlFunction(sqlFunction);
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          if (jj_2_32(3)) {
            s = aggregate_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CASE:
            case COALESCE:
            case NULLIF:{
              case_expression();
              break;
              }
            case FUNCTION:{
              s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
              break;
              }
            case NAME:{
              t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(t.image);
              break;
              }
            case OPEN_BRACKET:{
              jj_consume_token(OPEN_BRACKET);
              subquery();
              jj_consume_token(CLOSE_BRACKET);
              break;
              }
            default:
              jj_la1[54] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// string_expression ::=
//    state_valued_path_expression |
//    string_literal |
//    input_parameter |
//    functions_returning_strings |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    (subquery)
  final public void string_expression() throws ParseException {/*@bgen(jjtree) StringExpression */
  ASTStringExpression jjtn000 = new ASTStringExpression(JJTSTRINGEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_33(3)) {
        state_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING_LITERAL:{
          t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setStringLiteral(t.image);
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
          break;
          }
        case CONCAT:
        case LOWER:
        case SUBSTRING:
        case TRIM:
        case UPPER:{
          s = functions_returning_strings();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          if (jj_2_34(3)) {
            s = aggregate_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CASE:
            case COALESCE:
            case NULLIF:{
              case_expression();
              break;
              }
            case FUNCTION:{
              s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
              break;
              }
            case OPEN_BRACKET:{
              jj_consume_token(OPEN_BRACKET);
              subquery();
              jj_consume_token(CLOSE_BRACKET);
              break;
              }
            default:
              jj_la1[56] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// arithmetic_primary ::=
//    state_valued_path_expression |
//    numeric_literal |
//    (arithmetic_expression) |
//    input_parameter |
//    functions_returning_numerics |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    (subquery)
  final public void arithmetic_primary() throws ParseException {/*@bgen(jjtree) ArithmeticPrimary */
  ASTArithmeticPrimary jjtn000 = new ASTArithmeticPrimary(JJTARITHMETICPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC_LITERAL:{
        t = jj_consume_token(NUMERIC_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setResult(t.image);
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        if (jj_2_35(3)) {
          state_valued_path_expression();
        } else if (jj_2_36(2)) {
          t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
          arithmetic_expression();
          t = jj_consume_token(CLOSE_BRACKET);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
            break;
            }
          case ABS:
          case INDEX:
          case LENGTH:
          case LOCATE:
          case MOD:
          case SIZE:
          case SQRT:{
            s = functions_returning_numerics();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
            break;
            }
          default:
            jj_la1[58] = jj_gen;
            if (jj_2_37(3)) {
              s = aggregate_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CASE:
              case COALESCE:
              case NULLIF:{
                case_expression();
                break;
                }
              case FUNCTION:{
                s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
                break;
                }
              case OPEN_BRACKET:{
                jj_consume_token(OPEN_BRACKET);
                subquery();
                jj_consume_token(CLOSE_BRACKET);
                break;
                }
              default:
                jj_la1[59] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// arithmetic_factor ::= [{+ | -}] arithmetic_primary
  final public void arithmetic_factor() throws ParseException {/*@bgen(jjtree) ArithmeticFactor */
  ASTArithmeticFactor jjtn000 = new ASTArithmeticFactor(JJTARITHMETICFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 91:
      case 92:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 91:{
          jj_consume_token(91);
jjtn000.setSign("+");
          break;
          }
        case 92:{
          jj_consume_token(92);
jjtn000.setSign("-");
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      arithmetic_primary();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// arithmetic_term ::= arithmetic_factor | arithmetic_term {* | /} arithmetic_factor
// LEFT RECURSION
// SOLVED AS:
// arithmetic_term ::= arithmetic_factor {{* | /} arithmetic_factor}*
  final public void arithmetic_term() throws ParseException {/*@bgen(jjtree) ArithmeticTerm */
  ASTArithmeticTerm jjtn000 = new ASTArithmeticTerm(JJTARITHMETICTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      arithmetic_factor();
      label_15:
      while (true) {
        if (jj_2_38(2)) {
          ;
        } else {
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 93:{
          jj_consume_token(93);
jjtn000.addSign("*");
          break;
          }
        case 94:{
          jj_consume_token(94);
jjtn000.addSign("/");
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        arithmetic_factor();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// arithmetic_expression ::= arithmetic_term | arithmetic_expression {+ | -} arithmetic_term
// LEFT RECURSION
// SOLVED AS:
// arithmetic_expression ::= arithmetic_term {{+ | -} arithmetic_term}*
  final public void arithmetic_expression() throws ParseException {/*@bgen(jjtree) ArithmeticExpression */
  ASTArithmeticExpression jjtn000 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      arithmetic_term();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 91:
        case 92:{
          ;
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 91:{
          jj_consume_token(91);
jjtn000.addSign("+");
          break;
          }
        case 92:{
          jj_consume_token(92);
jjtn000.addSign("-");
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        arithmetic_term();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// all_or_any_expression ::= {ALL | ANY | SOME} (subquery)
  final public void all_or_any_expression() throws ParseException {/*@bgen(jjtree) AllOrAnyExpression */
  ASTAllOrAnyExpression jjtn000 = new ASTAllOrAnyExpression(JJTALLORANYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALL:{
        t = jj_consume_token(ALL);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      case ANY:{
        t = jj_consume_token(ANY);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      case SOME:{
        t = jj_consume_token(SOME);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPEN_BRACKET);
      subquery();
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public String comparison_operator() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:{
      t = jj_consume_token(GT);
{if ("" != null) return t.image;}
      break;
      }
    case GE:{
      t = jj_consume_token(GE);
{if ("" != null) return t.image;}
      break;
      }
    case LT:{
      t = jj_consume_token(LT);
{if ("" != null) return t.image;}
      break;
      }
    case LE:{
      t = jj_consume_token(LE);
{if ("" != null) return t.image;}
      break;
      }
    case NE:{
      t = jj_consume_token(NE);
{if ("" != null) return t.image;}
      break;
      }
    case EQ:{
      t = jj_consume_token(EQ);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// string_expression_comparison ::= string_expression comparison_operator {string_expression | all_or_any_expression}
  final public void string_expression_comparison() throws ParseException {/*@bgen(jjtree) StringExpressionComparison */
  ASTStringExpressionComparison jjtn000 = new ASTStringExpressionComparison(JJTSTRINGEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
    try {
      string_expression();
      s = comparison_operator();
jjtn000.setComparisonOperator(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AVG:
      case CASE:
      case COALESCE:
      case CONCAT:
      case COUNT:
      case FUNCTION:
      case KEY:
      case LOWER:
      case MIN:
      case MAX:
      case NULLIF:
      case SUBSTRING:
      case SUM:
      case TREAT:
      case TRIM:
      case UPPER:
      case VALUE:
      case NAME:
      case OPEN_BRACKET:
      case STRING_LITERAL:
      case INPUT_PARAMETER:{
        string_expression();
        break;
        }
      case ALL:
      case ANY:
      case SOME:{
        all_or_any_expression();
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// arithmetic_expression_comparison ::= arithmetic_expression comparison_operator {arithmetic_expression | all_or_any_expression}
  final public void arithmetic_expression_comparison() throws ParseException {/*@bgen(jjtree) ArithmeticExpressionComparison */
  ASTArithmeticExpressionComparison jjtn000 = new ASTArithmeticExpressionComparison(JJTARITHMETICEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
    try {
      arithmetic_expression();
      s = comparison_operator();
jjtn000.setComparisonOperator(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABS:
      case AVG:
      case CASE:
      case COALESCE:
      case COUNT:
      case FUNCTION:
      case INDEX:
      case KEY:
      case LENGTH:
      case LOCATE:
      case MIN:
      case MAX:
      case MOD:
      case NULLIF:
      case SIZE:
      case SQRT:
      case SUM:
      case TREAT:
      case VALUE:
      case NAME:
      case OPEN_BRACKET:
      case NUMERIC_LITERAL:
      case INPUT_PARAMETER:
      case 91:
      case 92:{
        arithmetic_expression();
        break;
        }
      case ALL:
      case ANY:
      case SOME:{
        all_or_any_expression();
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// boolean_expression_comparison ::= boolean_expression {= | <>} {boolean_expression | all_or_any_expression}
  final public void boolean_expression_comparison() throws ParseException {/*@bgen(jjtree) BooleanExpressionComparison */
  ASTBooleanExpressionComparison jjtn000 = new ASTBooleanExpressionComparison(JJTBOOLEANEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
    try {
      boolean_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
jjtn000.setComparisonOperator("=");
        break;
        }
      case NE:{
        jj_consume_token(NE);
jjtn000.setComparisonOperator("<>");
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:
      case COALESCE:
      case FALSE:
      case FUNCTION:
      case KEY:
      case NULLIF:
      case TREAT:
      case TRUE:
      case VALUE:
      case NAME:
      case OPEN_BRACKET:
      case INPUT_PARAMETER:{
        boolean_expression();
        break;
        }
      case ALL:
      case ANY:
      case SOME:{
        all_or_any_expression();
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// datetime_expression_comparison ::= datetime_expression comparison_operator {datetime_expression | all_or_any_expression}
  final public void datetime_expression_comparison() throws ParseException {/*@bgen(jjtree) DatetimeExpressionComparison */
  ASTDatetimeExpressionComparison jjtn000 = new ASTDatetimeExpressionComparison(JJTDATETIMEEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
    try {
      datetime_expression();
      s = comparison_operator();
jjtn000.setComparisonOperator(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AVG:
      case CASE:
      case COALESCE:
      case COUNT:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case FUNCTION:
      case KEY:
      case MIN:
      case MAX:
      case NULLIF:
      case SUM:
      case TREAT:
      case VALUE:
      case NAME:
      case OPEN_BRACKET:
      case INPUT_PARAMETER:{
        datetime_expression();
        break;
        }
      case ALL:
      case ANY:
      case SOME:{
        all_or_any_expression();
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// comparison_expression ::=
//    string_expression_comparison |
//    arithmetic_expression_comparison |
//    boolean_expression_comparison |
//    datetime_expression_comparison |
//    enum_expression {= | <>} {enum_expression | all_or_any_expression} |
//    entity_expression {= | <>} {entity_expression | all_or_any_expression} |
//    entity_type_expression {= | <>} entity_type_expression
  final public void comparison_expression() throws ParseException {/*@bgen(jjtree) ComparisonExpression */
  ASTComparisonExpression jjtn000 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_39(2147483647)) {
        string_expression_comparison();
      } else if (jj_2_40(2147483647)) {
        arithmetic_expression_comparison();
      } else if (jj_2_41(2147483647)) {
        boolean_expression_comparison();
      } else if (jj_2_42(2147483647)) {
        datetime_expression_comparison();
      } else if (jj_2_43(3)) {
        enum_expression();
        s = comparison_operator();
jjtn000.setComparisonOperator(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:
        case COALESCE:
        case KEY:
        case NULLIF:
        case TREAT:
        case VALUE:
        case NAME:
        case OPEN_BRACKET:
        case INPUT_PARAMETER:{
          enum_expression();
          break;
          }
        case ALL:
        case ANY:
        case SOME:{
          all_or_any_expression();
          break;
          }
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_44(3)) {
        s = entity_expression();
sb.append(" ");
      sb.append(s);
        s = comparison_operator();
jjtn000.setComparisonOperator(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case TREAT:
        case VALUE:
        case NAME:
        case INPUT_PARAMETER:{
          s = entity_expression();
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
sb.append(" ");
       sb.append(s);
          break;
          }
        case ALL:
        case ANY:
        case SOME:{
          all_or_any_expression();
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case TREAT:
        case TYPE:
        case VALUE:
        case NAME:
        case INPUT_PARAMETER:{
          s = entity_type_expression();
sb.append(" ");
      sb.append(s);
          s = comparison_operator();
jjtn000.setComparisonOperator(s);
          s = entity_type_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// exists_expression ::= [NOT] EXISTS (subquery)
  final public void exists_expression() throws ParseException {/*@bgen(jjtree) ExistsExpression */
  ASTExistsExpression jjtn000 = new ASTExistsExpression(JJTEXISTSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      t = jj_consume_token(EXISTS);
sb.append(" ");
      sb.append(t.image);
      jj_consume_token(OPEN_BRACKET);
      subquery();
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// entity_or_value_expression ::=
//    single_valued_object_path_expression |
//    state_field_path_expression |
//    simple_entity_or_value_expression
//
// simple_entity_or_value_expression ::=
//    identification_variable |
//    input_parameter |
//    literal
  final public String entity_or_value_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_45(3)) {
      single_valued_object_path_expression();
{if ("" != null) return sb.toString();}
    } else if (jj_2_46(2)) {
      state_field_path_expression();
{if ("" != null) return sb.toString();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
sb.append(" ");
      sb.append(t.image);
      {if ("" != null) return sb.toString();}
        break;
        }
      case INPUT_PARAMETER:{
        t = jj_consume_token(INPUT_PARAMETER);
sb.append(" ");
      sb.append(t.image);
      {if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// collection_valued_path_expression ::= general_subpath.{collection_valued_field}
  final public void collection_valued_path_expression() throws ParseException {/*@bgen(jjtree) CollectionValuedPathExpression */
  ASTCollectionValuedPathExpression jjtn000 = new ASTCollectionValuedPathExpression(JJTCOLLECTIONVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      general_subpath();
      jj_consume_token(DOT);
      t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setCollectionValuedField(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//  collection_member_expression ::= entity_or_value_expression [NOT] MEMBER [OF] collection_valued_path_expression
  final public String collection_member_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    s = entity_or_value_expression();
sb.append(" ");
      sb.append(s);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    t = jj_consume_token(MEMBER);
sb.append(" ");
      sb.append(t.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OF:{
      t = jj_consume_token(OF);
sb.append(" ");
      sb.append(t.image);
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    collection_valued_path_expression();
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// empty_collection_comparison_expression ::= collection_valued_path_expression IS [NOT] EMPTY
  final public String empty_collection_comparison_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    collection_valued_path_expression();
    t = jj_consume_token(IS);
sb.append(" ");
      sb.append(t.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    t = jj_consume_token(EMPTY);
sb.append(" ");
      sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// null_comparison_expression ::= {single_valued_path_expression | input_parameter} IS [NOT] NULL
  final public void null_comparison_expression() throws ParseException {/*@bgen(jjtree) NullComparisonExpression */
  ASTNullComparisonExpression jjtn000 = new ASTNullComparisonExpression(JJTNULLCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY:
      case KEY:
      case TREAT:
      case VALUE:
      case NAME:{
        single_valued_path_expression();
        break;
        }
      case INPUT_PARAMETER:{
        t = jj_consume_token(INPUT_PARAMETER);
jjtn000.setInputParameter(t.image);
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
jjtn000.setNot(true);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      jj_consume_token(NULL);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// like_expression ::= string_expression [NOT] LIKE pattern_value [ESCAPE escape_character]
  final public void like_expression() throws ParseException {/*@bgen(jjtree) LikeExpression */
  ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      string_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
jjtn000.setNot(true);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(LIKE);
      t = jj_consume_token(STRING_LITERAL);
jjtn000.setPatternValue(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCAPE:{
        jj_consume_token(ESCAPE);
        t = jj_consume_token(STRING_LITERAL);
sb.append(" ");
       sb.append(t.image);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// in_item ::= literal | single_valued_input_parameter
  final public void in_item() throws ParseException {/*@bgen(jjtree) InItem */
  ASTInItem jjtn000 = new ASTInItem(JJTINITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setLiteral(t.image);
        break;
        }
      case INPUT_PARAMETER:{
        t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setInputParameter(t.image);
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// in_expression ::= {state_valued_path_expression | type_discriminator} [NOT] IN
//        {(in_item{, in_item}*) | (subquery) | collection_valued_input_parameter}
  final public void in_expression() throws ParseException {/*@bgen(jjtree) InExpression */
  ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_47(3)) {
        state_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case TREAT:
        case TYPE:
        case VALUE:
        case NAME:
        case INPUT_PARAMETER:{
          s = type_discriminator();
sb.append(" ");
      sb.append(s);
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
jjtn000.setNot(true);
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      jj_consume_token(IN);
      if (jj_2_48(2)) {
        in_item();
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[87] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          in_item();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_BRACKET:{
          jj_consume_token(OPEN_BRACKET);
          subquery();
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
sb.append(t.image);
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// between_expression ::=
//    arithmetic_expression [NOT] BETWEEN arithmetic_expression AND arithmetic_expression |
//    string_expression [NOT] BETWEEN string_expression AND string_expression |
//    datetime_expression [NOT] BETWEEN datetime_expression AND datetime_expression
  final public String between_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_49(2147483647)) {
      arithmetic_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      t = jj_consume_token(BETWEEN);
sb.append(" ");
      sb.append(t.image);
      arithmetic_expression();
      t = jj_consume_token(AND);
sb.append(" ");
      sb.append(t.image);
      arithmetic_expression();
{if ("" != null) return sb.toString();}
    } else if (jj_2_50(2147483647)) {
      string_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      t = jj_consume_token(BETWEEN);
sb.append(" ");
      sb.append(t.image);
      string_expression();
      t = jj_consume_token(AND);
sb.append(" ");
      sb.append(t.image);
      string_expression();
{if ("" != null) return sb.toString();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AVG:
      case CASE:
      case COALESCE:
      case COUNT:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case FUNCTION:
      case KEY:
      case MIN:
      case MAX:
      case NULLIF:
      case SUM:
      case TREAT:
      case VALUE:
      case NAME:
      case OPEN_BRACKET:
      case INPUT_PARAMETER:{
        datetime_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        t = jj_consume_token(BETWEEN);
sb.append(" ");
      sb.append(t.image);
        datetime_expression();
        t = jj_consume_token(AND);
sb.append(" ");
      sb.append(t.image);
        datetime_expression();
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// simple_cond_expression ::=
//    comparison_expression |
//    between_expression |
//      in_expression |
//    like_expression |
//    null_comparison_expression |
//    empty_collection_comparison_expression |
//    collection_member_expression |
//    exists_expression
  final public void simple_cond_expression() throws ParseException {/*@bgen(jjtree) SimpleCondExpression */
  ASTSimpleCondExpression jjtn000 = new ASTSimpleCondExpression(JJTSIMPLECONDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_51(3)) {
        comparison_expression();
      } else if (jj_2_52(3)) {
        s = between_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
      } else if (jj_2_53(3)) {
        in_expression();
      } else if (jj_2_54(3)) {
        like_expression();
      } else if (jj_2_55(3)) {
        null_comparison_expression();
      } else if (jj_2_56(3)) {
        s = empty_collection_comparison_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case TREAT:
        case VALUE:
        case NAME:
        case INPUT_PARAMETER:{
          s = collection_member_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
          break;
          }
        case EXISTS:
        case NOT:{
          exists_expression();
          break;
          }
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// conditional_primary ::= simple_cond_expression | (conditional_expression)
  final public void conditional_primary() throws ParseException {/*@bgen(jjtree) ConditionalPrimary */
  ASTConditionalPrimary jjtn000 = new ASTConditionalPrimary(JJTCONDITIONALPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
    try {
      if (jj_2_57(3)) {
        simple_cond_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_BRACKET:{
          jj_consume_token(OPEN_BRACKET);
          conditional_expression();
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// conditional_factor ::= [NOT] conditional_primary
  final public void conditional_factor() throws ParseException {/*@bgen(jjtree) ConditionalFactor */
  ASTConditionalFactor jjtn000 = new ASTConditionalFactor(JJTCONDITIONALFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_58(2)) {
        jj_consume_token(NOT);
jjtn000.setNot(true);
      } else {
        ;
      }
      conditional_primary();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

// conditional_term ::= conditional_factor | conditional_term AND conditional_factor
// LEFT RECURSION
// SOLVED AS:
// conditional_term ::= conditional_factor {AND conditional_factor}*
  final public void conditional_term() throws ParseException {/*@bgen(jjtree) ConditionalTerm */
  ASTConditionalTerm jjtn000 = new ASTConditionalTerm(JJTCONDITIONALTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      conditional_factor();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[95] = jj_gen;
          break label_18;
        }
        jj_consume_token(AND);
        conditional_factor();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// conditional_expression ::= conditional_term | conditional_expression OR conditional_term
// LEFT RECURSION
// SOLVED AS:
// conditional_expression ::= conditional_term {OR conditional_term}*
  final public void conditional_expression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      conditional_term();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[96] = jj_gen;
          break label_19;
        }
        jj_consume_token(OR);
        conditional_term();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// where_clause ::= WHERE conditional_expression
  final public void where_clause() throws ParseException {/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHERE);
      conditional_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//   single_valued_path_expression ::=
//      qualified_identification_variable |
//      TREAT(qualified_identification_variable AS subtype) |
//      state_field_path_expression |
//      single_valued_object_path_expression
//
//  MODIFIED as: ('state_field_path_expression' and 'single_valued_object_path_expression' could be the same)
//
//   single_valued_path_expression ::=
//      qualified_identification_variable |
//      TREAT(qualified_identification_variable AS subtype) |
//      state_field_path_expression |
  final public void single_valued_path_expression() throws ParseException {/*@bgen(jjtree) SingleValuedPathExpression */
  ASTSingleValuedPathExpression jjtn000 = new ASTSingleValuedPathExpression(JJTSINGLEVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_59(3)) {
        state_field_path_expression();
      } else if (jj_2_60(3)) {
        jj_consume_token(TREAT);
        jj_consume_token(OPEN_BRACKET);
        qualified_identification_variable();
        jj_consume_token(AS);
        s = subtype();
jjtn000.setSubtype(s);
        jj_consume_token(CLOSE_BRACKET);
      } else if (jj_2_61(3)) {
        qualified_identification_variable();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// simple_select_expression::=
//    single_valued_path_expression |
//    scalar_expression |
//    aggregate_expression |
//    identification_variable
  final public void simple_select_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_62(3)) {
      single_valued_path_expression();
    } else if (jj_2_63(3)) {
      scalar_expression();
    } else if (jj_2_64(2)) {
      s = aggregate_expression();
sb.append(" ");
      sb.append(s);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
sb.append(t.image);
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// simple_select_clause ::= SELECT [DISTINCT] simple_select_expression
  final public void simple_select_clause() throws ParseException {/*@bgen(jjtree) SimpleSelectClause */
  ASTSimpleSelectClause jjtn000 = new ASTSimpleSelectClause(JJTSIMPLESELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISTINCT:{
        jj_consume_token(DISTINCT);
jjtn000.setDistinct(true);
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      simple_select_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// derived_collection_member_declaration ::= IN
//     superquery_identification_variable.{single_valued_object_field.}*collection_valued_field
  final public String derived_collection_member_declaration() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(IN);
sb.append(" ");
      sb.append(t.image);
    t = jj_consume_token(NAME);
sb.append(" ");
      sb.append(t.image);
    t = jj_consume_token(DOT);
sb.append(t.image);
    label_20:
    while (true) {
      if (jj_2_65(2)) {
        ;
      } else {
        break label_20;
      }
      t = jj_consume_token(NAME);
sb.append(" ");
      sb.append(t.image);
      t = jj_consume_token(DOT);
sb.append(t.image);
    }
    t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// treated_derived_path ::= TREAT(general_derived_path AS subtype)
  final public String treated_derived_path() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(TREAT);
sb.append(t.image);
    t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
    s = general_derived_path();
sb.append(s);
    t = jj_consume_token(AS);
sb.append(" ");
     sb.append(t.image);
    s = subtype();
sb.append(" ");
      sb.append(s);
    t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// simple_derived_path ::= superquery_identification_variable{.single_valued_object_field}*
  final public String simple_derived_path() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(NAME);
sb.append(" ");
     sb.append(t.image);
    label_21:
    while (true) {
      if (jj_2_66(2)) {
        ;
      } else {
        break label_21;
      }
      t = jj_consume_token(DOT);
sb.append(t.image);
      t = jj_consume_token(NAME);
sb.append(t.image);
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// general_derived_path ::= simple_derived_path | treated_derived_path{.single_valued_object_field}*
  final public String general_derived_path() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME:{
      s = simple_derived_path();
sb.append(" ");
      sb.append(s);
      {if ("" != null) return sb.toString();}
      break;
      }
    case TREAT:{
      s = treated_derived_path();
sb.append(" ");
      sb.append(s);
      label_22:
      while (true) {
        if (jj_2_67(2)) {
          ;
        } else {
          break label_22;
        }
        t = jj_consume_token(DOT);
sb.append(t.image);
        t = jj_consume_token(NAME);
sb.append(t.image);
      }
{if ("" != null) return sb.toString();}
      break;
      }
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// derived_path_expression ::=
//    general_derived_path.single_valued_object_field |
//    general_derived_path.collection_valued_field
  final public String derived_path_expression() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    s = general_derived_path();
sb.append(" ");
      sb.append(s);
    t = jj_consume_token(DOT);
sb.append(t.image);
    t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// subselect_identification_variable_declaration ::=
//    identification_variable_declaration |
//    derived_path_expression [AS] identification_variable {join}* |
//    derived_collection_member_declaration
  final public void subselect_identification_variable_declaration() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_68(2)) {
      identification_variable_declaration();
sb.append(" ");
//      sb.append(s);
//      return sb.toString();

    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TREAT:
      case NAME:{
        s = derived_path_expression();
sb.append(" ");
      sb.append(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          t = jj_consume_token(AS);
sb.append(" ");
      sb.append(t.image);
          break;
          }
        default:
          jj_la1[100] = jj_gen;
          ;
        }
        t = jj_consume_token(NAME);
sb.append(" ");
      sb.append(t.image);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INNER:
          case JOIN:
          case LEFT:{
            ;
            break;
            }
          default:
            jj_la1[101] = jj_gen;
            break label_23;
          }
          join();
        }
        break;
        }
      case IN:{
        s = derived_collection_member_declaration();
sb.append(" ");
      sb.append(s);
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// subquery_from_clause ::=
//    FROM subselect_identification_variable_declaration {, subselect_identification_variable_declaration |
//           collection_member_declaration}*
  final public String subquery_from_clause() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(FROM);
sb.append(" ");
      sb.append(t.image);
    subselect_identification_variable_declaration();
sb.append(" ");
//      sb.append(s);

    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        break label_24;
      }
      t = jj_consume_token(COMMA);
sb.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:
      case IN:
      case TREAT:
      case NAME:{
        if (jj_2_69(2)) {
          subselect_identification_variable_declaration();
sb.append(" ");
//      sb.append(s);

        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:{
            collection_member_declaration();
            break;
            }
          default:
            jj_la1[104] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        ;
      }
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

//   collection_member_declaration ::=
//      IN (collection_valued_path_expression) [AS] identification_variable
  final public void collection_member_declaration() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    jj_consume_token(IN);
    jj_consume_token(OPEN_BRACKET);
    collection_valued_path_expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    t = jj_consume_token(NAME);
sb.append(" ");
     sb.append(t.image);
    jj_consume_token(CLOSE_BRACKET);
}

// subquery ::= simple_select_clause subquery_from_clause [where_clause]
//    [groupby_clause] [having_clause]
  final public void subquery() throws ParseException {/*@bgen(jjtree) Subquery */
  ASTSubquery jjtn000 = new ASTSubquery(JJTSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      simple_select_clause();
      s = subquery_from_clause();
sb.append(" ");
      sb.append(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        where_clause();
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GROUP:{
        groupby_clause();
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HAVING:{
        having_clause();
        break;
        }
      default:
        jj_la1[109] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// orderby_item ::=
//    state_field_path_expression |
//    general_identification_variable |
//    result_variable
//    [ASC | DESC]
  final public String orderby_item() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    if (jj_2_70(3)) {
      state_field_path_expression();
{if ("" != null) return sb.toString();}
    } else if (jj_2_71(2)) {
      general_identification_variable();
{if ("" != null) return "";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
sb.append(" ");
      sb.append(t.image);
      {if ("" != null) return sb.toString();}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASC:
        case DESC:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASC:{
            t = jj_consume_token(ASC);
sb.append(" ");
       sb.append(t.image);
            break;
            }
          case DESC:{
            t = jj_consume_token(DESC);
sb.append(" ");
       sb.append(t.image);
            break;
            }
          default:
            jj_la1[110] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          ;
        }
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// orderby_clause ::= ORDER BY orderby_item {, orderby_item}*
  final public String orderby_clause() throws ParseException {Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    t = jj_consume_token(ORDER);
sb.append(" ");
      sb.append(t.image);
    t = jj_consume_token(BY);
sb.append(" ");
      sb.append(t.image);
    s = orderby_item();
sb.append(" ");
      sb.append(s);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[113] = jj_gen;
        break label_25;
      }
      t = jj_consume_token(COMMA);
sb.append(t.image);
      s = orderby_item();
sb.append("");
      sb.append(s);
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

// having_clause ::= HAVING conditional_expression
  final public void having_clause() throws ParseException {/*@bgen(jjtree) HavingClause */
  ASTHavingClause jjtn000 = new ASTHavingClause(JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      jj_consume_token(HAVING);
      conditional_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// groupby_item ::= single_valued_path_expression | identification_variable
  final public void groupby_item() throws ParseException {/*@bgen(jjtree) GroupbyItem */
  ASTGroupbyItem jjtn000 = new ASTGroupbyItem(JJTGROUPBYITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      if (jj_2_72(2)) {
        single_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
          break;
          }
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// groupby_clause ::= GROUP BY groupby_item {, groupby_item}*
  final public void groupby_clause() throws ParseException {/*@bgen(jjtree) GroupbyClause */
  ASTGroupbyClause jjtn000 = new ASTGroupbyClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
    try {
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      groupby_item();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[115] = jj_gen;
          break label_26;
        }
        jj_consume_token(COMMA);
        groupby_item();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_65()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_66()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_67()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_68()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_69()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_70()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_71()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_72()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3064_3_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3R_subselect_identification_variable_declaration_3073_3_161()) {
    jj_scanpos = xsp;
    if (jj_3R_subselect_identification_variable_declaration_3100_3_162()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_identification_variable_declaration_609_4_71()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_when_clause_1524_3_112()
 {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_conditional_expression_2767_3_274()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_general_subpath_754_4_176()
 {
    if (jj_3R_treated_subpath_774_3_215()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_general_subpath_752_4_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_general_subpath_752_4_175()) {
    jj_scanpos = xsp;
    if (jj_3R_general_subpath_754_4_176()) return true;
    }
    return false;
  }

  private boolean jj_3R_general_subpath_752_4_175()
 {
    if (jj_3R_simple_subpath_729_2_214()) return true;
    return false;
  }

  private boolean jj_3R_exists_expression_2283_3_238()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_exists_expression_2282_3_200()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_exists_expression_2283_3_238()) jj_scanpos = xsp;
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_simple_case_expression_1502_4_270()
 {
    if (jj_3R_simple_when_clause_1414_3_267()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_derived_path_expression_3036_3_202()
 {
    if (jj_3R_general_derived_path_2998_3_240()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_simple_subpath_732_2_245()
 {
    if (jj_3R_general_identification_variable_709_2_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_general_identification_variable_709_2_35()) return true;
    return false;
  }

  private boolean jj_3R_simple_subpath_729_2_214()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_subpath_732_2_245()) return true;
    }
    return false;
  }

  private boolean jj_3R_simple_case_expression_1495_3_241()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_case_operand_1474_3_266()) return true;
    if (jj_3R_simple_when_clause_1414_3_267()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_simple_case_expression_1502_4_270()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2257_3_142()
 {
    if (jj_3R_entity_type_expression_1593_3_164()) return true;
    if (jj_3R_comparison_operator_2075_3_55()) return true;
    if (jj_3R_entity_type_expression_1593_3_164()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2254_4_60()
 {
    if (jj_3R_all_or_any_expression_2045_3_134()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2248_4_59()
 {
    if (jj_3R_entity_expression_1648_3_58()) return true;
    return false;
  }

  private boolean jj_3R_general_identification_variable_714_2_83()
 {
    if (jj_3R_map_field_identification_variable_649_2_174()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_case_operand_1477_3_279()
 {
    if (jj_3R_type_discriminator_1438_3_46()) return true;
    return false;
  }

  private boolean jj_3R_general_identification_variable_709_2_82()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_general_identification_variable_709_2_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_general_identification_variable_709_2_82()) {
    jj_scanpos = xsp;
    if (jj_3R_general_identification_variable_714_2_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_case_operand_1474_3_266()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_case_operand_1477_3_279()) return true;
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_general_derived_path_3006_3_265()
 {
    if (jj_3R_treated_derived_path_2932_3_278()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_entity_expression_1648_3_58()) return true;
    if (jj_3R_comparison_operator_2075_3_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparison_expression_2248_4_59()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2254_4_60()) return true;
    }
    return false;
  }

  private boolean jj_3R_comparison_expression_2234_4_57()
 {
    if (jj_3R_all_or_any_expression_2045_3_134()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2232_4_56()
 {
    if (jj_3R_enum_expression_1674_3_44()) return true;
    return false;
  }

  private boolean jj_3R_general_derived_path_2998_3_264()
 {
    if (jj_3R_simple_derived_path_2970_3_277()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_datetime_expression_comparison_2181_3_54()) return true;
    return false;
  }

  private boolean jj_3R_general_derived_path_2998_3_240()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_general_derived_path_2998_3_264()) {
    jj_scanpos = xsp;
    if (jj_3R_general_derived_path_3006_3_265()) return true;
    }
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_boolean_expression_comparison_2154_3_53()) return true;
    return false;
  }

  private boolean jj_3R_qualified_identification_variable_692_2_158()
 {
    if (jj_scan_token(ENTRY)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_type_discriminator_1458_3_115()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_enum_expression_1674_3_44()) return true;
    if (jj_3R_comparison_operator_2075_3_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparison_expression_2232_4_56()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2234_4_57()) return true;
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_arithmetic_expression_comparison_2134_3_52()) return true;
    return false;
  }

  private boolean jj_3R_type_discriminator_1454_3_114()
 {
    if (jj_3R_single_valued_object_path_expression_1135_3_47()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2221_3_141()
 {
    if (jj_3R_datetime_expression_comparison_2181_3_54()) return true;
    return false;
  }

  private boolean jj_3R_qualified_identification_variable_687_2_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_qualified_identification_variable_687_2_157()) {
    jj_scanpos = xsp;
    if (jj_3R_qualified_identification_variable_692_2_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_qualified_identification_variable_687_2_157()
 {
    if (jj_3R_map_field_identification_variable_649_2_174()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_string_expression_comparison_2114_3_51()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2217_3_140()
 {
    if (jj_3R_boolean_expression_comparison_2154_3_53()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2213_3_139()
 {
    if (jj_3R_arithmetic_expression_comparison_2134_3_52()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2209_3_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparison_expression_2209_3_138()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2213_3_139()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2217_3_140()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2221_3_141()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2257_3_142()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_comparison_expression_2209_3_138()
 {
    if (jj_3R_string_expression_comparison_2114_3_51()) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_type_discriminator_1438_3_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_type_discriminator_1438_3_113()) {
    jj_scanpos = xsp;
    if (jj_3R_type_discriminator_1454_3_114()) {
    jj_scanpos = xsp;
    if (jj_3R_type_discriminator_1458_3_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_type_discriminator_1438_3_113()
 {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_general_identification_variable_709_2_35()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_simple_derived_path_2970_3_277()
 {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_map_field_identification_variable_662_2_213()
 {
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_comparison_2189_4_127()
 {
    if (jj_3R_all_or_any_expression_2045_3_134()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_comparison_2187_4_126()
 {
    if (jj_3R_datetime_expression_1782_3_41()) return true;
    return false;
  }

  private boolean jj_3R_map_field_identification_variable_649_2_174()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_map_field_identification_variable_649_2_212()) {
    jj_scanpos = xsp;
    if (jj_3R_map_field_identification_variable_662_2_213()) return true;
    }
    return false;
  }

  private boolean jj_3R_map_field_identification_variable_649_2_212()
 {
    if (jj_scan_token(KEY)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_simple_when_clause_1414_3_267()
 {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_comparison_2181_3_54()
 {
    if (jj_3R_datetime_expression_1782_3_41()) return true;
    if (jj_3R_comparison_operator_2075_3_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_datetime_expression_comparison_2187_4_126()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_comparison_2189_4_127()) return true;
    }
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2169_4_125()
 {
    if (jj_3R_all_or_any_expression_2045_3_134()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2167_4_124()
 {
    if (jj_3R_boolean_expression_1733_3_43()) return true;
    return false;
  }

  private boolean jj_3R_treated_derived_path_2932_3_278()
 {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_general_derived_path_2998_3_240()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_subtype_464_3_289()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2161_4_123()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_coalesce_expression_1393_3_271()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2156_4_122()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2154_3_53()
 {
    if (jj_3R_boolean_expression_1733_3_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_boolean_expression_comparison_2156_4_122()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_comparison_2161_4_123()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_boolean_expression_comparison_2167_4_124()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_comparison_2169_4_125()) return true;
    }
    return false;
  }

  private boolean jj_3R_coalesce_expression_1383_3_242()
 {
    if (jj_scan_token(COALESCE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    Token xsp;
    if (jj_3R_coalesce_expression_1393_3_271()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_coalesce_expression_1393_3_271()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_identification_variable_declaration_614_5_201()
 {
    if (jj_3R_fetch_join_553_3_239()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_join_531_3_34()) return true;
    return false;
  }

  private boolean jj_3R_identification_variable_declaration_611_5_160()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_identification_variable_declaration_614_5_201()) return true;
    }
    return false;
  }

  private boolean jj_3R_identification_variable_declaration_609_4_71()
 {
    if (jj_3R_range_variable_declaration_589_3_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_identification_variable_declaration_611_5_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_arithmetic_expression_comparison_2142_4_121()
 {
    if (jj_3R_all_or_any_expression_2045_3_134()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_comparison_2140_4_120()
 {
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_comparison_2134_3_52()
 {
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_3R_comparison_operator_2075_3_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_expression_comparison_2140_4_120()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_expression_comparison_2142_4_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_range_variable_declaration_589_3_159()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_comparison_2122_4_119()
 {
    if (jj_3R_all_or_any_expression_2045_3_134()) return true;
    return false;
  }

  private boolean jj_3R_derived_collection_member_declaration_2890_3_203()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_65()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_nullif_expression_1354_3_243()
 {
    if (jj_scan_token(NULLIF)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_comparison_2120_4_118()
 {
    if (jj_3R_string_expression_1845_3_40()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_comparison_2114_3_51()
 {
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_3R_comparison_operator_2075_3_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_string_expression_comparison_2120_4_118()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_comparison_2122_4_119()) return true;
    }
    return false;
  }

  private boolean jj_3R_simple_select_clause_2872_4_246()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_scalar_expression_1338_3_74()
 {
    if (jj_3R_entity_type_expression_1593_3_164()) return true;
    return false;
  }

  private boolean jj_3R_simple_select_clause_2870_3_221()
 {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_select_clause_2872_4_246()) jj_scanpos = xsp;
    if (jj_3R_simple_select_expression_2840_3_247()) return true;
    return false;
  }

  private boolean jj_3R_scalar_expression_1335_3_73()
 {
    if (jj_3R_case_expression_1571_3_163()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2100_3_133()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_enum_expression_1674_3_44()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2095_3_132()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_boolean_expression_1733_3_43()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2090_3_131()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_simple_select_expression_2855_3_268()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_fetch_join_553_3_239()
 {
    if (jj_3R_join_spec_333_3_80()) return true;
    if (jj_scan_token(FETCH)) return true;
    if (jj_3R_join_association_path_expression_487_3_81()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_datetime_expression_1782_3_41()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2085_3_130()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_scalar_expression_1315_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_scalar_expression_1335_3_73()) {
    jj_scanpos = xsp;
    if (jj_3R_scalar_expression_1338_3_74()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_string_expression_1845_3_40()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2080_3_129()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_aggregate_expression_1157_3_31()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2075_3_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparison_operator_2075_3_128()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2080_3_129()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2085_3_130()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2090_3_131()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2095_3_132()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2100_3_133()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_comparison_operator_2075_3_128()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_simple_select_expression_2840_3_247()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_select_expression_2855_3_268()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_single_valued_path_expression_2804_3_29()) return true;
    return false;
  }

  private boolean jj_3R_join_531_3_34()
 {
    if (jj_3R_join_spec_333_3_80()) return true;
    if (jj_3R_join_association_path_expression_487_3_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_function_arg_1296_3_272()
 {
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2058_3_194()
 {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_3R_qualified_identification_variable_687_2_70()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2052_3_193()
 {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2046_3_192()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_function_arg_1278_3_257()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_function_arg_1296_3_272()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2045_3_134()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_all_or_any_expression_2046_3_192()) {
    jj_scanpos = xsp;
    if (jj_3R_all_or_any_expression_2052_3_193()) {
    jj_scanpos = xsp;
    if (jj_3R_all_or_any_expression_2058_3_194()) return true;
    }
    }
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_qualified_identification_variable_687_2_70()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_subtype_464_3_289()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_single_valued_path_expression_2804_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_state_field_path_expression_792_2_36()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2027_4_181()
 {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_join_association_path_expression_493_3_173()
 {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_join_single_valued_path_expression_386_3_211()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_subtype_464_3_289()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2022_4_180()
 {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2021_4_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_expression_2022_4_180()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_expression_2027_4_181()) return true;
    }
    if (jj_3R_arithmetic_term_1991_3_101()) return true;
    return false;
  }

  private boolean jj_3R_join_association_path_expression_487_3_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_association_path_expression_487_3_172()) {
    jj_scanpos = xsp;
    if (jj_3R_join_association_path_expression_493_3_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_join_association_path_expression_487_3_172()
 {
    if (jj_3R_join_single_valued_path_expression_386_3_211()) return true;
    return false;
  }

  private boolean jj_3R_function_invocation_1252_4_230()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_function_arg_1278_3_257()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2019_3_42()
 {
    if (jj_3R_arithmetic_term_1991_3_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arithmetic_expression_2021_4_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_where_clause_2780_3_259()
 {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_conditional_expression_2767_3_274()) return true;
    return false;
  }

  private boolean jj_3R_function_invocation_1239_3_170()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_function_invocation_1252_4_230()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_conditional_expression_2769_4_284()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_conditional_term_2748_3_283()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_term_2001_4_49()
 {
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_conditional_expression_2767_3_274()
 {
    if (jj_3R_conditional_term_2748_3_283()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_conditional_expression_2769_4_284()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_subtype_464_3_289()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_term_1996_4_48()
 {
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_term_1996_4_48()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_term_2001_4_49()) return true;
    }
    if (jj_3R_arithmetic_factor_1965_2_50()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_term_1991_3_101()
 {
    if (jj_3R_arithmetic_factor_1965_2_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_aggregate_expression_1222_3_78()
 {
    if (jj_3R_function_invocation_1239_3_170()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1220_3_77()
 {
    if (jj_3R_single_valued_object_path_expression_1135_3_47()) return true;
    return false;
  }

  private boolean jj_3R_conditional_term_2750_4_288()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_conditional_factor_2726_2_287()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_conditional_term_2748_3_283()
 {
    if (jj_3R_conditional_factor_2726_2_287()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_conditional_term_2750_4_288()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_arithmetic_factor_1971_3_185()
 {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1198_4_183()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_factor_1966_3_116()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_factor_1966_3_184()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_factor_1971_3_185()) return true;
    }
    return false;
  }

  private boolean jj_3R_arithmetic_factor_1966_3_184()
 {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_factor_1965_2_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_factor_1966_3_116()) jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1902_3_117()) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_conditional_factor_2726_2_287()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    if (jj_3R_conditional_primary_2709_3_290()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1189_5_76()
 {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1198_4_183()) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1954_3_191()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1179_4_169()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1947_3_190()
 {
    if (jj_3R_function_invocation_1239_3_170()) return true;
    return false;
  }

  private boolean jj_3R_conditional_primary_2712_4_291()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_conditional_expression_2767_3_274()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1944_3_189()
 {
    if (jj_3R_case_expression_1571_3_163()) return true;
    return false;
  }

  private boolean jj_3R_conditional_primary_2709_3_290()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_conditional_primary_2712_4_291()) return true;
    }
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_3R_simple_cond_expression_2660_3_69()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1173_4_168()
 {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1168_4_167()
 {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_aggregate_expression_1157_3_31()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1163_4_166()
 {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2698_3_156()
 {
    if (jj_3R_exists_expression_2282_3_200()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_single_valued_embeddable_object_field_359_3_33()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1929_3_188()
 {
    if (jj_3R_functions_returning_numerics_997_3_227()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1158_4_165()
 {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1157_3_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1158_4_165()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1163_4_166()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1168_4_167()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1173_4_168()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1179_4_169()) jj_scanpos = xsp;
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1157_3_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1157_3_75()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1189_5_76()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1220_3_77()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1222_3_78()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2691_3_155()
 {
    if (jj_3R_collection_member_expression_2374_3_199()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1923_3_187()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_join_single_valued_path_expression_386_3_211()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_empty_collection_comparison_expression_2411_3_68()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_null_comparison_expression_2441_2_67()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_like_expression_2468_3_66()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_in_expression_2521_3_65()) return true;
    return false;
  }

  private boolean jj_3R_single_valued_object_path_expression_1135_3_47()
 {
    if (jj_3R_general_subpath_752_4_84()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1902_3_117()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_primary_1902_3_186()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1923_3_187()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1929_3_188()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1944_3_189()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1947_3_190()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1954_3_191()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1902_3_186()
 {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_between_expression_2572_3_64()) return true;
    return false;
  }

  private boolean jj_3R_single_valued_embeddable_object_field_359_4_79()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_single_valued_embeddable_object_field_359_3_33()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_single_valued_embeddable_object_field_359_4_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2660_3_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2691_3_155()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2698_3_156()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_comparison_expression_2209_3_63()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1879_3_94()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_join_spec_343_4_210()
 {
    if (jj_scan_token(INNER)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1107_3_254()
 {
    if (jj_scan_token(INDEX)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_join_spec_337_5_244()
 {
    if (jj_scan_token(OUTER)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1873_3_93()
 {
    if (jj_3R_function_invocation_1239_3_170()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1871_3_92()
 {
    if (jj_3R_case_expression_1571_3_163()) return true;
    return false;
  }

  private boolean jj_3R_join_spec_333_4_171()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_spec_333_4_209()) {
    jj_scanpos = xsp;
    if (jj_3R_join_spec_343_4_210()) return true;
    }
    return false;
  }

  private boolean jj_3R_join_spec_333_4_209()
 {
    if (jj_scan_token(LEFT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_spec_337_5_244()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_join_spec_333_3_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_spec_333_4_171()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_aggregate_expression_1157_3_31()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1091_3_253()
 {
    if (jj_scan_token(SIZE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_collection_valued_path_expression_2355_3_154()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1858_3_91()
 {
    if (jj_3R_functions_returning_strings_827_3_177()) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2622_3_198()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1853_3_90()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2620_3_145()
 {
    if (jj_3R_datetime_expression_1782_3_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_between_expression_2622_3_198()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_datetime_expression_1782_3_41()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_datetime_expression_1782_3_41()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1848_3_89()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1845_3_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1848_3_89()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1853_3_90()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1858_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1871_3_92()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1873_3_93()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1879_3_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_string_expression_1845_3_40()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1070_3_252()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_constructor_expression_299_2_32()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2599_3_197()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2596_3_144()
 {
    if (jj_3R_string_expression_1845_3_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_between_expression_2599_3_197()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1823_3_100()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1054_3_251()
 {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1816_3_99()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_aggregate_expression_1157_3_31()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1809_3_98()
 {
    if (jj_3R_function_invocation_1239_3_170()) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2575_3_196()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1806_3_97()
 {
    if (jj_3R_case_expression_1571_3_163()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1038_3_250()
 {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2572_3_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_between_expression_2572_3_143()) {
    jj_scanpos = xsp;
    if (jj_3R_between_expression_2596_3_144()) {
    jj_scanpos = xsp;
    if (jj_3R_between_expression_2620_3_145()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_between_expression_2572_3_143()
 {
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_between_expression_2575_3_196()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_single_valued_path_expression_2804_3_29()) return true;
    return false;
  }

  private boolean jj_3R_groupby_clause_3333_4_276()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_groupby_item_3310_3_275()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_aggregate_expression_1157_3_31()) return true;
    return false;
  }

  private boolean jj_3R_groupby_clause_3329_3_260()
 {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_groupby_item_3310_3_275()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_groupby_clause_3333_4_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_datetime_expression_1792_3_96()
 {
    if (jj_3R_functions_returning_datetime_963_3_179()) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2553_4_149()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1786_3_95()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2549_4_148()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1782_3_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1786_3_95()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1792_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1806_3_97()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1809_3_98()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1816_3_99()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1823_3_100()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_groupby_item_3314_3_285()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2544_6_62()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_in_item_2499_3_61()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1010_3_249()
 {
    if (jj_scan_token(LOCATE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_groupby_item_3310_3_275()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3R_groupby_item_3314_3_285()) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_constructor_expression_299_2_32()) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_single_valued_path_expression_2804_3_29()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_in_item_2499_3_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_in_expression_2544_6_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_null_212_27_28()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2532_4_147()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_997_3_248()
 {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_997_3_227()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_numerics_997_3_248()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1010_3_249()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1038_3_250()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1054_3_251()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1070_3_252()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1091_3_253()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1107_3_254()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_having_clause_3297_3_261()
 {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_conditional_expression_2767_3_274()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_aggregate_expression_1157_3_31()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1759_3_107()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2525_3_146()
 {
    if (jj_3R_type_discriminator_1438_3_46()) return true;
    return false;
  }

  private boolean jj_3R_null_212_12_27()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_212_12_27()) {
    jj_scanpos = xsp;
    if (jj_3R_null_212_27_28()) return true;
    }
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2521_3_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_in_expression_2525_3_146()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_in_expression_2532_4_147()) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3R_in_expression_2549_4_148()) {
    jj_scanpos = xsp;
    if (jj_3R_in_expression_2553_4_149()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_single_valued_path_expression_2804_3_29()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1752_3_106()
 {
    if (jj_3R_function_invocation_1239_3_170()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1749_3_105()
 {
    if (jj_3R_case_expression_1571_3_163()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1743_3_104()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_975_3_224()
 {
    if (jj_scan_token(CURRENT_TIMESTAMP)) return true;
    return false;
  }

  private boolean jj_3R_in_item_2505_3_137()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1737_3_103()
 {
    if (jj_3R_boolean_literal_1706_2_182()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_969_3_223()
 {
    if (jj_scan_token(CURRENT_TIME)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1733_3_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1737_3_103()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1743_3_104()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1749_3_105()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1752_3_106()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1759_3_107()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_in_item_2499_3_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_in_item_2499_3_136()) {
    jj_scanpos = xsp;
    if (jj_3R_in_item_2505_3_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_in_item_2499_3_136()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_963_3_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_datetime_963_3_222()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_datetime_969_3_223()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_datetime_975_3_224()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_963_3_222()
 {
    if (jj_scan_token(CURRENT_DATE)) return true;
    return false;
  }

  private boolean jj_3R_like_expression_2481_4_292()
 {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_boolean_literal_1711_2_226()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_938_5_220()
 {
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_boolean_literal_1706_2_182()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_boolean_literal_1706_2_225()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_literal_1711_2_226()) return true;
    }
    return false;
  }

  private boolean jj_3R_boolean_literal_1706_2_225()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_like_expression_2470_4_150()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_like_expression_2468_3_66()
 {
    if (jj_3R_string_expression_1845_3_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_like_expression_2470_4_150()) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    xsp = jj_scanpos;
    if (jj_3R_like_expression_2481_4_292()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_enum_expression_1695_3_111()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3182_3_178()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_925_5_219()
 {
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_enum_expression_1692_3_110()
 {
    if (jj_3R_case_expression_1571_3_163()) return true;
    return false;
  }

  private boolean jj_3R_enum_expression_1685_3_109()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2451_4_153()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_3R_general_identification_variable_709_2_35()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_910_5_38()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_enum_expression_1678_3_108()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2444_4_152()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_state_field_path_expression_792_2_36()) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2442_3_151()
 {
    if (jj_3R_single_valued_path_expression_2804_3_29()) return true;
    return false;
  }

  private boolean jj_3R_enum_expression_1674_3_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_enum_expression_1678_3_108()) {
    jj_scanpos = xsp;
    if (jj_3R_enum_expression_1685_3_109()) {
    jj_scanpos = xsp;
    if (jj_3R_enum_expression_1692_3_110()) {
    jj_scanpos = xsp;
    if (jj_3R_enum_expression_1695_3_111()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_state_valued_path_expression_806_4_39()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_904_5_87()
 {
    if (jj_scan_token(BOTH)) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2441_2_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_comparison_expression_2442_3_151()) {
    jj_scanpos = xsp;
    if (jj_3R_null_comparison_expression_2444_4_152()) return true;
    }
    if (jj_scan_token(IS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_null_comparison_expression_2451_4_153()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_899_5_86()
 {
    if (jj_scan_token(TRAILING)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_894_5_85()
 {
    if (jj_scan_token(LEADING)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_894_5_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_894_5_85()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_899_5_86()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_904_5_87()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_subquery_3195_4_234()
 {
    if (jj_3R_having_clause_3297_3_261()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_894_5_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_910_5_38()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_subquery_3192_4_233()
 {
    if (jj_3R_groupby_clause_3329_3_260()) return true;
    return false;
  }

  private boolean jj_3R_subquery_3189_4_232()
 {
    if (jj_3R_where_clause_2780_3_259()) return true;
    return false;
  }

  private boolean jj_3R_entity_expression_1653_3_135()
 {
    if (jj_3R_simple_entity_expression_1624_3_195()) return true;
    return false;
  }

  private boolean jj_3R_empty_collection_comparison_expression_2418_3_293()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_883_3_218()
 {
    if (jj_scan_token(TRIM)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_entity_expression_1648_3_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_expression_1653_3_135()) return true;
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_single_valued_object_path_expression_1135_3_47()) return true;
    return false;
  }

  private boolean jj_3R_subquery_3182_3_178()
 {
    if (jj_3R_simple_select_clause_2870_3_221()) return true;
    if (jj_3R_subquery_from_clause_3121_3_231()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3189_4_232()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3192_4_233()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3195_4_234()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_empty_collection_comparison_expression_2411_3_68()
 {
    if (jj_3R_collection_valued_path_expression_2355_3_154()) return true;
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_empty_collection_comparison_expression_2418_3_293()) jj_scanpos = xsp;
    if (jj_scan_token(EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_870_5_256()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    return false;
  }

  private boolean jj_3R_simple_entity_expression_1631_3_229()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_collection_member_declaration_3160_3_286()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_collection_valued_path_expression_2355_3_154()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_collection_member_expression_2392_3_237()
 {
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_simple_entity_expression_1624_3_195()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_entity_expression_1624_3_228()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_entity_expression_1631_3_229()) return true;
    }
    return false;
  }

  private boolean jj_3R_simple_entity_expression_1624_3_228()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_855_3_217()
 {
    if (jj_scan_token(SUBSTRING)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2019_3_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_functions_returning_strings_870_5_256()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_collection_member_expression_2380_3_236()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_842_5_255()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3144_3_282()
 {
    if (jj_3R_collection_member_declaration_3160_3_286()) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_1608_3_208()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_collection_member_expression_2374_3_199()
 {
    if (jj_3R_entity_or_value_expression_2316_3_235()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_collection_member_expression_2380_3_236()) jj_scanpos = xsp;
    if (jj_scan_token(MEMBER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_collection_member_expression_2392_3_237()) jj_scanpos = xsp;
    if (jj_3R_collection_valued_path_expression_2355_3_154()) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3137_3_273()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_subquery_from_clause_3144_3_282()) return true;
    }
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_subselect_identification_variable_declaration_3064_3_72()) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_1601_3_207()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3132_3_258()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_from_clause_3137_3_273()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_827_3_177()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_827_3_216()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_855_3_217()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_883_3_218()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_925_5_219()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_938_5_220()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_functions_returning_strings_827_3_216()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_string_expression_1845_3_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_functions_returning_strings_842_5_255()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_type_discriminator_1438_3_46()) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_1593_3_164()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_type_expression_1601_3_207()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_type_expression_1608_3_208()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_collection_valued_path_expression_2355_3_154()
 {
    if (jj_3R_general_subpath_752_4_84()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3121_3_231()
 {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_subselect_identification_variable_declaration_3064_3_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_subquery_from_clause_3132_3_258()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_case_expression_1581_3_206()
 {
    if (jj_3R_nullif_expression_1354_3_243()) return true;
    return false;
  }

  private boolean jj_3R_case_expression_1578_3_205()
 {
    if (jj_3R_coalesce_expression_1383_3_242()) return true;
    return false;
  }

  private boolean jj_3R_state_valued_path_expression_809_4_88()
 {
    if (jj_3R_general_identification_variable_709_2_35()) return true;
    return false;
  }

  private boolean jj_3R_case_expression_1575_3_204()
 {
    if (jj_3R_simple_case_expression_1495_3_241()) return true;
    return false;
  }

  private boolean jj_3R_state_valued_path_expression_806_4_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_state_valued_path_expression_809_4_88()) return true;
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_state_field_path_expression_792_2_36()) return true;
    return false;
  }

  private boolean jj_3R_entity_or_value_expression_2338_3_263()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_general_case_expression_1539_3_45()) return true;
    return false;
  }

  private boolean jj_3R_case_expression_1571_3_163()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_case_expression_1575_3_204()) {
    jj_scanpos = xsp;
    if (jj_3R_case_expression_1578_3_205()) {
    jj_scanpos = xsp;
    if (jj_3R_case_expression_1581_3_206()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3100_3_162()
 {
    if (jj_3R_derived_collection_member_declaration_2890_3_203()) return true;
    return false;
  }

  private boolean jj_3R_entity_or_value_expression_2330_3_262()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_state_field_path_expression_792_2_36()
 {
    if (jj_3R_general_subpath_752_4_84()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3091_3_281()
 {
    if (jj_3R_join_531_3_34()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_state_field_path_expression_792_2_36()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_single_valued_object_path_expression_1135_3_47()) return true;
    return false;
  }

  private boolean jj_3R_entity_or_value_expression_2316_3_235()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_or_value_expression_2330_3_262()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_or_value_expression_2338_3_263()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_general_case_expression_1545_4_269()
 {
    if (jj_3R_when_clause_1524_3_112()) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3079_3_280()
 {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3R_treated_subpath_774_3_215()
 {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_general_subpath_752_4_84()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_general_case_expression_1539_3_45()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_when_clause_1524_3_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_general_case_expression_1545_4_269()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_scalar_expression_1315_3_30()) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3073_3_161()
 {
    if (jj_3R_derived_path_expression_3036_3_202()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subselect_identification_variable_declaration_3079_3_280()) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_subselect_identification_variable_declaration_3091_3_281()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public JpqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[116];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x800000,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x20,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x20000,0x380000,0x40,0x800,0x800000,0x800000,0x40800,0x0,0x0,0x403f8840,0x18000,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,0x0,0x0,0x18000,0x40000000,0x40018000,0x380000,0x18000,0x20000,0x18000,0x0,0x40,0x18000,0x0,0x0,0x0,0x0,0x0,0x280,0x0,0x78a80,0x58ac0,0x0,0x40018280,0x3d8a80,0x18280,0x280,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3d8800,0x20000000,0x0,0x100,0x0,0x0,0x800000,0x0,0x20,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x400400,0x400400,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x10000000,0x820,0x820,0x0,0x0,0x0,0x0,0x920,0x920,0x0,0x40,0x200,0x200,0x200,0x200,0x200,0x200,0x0,0x0,0x400,0x400,0x0,0x8000,0x0,0x40085010,0x60000,0x0,0x0,0x60000,0x202,0x0,0x408ed212,0x800200,0x0,0x200,0x200,0x0,0x0,0x800000,0x0,0x0,0x0,0x800000,0x0,0x800002,0x0,0x800002,0x8000,0x800002,0x0,0x40085010,0x800002,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80868202,0xc08e5212,0x0,0x80800202,0x80860202,0x80800200,0x80000200,0x200,0x200000,0x0,0x200000,0x2000000,0x200000,0x200,0x200000,0x200000,0x0,0x0,0x200,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x860202,0x200200,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x920,0x40,0x0,0x40,0x40,0x0,0x0,0x4,0x8,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x800,0x0,0x4000,0x0,0x2000,0x0,0x2000,0x4000,0x0,0x0,0x0,0x2000,0x2020,0x0,0x0,0x0,0x0,0x4000,0x2000,0x1000,0x1000,0x3000,0x3000,0x3020,0x3000,0x4000,0x4000,0x10,0x10,0x40000,0x242,0x0,0x1,0x4,0x0,0x0,0x4,0x3020,0x4000,0x181d33e7,0x103120,0x4000,0x103120,0x103120,0x400,0x400,0x0,0x102000,0x102000,0x102000,0x112000,0x80,0x110080,0x100000,0x12000,0x140242,0x10000,0x80000,0x100001,0x10000,0x18000000,0x18000000,0x60000000,0x18000000,0x18000000,0x0,0x7e00000,0x153266,0x18193025,0x6000000,0x1130a0,0x113024,0x113020,0x103020,0x103120,0x0,0x102000,0x0,0x0,0x0,0x103020,0x0,0x0,0x0,0x140000,0x103120,0x0,0x4000,0x110000,0x0,0x0,0x0,0x113024,0x103020,0x10000,0x0,0x0,0x2000,0x0,0x2020,0x0,0x0,0x2020,0x4000,0x0,0x2020,0x0,0x800,0x0,0x0,0x0,0x0,0x2000,0x4000,0x2000,0x4000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[72];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JpqlParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JpqlParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JpqlParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 116; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 116; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JpqlParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JpqlParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 116; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JpqlParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 116; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JpqlParser(JpqlParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 116; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JpqlParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 116; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[95];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 116; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 95; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 72; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			   case 60: jj_3_61(); break;
			   case 61: jj_3_62(); break;
			   case 62: jj_3_63(); break;
			   case 63: jj_3_64(); break;
			   case 64: jj_3_65(); break;
			   case 65: jj_3_66(); break;
			   case 66: jj_3_67(); break;
			   case 67: jj_3_68(); break;
			   case 68: jj_3_69(); break;
			   case 69: jj_3_70(); break;
			   case 70: jj_3_71(); break;
			   case 71: jj_3_72(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

//  public static void main(String args[]) throws ParseException {
//    JpqlParser parser = new JpqlParser(System.in);
//    parser.QL_statement();
//  }
}
