/* JpqlParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JpqlParser.java */
package org.minijpa.jpa.jpql;

public class JpqlParser/*@bgen(jjtree)*/implements JpqlParserTreeConstants, JpqlParserConstants {/*@bgen(jjtree)*/
  protected JJTJpqlParserState jjtree = new JJTJpqlParserState();

  final public String anyIdentifier() throws ParseException {
    trace_call("anyIdentifier");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
        break;
        }
      case AS:{
        t = jj_consume_token(AS);
        break;
        }
      case ABS:{
        t = jj_consume_token(ABS);
        break;
        }
      case ALL:{
        t = jj_consume_token(ALL);
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
        break;
        }
      case ANY:{
        t = jj_consume_token(ANY);
        break;
        }
      case ASC:{
        t = jj_consume_token(ASC);
        break;
        }
      case AVG:{
        t = jj_consume_token(AVG);
        break;
        }
      case BETWEEN:{
        t = jj_consume_token(BETWEEN);
        break;
        }
      case BOTH:{
        t = jj_consume_token(BOTH);
        break;
        }
      case BY:{
        t = jj_consume_token(BY);
        break;
        }
      case CASE:{
        t = jj_consume_token(CASE);
        break;
        }
      case COALESCE:{
        t = jj_consume_token(COALESCE);
        break;
        }
      case CONCAT:{
        t = jj_consume_token(CONCAT);
        break;
        }
      case COUNT:{
        t = jj_consume_token(COUNT);
        break;
        }
      case CURRENT_DATE:{
        t = jj_consume_token(CURRENT_DATE);
        break;
        }
      case CURRENT_TIME:{
        t = jj_consume_token(CURRENT_TIME);
        break;
        }
      case CURRENT_TIMESTAMP:{
        t = jj_consume_token(CURRENT_TIMESTAMP);
        break;
        }
      case DESC:{
        t = jj_consume_token(DESC);
        break;
        }
      case DISTINCT:{
        t = jj_consume_token(DISTINCT);
        break;
        }
      case ELSE:{
        t = jj_consume_token(ELSE);
        break;
        }
      case EMPTY:{
        t = jj_consume_token(EMPTY);
        break;
        }
      case END:{
        t = jj_consume_token(END);
        break;
        }
      case ENTRY:{
        t = jj_consume_token(ENTRY);
        break;
        }
      case ESCAPE:{
        t = jj_consume_token(ESCAPE);
        break;
        }
      case EXISTS:{
        t = jj_consume_token(EXISTS);
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
        break;
        }
      case FETCH:{
        t = jj_consume_token(FETCH);
        break;
        }
      case FROM:{
        t = jj_consume_token(FROM);
        break;
        }
      case FUNCTION:{
        t = jj_consume_token(FUNCTION);
        break;
        }
      case GROUP:{
        t = jj_consume_token(GROUP);
        break;
        }
      case HAVING:{
        t = jj_consume_token(HAVING);
        break;
        }
      case INDEX:{
        t = jj_consume_token(INDEX);
        break;
        }
      case INNER:{
        t = jj_consume_token(INNER);
        break;
        }
      case IN:{
        t = jj_consume_token(IN);
        break;
        }
      case IS:{
        t = jj_consume_token(IS);
        break;
        }
      case JOIN:{
        t = jj_consume_token(JOIN);
        break;
        }
      case KEY:{
        t = jj_consume_token(KEY);
        break;
        }
      case LEADING:{
        t = jj_consume_token(LEADING);
        break;
        }
      case LEFT:{
        t = jj_consume_token(LEFT);
        break;
        }
      case LENGTH:{
        t = jj_consume_token(LENGTH);
        break;
        }
      case LIKE:{
        t = jj_consume_token(LIKE);
        break;
        }
      case LOCATE:{
        t = jj_consume_token(LOCATE);
        break;
        }
      case LOWER:{
        t = jj_consume_token(LOWER);
        break;
        }
      case MEMBER:{
        t = jj_consume_token(MEMBER);
        break;
        }
      case MIN:{
        t = jj_consume_token(MIN);
        break;
        }
      case MAX:{
        t = jj_consume_token(MAX);
        break;
        }
      case MOD:{
        t = jj_consume_token(MOD);
        break;
        }
      case NEW:{
        t = jj_consume_token(NEW);
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
        break;
        }
      case NULL:{
        t = jj_consume_token(NULL);
        break;
        }
      case NULLIF:{
        t = jj_consume_token(NULLIF);
        break;
        }
      case OBJECT:{
        t = jj_consume_token(OBJECT);
        break;
        }
      case OF:{
        t = jj_consume_token(OF);
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
        break;
        }
      case ORDER:{
        t = jj_consume_token(ORDER);
        break;
        }
      case OUTER:{
        t = jj_consume_token(OUTER);
        break;
        }
      case SELECT:{
        t = jj_consume_token(SELECT);
        break;
        }
      case SIZE:{
        t = jj_consume_token(SIZE);
        break;
        }
      case SOME:{
        t = jj_consume_token(SOME);
        break;
        }
      case SQRT:{
        t = jj_consume_token(SQRT);
        break;
        }
      case SUBSTRING:{
        t = jj_consume_token(SUBSTRING);
        break;
        }
      case SUM:{
        t = jj_consume_token(SUM);
        break;
        }
      case THEN:{
        t = jj_consume_token(THEN);
        break;
        }
      case TRAILING:{
        t = jj_consume_token(TRAILING);
        break;
        }
      case TREAT:{
        t = jj_consume_token(TREAT);
        break;
        }
      case TRIM:{
        t = jj_consume_token(TRIM);
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
        break;
        }
      case TYPE:{
        t = jj_consume_token(TYPE);
        break;
        }
      case UPPER:{
        t = jj_consume_token(UPPER);
        break;
        }
      case WHEN:{
        t = jj_consume_token(WHEN);
        break;
        }
      case WHERE:{
        t = jj_consume_token(WHERE);
        break;
        }
      case VALUE:{
        t = jj_consume_token(VALUE);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("anyIdentifier");
    }
}

  final public ASTQLStatement QL_statement() throws ParseException {
    trace_call("QL_statement");
    try {
/*@bgen(jjtree) QLStatement */
  ASTQLStatement jjtn000 = new ASTQLStatement(JJTQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String result;
      try {
        select_statement();
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("QL_statement");
    }
}

//   select_statement ::= select_clause from_clause [where_clause] [groupby_clause]
//      [having_clause] [orderby_clause]
  final public void select_statement() throws ParseException {
    trace_call("select_statement");
    try {
/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        select_clause();
        from_clause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHERE:{
          where_clause();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GROUP:{
          groupby_clause();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HAVING:{
          having_clause();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORDER:{
          orderby_clause();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("select_statement");
    }
}

// select_clause ::= SELECT [DISTINCT] select_item {, select_item}*
  final public void select_clause() throws ParseException {
    trace_call("select_clause");
    try {
/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);StringBuilder sb=new StringBuilder();
  String s;
  Token t;
      try {
        jj_consume_token(SELECT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DISTINCT:{
          jj_consume_token(DISTINCT);
jjtn000.setDistinct(true);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        select_item();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          select_item();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("select_clause");
    }
}

// select_item ::= select_expression [[AS] result_variable]
  final public void select_item() throws ParseException {
    trace_call("select_item");
    try {
/*@bgen(jjtree) SelectItem */
  ASTSelectItem jjtn000 = new ASTSelectItem(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        select_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:
        case NAME:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AS:{
            jj_consume_token(AS);
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          t = jj_consume_token(NAME);
//     jjtThis.setAlias(s);
     jjtn000.setAlias(t.image);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("select_item");
    }
}

// select_expression ::=
//    single_valued_path_expression |
//    aggregate_expression |
//    scalar_expression |
//    identification_variable |
//    OBJECT(identification_variable) |
//    constructor_expression
  final public void select_expression() throws ParseException {
    trace_call("select_expression");
    try {
/*@bgen(jjtree) SelectExpression */
  ASTSelectExpression jjtn000 = new ASTSelectExpression(JJTSELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_1(2147483647)) {
          t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
        } else if (jj_2_2(2)) {
          single_valued_path_expression();
        } else if (jj_2_3(2)) {
          aggregate_expression();
        } else if (jj_2_4(2)) {
          scalar_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OBJECT:{
            jj_consume_token(OBJECT);
            jj_consume_token(OPEN_BRACKET);
            t = jj_consume_token(NAME);
//     jjtThis.setObjectIdentificationVariable(s);
     jjtn000.setObjectIdentificationVariable(t.image);
            jj_consume_token(CLOSE_BRACKET);
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            if (jj_2_5(2)) {
              s = constructor_expression();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
sb.append(s);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("select_expression");
    }
}

// constructor_item ::=
//    single_valued_path_expression |
//    aggregate_expression |
//    scalar_expression |
//    identification_variable
  final public void constructor_item() throws ParseException {
    trace_call("constructor_item");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      if (jj_2_6(3)) {
        single_valued_path_expression();
      } else if (jj_2_7(2)) {
        aggregate_expression();
      } else if (jj_2_8(3)) {
        scalar_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          t = jj_consume_token(NAME);
sb.append(t.image);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("constructor_item");
    }
}

// constructor_expression ::=
//    NEW constructor_name (constructor_item {, constructor_item}*)
  final public String constructor_expression() throws ParseException {
    trace_call("constructor_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(NEW);
sb.append(t.image);
      t = jj_consume_token(NAME);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      constructor_item();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        t = jj_consume_token(COMMA);
sb.append(t.image);
        constructor_item();
      }
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("constructor_expression");
    }
}

//  join_spec ::= [LEFT [OUTER] | INNER] JOIN
  final public JoinType join_spec() throws ParseException {
    trace_call("join_spec");
    try {
JoinType jt=new JoinType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INNER:
      case LEFT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT:{
          jj_consume_token(LEFT);
jt.setLeft(true);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OUTER:{
            jj_consume_token(OUTER);
jt.setOuter(true);
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          break;
          }
        case INNER:{
          jj_consume_token(INNER);
jt.setInner(true);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(JOIN);
{if ("" != null) return jt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("join_spec");
    }
}

  final public String single_valued_embeddable_object_field() throws ParseException {
    trace_call("single_valued_embeddable_object_field");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_3;
        }
        t = jj_consume_token(NAME);
sb.append(t.image);
        t = jj_consume_token(DOT);
sb.append(".");
      }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("single_valued_embeddable_object_field");
    }
}

//   join_single_valued_path_expression ::= 
//        identification_variable.{single_valued_embeddable_object_field.}*single_valued_object_field
//
//// MODIFIED AS:
//
//   join_single_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*NAME
  final public String join_single_valued_path_expression() throws ParseException {
    trace_call("join_single_valued_path_expression");
    try {
/*@bgen(jjtree) JoinSingleValuedPathExpression */
  ASTJoinSingleValuedPathExpression jjtn000 = new ASTJoinSingleValuedPathExpression(JJTJOINSINGLEVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        t = jj_consume_token(NAME);
sb.append(t.image);
        t = jj_consume_token(DOT);
sb.append(".");
        label_4:
        while (true) {
          if (jj_2_9(2)) {
            ;
          } else {
            break label_4;
          }
          s = single_valued_embeddable_object_field();
sb.append(s);
          t = jj_consume_token(DOT);
sb.append(".");
        }
        t = jj_consume_token(NAME);
sb.append(t.image);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(sb.toString());
    {if ("" != null) return sb.toString();}
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("join_single_valued_path_expression");
    }
}

// join_collection_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*collection_valued_field
//
//// MODIFIED AS:
//
// join_collection_valued_path_expression ::= 
//       identification_variable.{single_valued_embeddable_object_field.}*FIELD_NAME
/*
String join_collection_valued_path_expression() :
{
  Token t;
  StringBuilder sb=new StringBuilder();
  String s;
}
{
  t=<NAME>
    {
     sb.append(t.image);
    }
  t=<DOT>
    {
     sb.append(".");
    }
  (
   s=single_valued_embeddable_object_field()
     {
      sb.append(s);
     }
   t=<DOT>
     {
      sb.append(".");
     }
  )*
  t=<NAME>
    {
     sb.append(t.image);
    }
  { return sb.toString(); }
}
*/


// Must be a subtype, entity name?
  final public String subtype() throws ParseException {
    trace_call("subtype");
    try {
/*@bgen(jjtree) Subtype */
  ASTSubtype jjtn000 = new ASTSubtype(JJTSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return t.image;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("subtype");
    }
}

//  join_association_path_expression ::=
//      join_collection_valued_path_expression |
//      join_single_valued_path_expression |
//      TREAT(join_collection_valued_path_expression AS subtype) |
//      TREAT(join_single_valued_path_expression AS subtype)
//
//// MODIFIED AS:
//
//  join_association_path_expression ::=
//      join_single_valued_path_expression |
//      TREAT(join_single_valued_path_expression AS subtype)
  final public void join_association_path_expression() throws ParseException {
    trace_call("join_association_path_expression");
    try {
/*@bgen(jjtree) JoinAssociationPathExpression */
  ASTJoinAssociationPathExpression jjtn000 = new ASTJoinAssociationPathExpression(JJTJOINASSOCIATIONPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          s = join_single_valued_path_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setJoinSingleValuedPathExpression(s);
          break;
          }
        case TREAT:{
          t = jj_consume_token(TREAT);
sb.append(t.image);
          t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
          s = join_single_valued_path_expression();
          //    {
          //      sb.append(s);
          //    }
            t = jj_consume_token(AS);
sb.append(" ");
     sb.append(t.image);
          s = subtype();
sb.append(" ");
      sb.append(s);
          t = jj_consume_token(CLOSE_BRACKET);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("join_association_path_expression");
    }
}

//  join ::= join_spec join_association_path_expression [AS] identification_variable [join_condition]
// TODO: to be completed
  final public void join() throws ParseException {
    trace_call("join");
    try {
/*@bgen(jjtree) Join */
  ASTJoin jjtn000 = new ASTJoin(JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  JoinType jt;
      try {
        jt = join_spec();
jjtn000.setJoinType(jt);
        join_association_path_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          t = jj_consume_token(AS);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("join");
    }
}

//    fetch_join ::= join_spec FETCH join_association_path_expression
  final public void fetch_join() throws ParseException {
    trace_call("fetch_join");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  JoinType jt;
      jt = join_spec();

      jj_consume_token(FETCH);
      join_association_path_expression();
sb.append(" ");
//      sb.append(s);

    } finally {
      trace_return("fetch_join");
    }
}

//   entity_name
  final public String entity_name() throws ParseException {
    trace_call("entity_name");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("entity_name");
    }
}

//   range_variable_declaration ::= entity_name [AS] identification_variable
  final public void range_variable_declaration() throws ParseException {
    trace_call("range_variable_declaration");
    try {
/*@bgen(jjtree) RangeVariableDeclaration */
  ASTRangeVariableDeclaration jjtn000 = new ASTRangeVariableDeclaration(JJTRANGEVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        s = anyIdentifier();
jjtn000.setEntityName(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          t = jj_consume_token(AS);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setAlias(t.image);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("range_variable_declaration");
    }
}

//  identification_variable_declaration ::= range_variable_declaration {join | fetch_join}*
  final public void identification_variable_declaration() throws ParseException {
    trace_call("identification_variable_declaration");
    try {
/*@bgen(jjtree) IdentificationVariableDeclaration */
  ASTIdentificationVariableDeclaration jjtn000 = new ASTIdentificationVariableDeclaration(JJTIDENTIFICATIONVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        range_variable_declaration();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INNER:
          case JOIN:
          case LEFT:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_5;
          }
          if (jj_2_10(2)) {
            join();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INNER:
            case JOIN:
            case LEFT:{
              fetch_join();

              break;
              }
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("identification_variable_declaration");
    }
}

//    from_clause ::= FROM identification_variable_declaration
//          {, {identification_variable_declaration | collection_member_declaration}}*
  final public void from_clause() throws ParseException {
    trace_call("from_clause");
    try {
/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FROM);
        identification_variable_declaration();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          if (jj_2_11(2)) {
            identification_variable_declaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IN:{
              collection_member_declaration();
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("from_clause");
    }
}

// map_field_identification_variable ::= KEY(identification_variable) | VALUE(identification_variable)
  final public MapFieldIdentificationVariable map_field_identification_variable() throws ParseException {
    trace_call("map_field_identification_variable");
    try {
/*@bgen(jjtree) MapFieldIdentificationVariable */
  ASTMapFieldIdentificationVariable jjtn000 = new ASTMapFieldIdentificationVariable(JJTMAPFIELDIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  MapFieldIdentificationVariable mapFieldIdentificationVariable=new MapFieldIdentificationVariable();
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:{
          jj_consume_token(KEY);
//   jjtThis.setKey(true);
   mapFieldIdentificationVariable.setMapField(MapField.KEY);
          jj_consume_token(OPEN_BRACKET);
          t = jj_consume_token(NAME);
//   jjtThis.setIdentificationVariable(t.image);
   mapFieldIdentificationVariable.setIdentificationVariable(t.image);
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        case VALUE:{
          jj_consume_token(VALUE);
//   jjtThis.setKey(false);
   mapFieldIdentificationVariable.setMapField(MapField.VALUE);
          jj_consume_token(OPEN_BRACKET);
          t = jj_consume_token(NAME);
//   jjtThis.setIdentificationVariable(t.image);
   mapFieldIdentificationVariable.setIdentificationVariable(t.image);
          jj_consume_token(CLOSE_BRACKET);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
{if ("" != null) return mapFieldIdentificationVariable;}
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("map_field_identification_variable");
    }
}

// qualified_identification_variable ::= map_field_identification_variable | ENTRY(identification_variable)
  final public void qualified_identification_variable() throws ParseException {
    trace_call("qualified_identification_variable");
    try {
/*@bgen(jjtree) QualifiedIdentificationVariable */
  ASTQualifiedIdentificationVariable jjtn000 = new ASTQualifiedIdentificationVariable(JJTQUALIFIEDIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  MapFieldIdentificationVariable mapFieldIdentificationVariable;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case VALUE:{
          mapFieldIdentificationVariable = map_field_identification_variable();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setMapFieldIdentificationVariable(mapFieldIdentificationVariable);
          break;
          }
        case ENTRY:{
          jj_consume_token(ENTRY);
          jj_consume_token(OPEN_BRACKET);
          t = jj_consume_token(NAME);
jjtn000.setEntryIdentificationVariable(t.image);
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("qualified_identification_variable");
    }
}

// general_identification_variable ::= identification_variable | map_field_identification_variable
  final public void general_identification_variable() throws ParseException {
    trace_call("general_identification_variable");
    try {
/*@bgen(jjtree) GeneralIdentificationVariable */
  ASTGeneralIdentificationVariable jjtn000 = new ASTGeneralIdentificationVariable(JJTGENERALIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  MapFieldIdentificationVariable mapFieldIdentificationVariable;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
          break;
          }
        case KEY:
        case VALUE:{
          mapFieldIdentificationVariable = map_field_identification_variable();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setMapFieldIdentificationVariable(mapFieldIdentificationVariable);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("general_identification_variable");
    }
}

// simple_subpath ::= general_identification_variable | general_identification_variable{.single_valued_object_field}*
//
// MODIFIED AS:
//
// simple_subpath ::= general_identification_variable{.single_valued_object_field}*
  final public void simple_subpath() throws ParseException {
    trace_call("simple_subpath");
    try {
/*@bgen(jjtree) SimpleSubpath */
  ASTSimpleSubpath jjtn000 = new ASTSimpleSubpath(JJTSIMPLESUBPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_13(2)) {
          general_identification_variable();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KEY:
          case VALUE:
          case NAME:{
            general_identification_variable();
            label_7:
            while (true) {
              if (jj_2_12(2)) {
                ;
              } else {
                break label_7;
              }
              jj_consume_token(DOT);
              t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
            }
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("simple_subpath");
    }
}

// general_subpath ::= simple_subpath | treated_subpath{.single_valued_object_field}*
  final public void general_subpath() throws ParseException {
    trace_call("general_subpath");
    try {
/*@bgen(jjtree) GeneralSubpath */
  ASTGeneralSubpath jjtn000 = new ASTGeneralSubpath(JJTGENERALSUBPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KEY:
        case VALUE:
        case NAME:{
          simple_subpath();
          break;
          }
        case TREAT:{
          treated_subpath();
          label_8:
          while (true) {
            if (jj_2_14(2)) {
              ;
            } else {
              break label_8;
            }
            t = jj_consume_token(DOT);
            t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
          }
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("general_subpath");
    }
}

// treated_subpath ::= TREAT(general_subpath AS subtype)
  final public void treated_subpath() throws ParseException {
    trace_call("treated_subpath");
    try {
/*@bgen(jjtree) TreatedSubpath */
  ASTTreatedSubpath jjtn000 = new ASTTreatedSubpath(JJTTREATEDSUBPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(TREAT);
        jj_consume_token(OPEN_BRACKET);
        general_subpath();
        jj_consume_token(AS);
        t = jj_consume_token(NAME);
jjtn000.setSubtype(t.image);
        jj_consume_token(CLOSE_BRACKET);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("treated_subpath");
    }
}

// state_field_path_expression ::= general_subpath.state_field
  final public void state_field_path_expression() throws ParseException {
    trace_call("state_field_path_expression");
    try {
/*@bgen(jjtree) StateFieldPathExpression */
  ASTStateFieldPathExpression jjtn000 = new ASTStateFieldPathExpression(JJTSTATEFIELDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        general_subpath();
        jj_consume_token(DOT);
        s = anyIdentifier();
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.setStateField(s);
//   jjtThis.setStateField(t.image);

      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("state_field_path_expression");
    }
}

// state_valued_path_expression ::= state_field_path_expression | general_identification_variable
  final public void state_valued_path_expression() throws ParseException {
    trace_call("state_valued_path_expression");
    try {
/*@bgen(jjtree) StateValuedPathExpression */
  ASTStateValuedPathExpression jjtn000 = new ASTStateValuedPathExpression(JJTSTATEVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_15(3)) {
          state_field_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KEY:
          case VALUE:
          case NAME:{
            general_identification_variable();
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("state_valued_path_expression");
    }
}

//   functions_returning_strings ::=
//      CONCAT(string_expression, string_expression{, string_expression}*) |
//      SUBSTRING(string_expression, arithmetic_expression[, arithmetic_expression]) |
//      TRIM([[trim_specification] [trim_character] FROM] string_expression) |
//      LOWER(string_expression) |
//      UPPER(string_expression)
//   trim_specification ::= LEADING | TRAILING | BOTH
  final public String functions_returning_strings() throws ParseException {
    trace_call("functions_returning_strings");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONCAT:{
        t = jj_consume_token(CONCAT);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        string_expression();
        t = jj_consume_token(COMMA);
sb.append(t.image);
        string_expression();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_9;
          }
          t = jj_consume_token(COMMA);
sb.append(t.image);
          string_expression();
        }
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case SUBSTRING:{
        t = jj_consume_token(SUBSTRING);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        string_expression();
        t = jj_consume_token(COMMA);
sb.append(t.image);
        arithmetic_expression();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_10;
          }
          t = jj_consume_token(COMMA);
sb.append(t.image);
          arithmetic_expression();
        }
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case TRIM:{
        t = jj_consume_token(TRIM);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        if (jj_2_16(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOTH:
          case LEADING:
          case TRAILING:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LEADING:{
              t = jj_consume_token(LEADING);
sb.append(t.image);
              break;
              }
            case TRAILING:{
              t = jj_consume_token(TRAILING);
sb.append(t.image);
              break;
              }
            case BOTH:{
              t = jj_consume_token(BOTH);
sb.append(t.image);
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING_LITERAL:{
            t = jj_consume_token(STRING_LITERAL);
sb.append(t.image);
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          t = jj_consume_token(FROM);
sb.append(t.image);
        } else {
          ;
        }
        string_expression();
        jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
        break;
        }
      case LOWER:{
        t = jj_consume_token(LOWER);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        string_expression();
        t = jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
        break;
        }
      case UPPER:{
        t = jj_consume_token(UPPER);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        string_expression();
        t = jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functions_returning_strings");
    }
}

//   functions_returning_datetime ::=
//      CURRENT_DATE |
//      CURRENT_TIME |
//      CURRENT_TIMESTAMP
  final public org.minijpa.jdbc.db.SqlFunction functions_returning_datetime() throws ParseException {
    trace_call("functions_returning_datetime");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CURRENT_DATE:{
        jj_consume_token(CURRENT_DATE);
{if ("" != null) return org.minijpa.jdbc.db.SqlFunction.CURRENT_DATE;}
        break;
        }
      case CURRENT_TIME:{
        jj_consume_token(CURRENT_TIME);
{if ("" != null) return org.minijpa.jdbc.db.SqlFunction.CURRENT_TIME;}
        break;
        }
      case CURRENT_TIMESTAMP:{
        jj_consume_token(CURRENT_TIMESTAMP);
{if ("" != null) return org.minijpa.jdbc.db.SqlFunction.CURRENT_TIMESTAMP;}
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functions_returning_datetime");
    }
}

//   functions_returning_numerics ::=
//      LENGTH(string_expression) |
//      LOCATE(string_expression, string_expression[, arithmetic_expression]) |
//      ABS(arithmetic_expression) |
//      SQRT(arithmetic_expression) |
//      MOD(arithmetic_expression, arithmetic_expression) |
//      SIZE(collection_valued_path_expression) |
//      INDEX(identification_variable)
  final public String functions_returning_numerics() throws ParseException {
    trace_call("functions_returning_numerics");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LENGTH:{
        t = jj_consume_token(LENGTH);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        string_expression();
        jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return sb.toString();}
        break;
        }
      case LOCATE:{
        t = jj_consume_token(LOCATE);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        string_expression();
        t = jj_consume_token(COMMA);
sb.append(t.image);
        arithmetic_expression();
        t = jj_consume_token(COMMA);
sb.append(t.image);
        arithmetic_expression();
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case ABS:{
        t = jj_consume_token(ABS);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        arithmetic_expression();
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case SQRT:{
        t = jj_consume_token(SQRT);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        arithmetic_expression();
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case MOD:{
        t = jj_consume_token(MOD);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        arithmetic_expression();
        t = jj_consume_token(COMMA);
sb.append(t.image);
        arithmetic_expression();
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case SIZE:{
        t = jj_consume_token(SIZE);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        collection_valued_path_expression();
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case INDEX:{
        t = jj_consume_token(INDEX);
sb.append(t.image);
        t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
        t = jj_consume_token(NAME);
sb.append(t.image);
        t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functions_returning_numerics");
    }
}

// single_valued_object_path_expression ::= general_subpath.single_valued_object_field
  final public void single_valued_object_path_expression() throws ParseException {
    trace_call("single_valued_object_path_expression");
    try {
/*@bgen(jjtree) SingleValuedObjectPathExpression */
  ASTSingleValuedObjectPathExpression jjtn000 = new ASTSingleValuedObjectPathExpression(JJTSINGLEVALUEDOBJECTPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        general_subpath();
        jj_consume_token(DOT);
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setSingleValuedObjectField(t.image);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("single_valued_object_path_expression");
    }
}

// aggregate_expression ::=
//    {AVG | MAX | MIN | SUM} ([DISTINCT] state_valued_path_expression) |
//    COUNT ([DISTINCT] identification_variable | state_valued_path_expression | single_valued_object_path_expression) |
//    function_invocation
  final public void aggregate_expression() throws ParseException {
    trace_call("aggregate_expression");
    try {
/*@bgen(jjtree) AggregateExpression */
  ASTAggregateExpression jjtn000 = new ASTAggregateExpression(JJTAGGREGATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AVG:
        case MIN:
        case MAX:
        case SUM:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AVG:{
            jj_consume_token(AVG);
jjtn000.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.AVG);
            break;
            }
          case MAX:{
            jj_consume_token(MAX);
jjtn000.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.MAX);
            break;
            }
          case MIN:{
            jj_consume_token(MIN);
jjtn000.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.MIN);
            break;
            }
          case SUM:{
            jj_consume_token(SUM);
jjtn000.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.SUM);
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(OPEN_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DISTINCT:{
            jj_consume_token(DISTINCT);
jjtn000.setDistinct(true);
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            ;
          }
          state_valued_path_expression();
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        case COUNT:{
          jj_consume_token(COUNT);
jjtn000.setAggregateFunction(org.minijpa.jdbc.model.aggregate.AggregateFunctionBasicType.COUNT);
          jj_consume_token(OPEN_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DISTINCT:{
            jj_consume_token(DISTINCT);
jjtn000.setDistinct(true);
            break;
            }
          default:
            jj_la1[39] = jj_gen;
            ;
          }
          if (jj_2_17(3)) {
            state_valued_path_expression();
          } else if (jj_2_18(2)) {
            single_valued_object_path_expression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NAME:{
              t = jj_consume_token(NAME);
jjtn000.setIdentificationVariable(t.image);
              break;
              }
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(CLOSE_BRACKET);
          break;
          }
        case FUNCTION:{
          s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;

          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("aggregate_expression");
    }
}

//   function_invocation ::= FUNCTION(function_name{, function_arg}*)
  final public String function_invocation() throws ParseException {
    trace_call("function_invocation");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(FUNCTION);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      t = jj_consume_token(NAME);
sb.append(t.image);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          break label_11;
        }
        t = jj_consume_token(COMMA);
sb.append(t.image);
        function_arg();
      }
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("function_invocation");
    }
}

//   function_arg ::=
//      literal |
//      state_valued_path_expression |
//      input_parameter |
//      scalar_expression
  final public void function_arg() throws ParseException {
    trace_call("function_arg");
    try {
/*@bgen(jjtree) FunctionArg */
  ASTFunctionArg jjtn000 = new ASTFunctionArg(JJTFUNCTIONARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_19(2)) {
          t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
        } else if (jj_2_20(3)) {
          state_valued_path_expression();
        } else if (jj_2_21(2)) {
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABS:
          case AVG:
          case CASE:
          case COALESCE:
          case CONCAT:
          case COUNT:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case FALSE:
          case FUNCTION:
          case INDEX:
          case KEY:
          case LENGTH:
          case LOCATE:
          case LOWER:
          case MIN:
          case MAX:
          case MOD:
          case NULLIF:
          case SIZE:
          case SQRT:
          case SUBSTRING:
          case SUM:
          case TREAT:
          case TRIM:
          case TRUE:
          case TYPE:
          case UPPER:
          case VALUE:
          case NAME:
          case OPEN_BRACKET:
          case STRING_LITERAL:
          case NUMERIC_LITERAL:
          case INPUT_PARAMETER:
          case 91:
          case 92:{
            scalar_expression();
            break;
            }
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("function_arg");
    }
}

// scalar_expression ::=
//    arithmetic_expression |
//    string_expression |
//    enum_expression |
//    datetime_expression |
//    boolean_expression |
//    case_expression |
//    entity_type_expression
  final public void scalar_expression() throws ParseException {
    trace_call("scalar_expression");
    try {
/*@bgen(jjtree) ScalarExpression */
  ASTScalarExpression jjtn000 = new ASTScalarExpression(JJTSCALAREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_22(3)) {
          string_expression();
        } else if (jj_2_23(3)) {
          datetime_expression();
        } else if (jj_2_24(3)) {
          arithmetic_expression();
        } else if (jj_2_25(3)) {
          boolean_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:
          case COALESCE:
          case NULLIF:{
            case_expression();
            break;
            }
          case TYPE:
          case NAME:
          case INPUT_PARAMETER:{
            entity_type_expression();
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("scalar_expression");
    }
}

//   nullif_expression::= NULLIF(scalar_expression, scalar_expression)
  final public void nullif_expression() throws ParseException {
    trace_call("nullif_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(NULLIF);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      scalar_expression();
      t = jj_consume_token(COMMA);
sb.append(t.image);
      scalar_expression();
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
    } finally {
      trace_return("nullif_expression");
    }
}

//   coalesce_expression ::= COALESCE(scalar_expression{, scalar_expression}+)
  final public void coalesce_expression() throws ParseException {
    trace_call("coalesce_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(COALESCE);
sb.append(t.image);
      t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
      scalar_expression();
      label_12:
      while (true) {
        t = jj_consume_token(COMMA);
sb.append(t.image);
        scalar_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_12;
        }
      }
      t = jj_consume_token(CLOSE_BRACKET);
sb.append(t.image);
    } finally {
      trace_return("coalesce_expression");
    }
}

//   simple_when_clause ::= WHEN scalar_expression THEN scalar_expression
  final public void simple_when_clause() throws ParseException {
    trace_call("simple_when_clause");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(WHEN);
sb.append(t.image);
      scalar_expression();
      t = jj_consume_token(THEN);
sb.append(t.image);
      scalar_expression();
    } finally {
      trace_return("simple_when_clause");
    }
}

// type_discriminator ::=
//        TYPE(general_identification_variable |
//          single_valued_object_path_expression |
//          input_parameter)
  final public void type_discriminator() throws ParseException {
    trace_call("type_discriminator");
    try {
/*@bgen(jjtree) TypeDiscriminator */
  ASTTypeDiscriminator jjtn000 = new ASTTypeDiscriminator(JJTTYPEDISCRIMINATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        jj_consume_token(TYPE);
        jj_consume_token(OPEN_BRACKET);
        if (jj_2_26(3)) {
          general_identification_variable();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KEY:
          case TREAT:
          case VALUE:
          case NAME:{
            single_valued_object_path_expression();
            break;
            }
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtn000.setInputParameter(t.image);
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(CLOSE_BRACKET);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("type_discriminator");
    }
}

//   case_operand ::= state_valued_path_expression | type_discriminator
  final public void case_operand() throws ParseException {
    trace_call("case_operand");
    try {

      if (jj_2_27(3)) {
        state_valued_path_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPE:{
          type_discriminator();
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("case_operand");
    }
}

//   simple_case_expression ::=
//      CASE case_operand simple_when_clause {simple_when_clause}*
//      ELSE scalar_expression
//      END
  final public void simple_case_expression() throws ParseException {
    trace_call("simple_case_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      t = jj_consume_token(CASE);
sb.append(t.image);
      case_operand();
      simple_when_clause();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHEN:{
          ;
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          break label_13;
        }
        simple_when_clause();
      }
      t = jj_consume_token(ELSE);
sb.append(t.image);
      scalar_expression();
      t = jj_consume_token(END);
sb.append(t.image);
    } finally {
      trace_return("simple_case_expression");
    }
}

//   when_clause ::= WHEN conditional_expression THEN scalar_expression
  final public void when_clause() throws ParseException {
    trace_call("when_clause");
    try {
/*@bgen(jjtree) WhenClause */
  ASTWhenClause jjtn000 = new ASTWhenClause(JJTWHENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(WHEN);
        conditional_expression();
        jj_consume_token(THEN);
        scalar_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("when_clause");
    }
}

//   general_case_expression::= CASE when_clause {when_clause}* ELSE scalar_expression END
  final public void general_case_expression() throws ParseException {
    trace_call("general_case_expression");
    try {
/*@bgen(jjtree) GeneralCaseExpression */
  ASTGeneralCaseExpression jjtn000 = new ASTGeneralCaseExpression(JJTGENERALCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        t = jj_consume_token(CASE);
sb.append(t.image);
        when_clause();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WHEN:{
            ;
            break;
            }
          default:
            jj_la1[49] = jj_gen;
            break label_14;
          }
          when_clause();
        }
        t = jj_consume_token(ELSE);
sb.append(t.image);
        scalar_expression();
        t = jj_consume_token(END);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("general_case_expression");
    }
}

//   case_expression ::=
//      general_case_expression |
//      simple_case_expression |
//      coalesce_expression |
//      nullif_expression
  final public void case_expression() throws ParseException {
    trace_call("case_expression");
    try {
/*@bgen(jjtree) CaseExpression */
  ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_28(2)) {
          general_case_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:{
            simple_case_expression();
            break;
            }
          case COALESCE:{
            coalesce_expression();
            break;
            }
          case NULLIF:{
            nullif_expression();
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("case_expression");
    }
}

// entity_type_expression ::= type_discriminator | entity_type_literal | input_parameter
  final public void entity_type_expression() throws ParseException {
    trace_call("entity_type_expression");
    try {
/*@bgen(jjtree) EntityTypeExpression */
  ASTEntityTypeExpression jjtn000 = new ASTEntityTypeExpression(JJTENTITYTYPEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
      try {
        if (jj_2_29(2)) {
          type_discriminator();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
            break;
            }
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("entity_type_expression");
    }
}

// simple_entity_expression ::= identification_variable | input_parameter
  final public String simple_entity_expression() throws ParseException {
    trace_call("simple_entity_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        t = jj_consume_token(NAME);
sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      case INPUT_PARAMETER:{
        t = jj_consume_token(INPUT_PARAMETER);
sb.append(" ");
      sb.append(t.image);
{if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("simple_entity_expression");
    }
}

// entity_expression ::= single_valued_object_path_expression | simple_entity_expression
  final public String entity_expression() throws ParseException {
    trace_call("entity_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      if (jj_2_30(2)) {
        single_valued_object_path_expression();
{if ("" != null) return sb.toString();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:
        case INPUT_PARAMETER:{
          s = simple_entity_expression();
sb.append(s);
{if ("" != null) return sb.toString();}
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("entity_expression");
    }
}

// enum_expression ::=
//    state_valued_path_expression |
//    enum_literal |
//    input_parameter |
//    case_expression |
//    (subquery)
  final public void enum_expression() throws ParseException {
    trace_call("enum_expression");
    try {
/*@bgen(jjtree) EnumExpression */
  ASTEnumExpression jjtn000 = new ASTEnumExpression(JJTENUMEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_31(2)) {
          state_valued_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(t.image);
            break;
            }
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(t.image);
            break;
            }
          case CASE:
          case COALESCE:
          case NULLIF:{
            case_expression();
            break;
            }
          case OPEN_BRACKET:{
            jj_consume_token(OPEN_BRACKET);
            subquery();
            jj_consume_token(CLOSE_BRACKET);
            break;
            }
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("enum_expression");
    }
}

// boolean_literal ::= <TRUE> | <FALSE>
  final public Boolean boolean_literal() throws ParseException {
    trace_call("boolean_literal");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return Boolean.TRUE;}
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return Boolean.FALSE;}
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("boolean_literal");
    }
}

// boolean_expression ::=
//    state_valued_path_expression |
//    boolean_literal |
//    input_parameter |
//    case_expression |
//    function_invocation |
//    (subquery)
  final public  void boolean_expression() throws ParseException {
    trace_call("boolean_expression");
    try {
/*@bgen(jjtree) BooleanExpression */
  ASTBooleanExpression jjtn000 = new ASTBooleanExpression(JJTBOOLEANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  Boolean booleanValue;
      try {
        if (jj_2_32(2)) {
          state_valued_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FALSE:
          case TRUE:{
            booleanValue = boolean_literal();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setBooleanValue(booleanValue);
            break;
            }
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
            break;
            }
          case CASE:
          case COALESCE:
          case NULLIF:{
            case_expression();
            break;
            }
          case FUNCTION:{
            s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
            break;
            }
          case OPEN_BRACKET:{
            jj_consume_token(OPEN_BRACKET);
            subquery();
            jj_consume_token(CLOSE_BRACKET);
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("boolean_expression");
    }
}

// datetime_expression ::=
//    state_valued_path_expression |
//    input_parameter |
//    functions_returning_datetime |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    date_time_timestamp_literal |
//    (subquery)
  final public void datetime_expression() throws ParseException {
    trace_call("datetime_expression");
    try {
/*@bgen(jjtree) DatetimeExpression */
  ASTDatetimeExpression jjtn000 = new ASTDatetimeExpression(JJTDATETIMEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
  org.minijpa.jdbc.db.SqlFunction sqlFunction;
      try {
        if (jj_2_33(2)) {
          state_valued_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
            break;
            }
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:{
            sqlFunction = functions_returning_datetime();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setSqlFunction(sqlFunction);
            break;
            }
          default:
            jj_la1[57] = jj_gen;
            if (jj_2_34(3)) {
              aggregate_expression();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CASE:
              case COALESCE:
              case NULLIF:{
                case_expression();
                break;
                }
              case FUNCTION:{
                s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
                break;
                }
              case NAME:{
                t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(t.image);
                break;
                }
              case OPEN_BRACKET:{
                jj_consume_token(OPEN_BRACKET);
                subquery();
                jj_consume_token(CLOSE_BRACKET);
                break;
                }
              default:
                jj_la1[58] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("datetime_expression");
    }
}

// string_expression ::=
//    state_valued_path_expression |
//    string_literal |
//    input_parameter |
//    functions_returning_strings |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    (subquery)
  final public void string_expression() throws ParseException {
    trace_call("string_expression");
    try {
/*@bgen(jjtree) StringExpression */
  ASTStringExpression jjtn000 = new ASTStringExpression(JJTSTRINGEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_35(2147483647)) {
          jj_consume_token(OPEN_BRACKET);
          subquery();
          jj_consume_token(CLOSE_BRACKET);
        } else if (jj_2_36(3)) {
          state_valued_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING_LITERAL:{
            t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setStringLiteral(t.image);
            break;
            }
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
            break;
            }
          case CONCAT:
          case LOWER:
          case SUBSTRING:
          case TRIM:
          case UPPER:{
            s = functions_returning_strings();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
            break;
            }
          default:
            jj_la1[59] = jj_gen;
            if (jj_2_37(3)) {
              aggregate_expression();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CASE:
              case COALESCE:
              case NULLIF:{
                case_expression();
                break;
                }
              case FUNCTION:{
                s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
                break;
                }
              default:
                jj_la1[60] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("string_expression");
    }
}

// arithmetic_primary ::=
//    state_valued_path_expression |
//    numeric_literal |
//    (arithmetic_expression) |
//    input_parameter |
//    functions_returning_numerics |
//    aggregate_expression |
//    case_expression |
//    function_invocation |
//    (subquery)
  final public void arithmetic_primary() throws ParseException {
    trace_call("arithmetic_primary");
    try {
/*@bgen(jjtree) ArithmeticPrimary */
  ASTArithmeticPrimary jjtn000 = new ASTArithmeticPrimary(JJTARITHMETICPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_38(2147483647)) {
          jj_consume_token(OPEN_BRACKET);
          subquery();
          jj_consume_token(CLOSE_BRACKET);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NUMERIC_LITERAL:{
            t = jj_consume_token(NUMERIC_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setResult(t.image);
            break;
            }
          default:
            jj_la1[61] = jj_gen;
            if (jj_2_39(3)) {
              state_valued_path_expression();
            } else if (jj_2_40(2)) {
              t = jj_consume_token(OPEN_BRACKET);
sb.append(t.image);
              arithmetic_expression();
              t = jj_consume_token(CLOSE_BRACKET);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(t.image);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case INPUT_PARAMETER:{
                t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setInputParameter(t.image);
                break;
                }
              case ABS:
              case INDEX:
              case LENGTH:
              case LOCATE:
              case MOD:
              case SIZE:
              case SQRT:{
                s = functions_returning_numerics();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
                break;
                }
              default:
                jj_la1[62] = jj_gen;
                if (jj_2_41(3)) {
                  aggregate_expression();
                } else {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case CASE:
                  case COALESCE:
                  case NULLIF:{
                    case_expression();
                    break;
                    }
                  case FUNCTION:{
                    s = function_invocation();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
                    break;
                    }
                  default:
                    jj_la1[63] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("arithmetic_primary");
    }
}

// arithmetic_factor ::= [{+ | -}] arithmetic_primary
  final public void arithmetic_factor() throws ParseException {
    trace_call("arithmetic_factor");
    try {
/*@bgen(jjtree) ArithmeticFactor */
  ASTArithmeticFactor jjtn000 = new ASTArithmeticFactor(JJTARITHMETICFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 91:
        case 92:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 91:{
            jj_consume_token(91);
jjtn000.setSign("+");
            break;
            }
          case 92:{
            jj_consume_token(92);
jjtn000.setSign("-");
            break;
            }
          default:
            jj_la1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        arithmetic_primary();
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("arithmetic_factor");
    }
}

// arithmetic_term ::= arithmetic_factor | arithmetic_term {* | /} arithmetic_factor
// LEFT RECURSION
// SOLVED AS:
// arithmetic_term ::= arithmetic_factor {{* | /} arithmetic_factor}*
  final public void arithmetic_term() throws ParseException {
    trace_call("arithmetic_term");
    try {
/*@bgen(jjtree) ArithmeticTerm */
  ASTArithmeticTerm jjtn000 = new ASTArithmeticTerm(JJTARITHMETICTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        arithmetic_factor();
        label_15:
        while (true) {
          if (jj_2_42(2)) {
            ;
          } else {
            break label_15;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 93:{
            jj_consume_token(93);
jjtn000.addSign("*");
            break;
            }
          case 94:{
            jj_consume_token(94);
jjtn000.addSign("/");
            break;
            }
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          arithmetic_factor();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("arithmetic_term");
    }
}

// arithmetic_expression ::= arithmetic_term | arithmetic_expression {+ | -} arithmetic_term
// LEFT RECURSION
// SOLVED AS:
// arithmetic_expression ::= arithmetic_term {{+ | -} arithmetic_term}*
  final public void arithmetic_expression() throws ParseException {
    trace_call("arithmetic_expression");
    try {
/*@bgen(jjtree) ArithmeticExpression */
  ASTArithmeticExpression jjtn000 = new ASTArithmeticExpression(JJTARITHMETICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        arithmetic_term();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 91:
          case 92:{
            ;
            break;
            }
          default:
            jj_la1[67] = jj_gen;
            break label_16;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 91:{
            jj_consume_token(91);
jjtn000.addSign("+");
            break;
            }
          case 92:{
            jj_consume_token(92);
jjtn000.addSign("-");
            break;
            }
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          arithmetic_term();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("arithmetic_expression");
    }
}

// all_or_any_expression ::= {ALL | ANY | SOME} (subquery)
  final public void all_or_any_expression() throws ParseException {
    trace_call("all_or_any_expression");
    try {
/*@bgen(jjtree) AllOrAnyExpression */
  ASTAllOrAnyExpression jjtn000 = new ASTAllOrAnyExpression(JJTALLORANYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALL:{
          t = jj_consume_token(ALL);
sb.append(" ");
      sb.append(t.image);
          break;
          }
        case ANY:{
          t = jj_consume_token(ANY);
sb.append(" ");
      sb.append(t.image);
          break;
          }
        case SOME:{
          t = jj_consume_token(SOME);
sb.append(" ");
      sb.append(t.image);
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(OPEN_BRACKET);
        subquery();
        jj_consume_token(CLOSE_BRACKET);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("all_or_any_expression");
    }
}

  final public String comparison_operator() throws ParseException {
    trace_call("comparison_operator");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:{
        t = jj_consume_token(GT);
{if ("" != null) return t.image;}
        break;
        }
      case GE:{
        t = jj_consume_token(GE);
{if ("" != null) return t.image;}
        break;
        }
      case LT:{
        t = jj_consume_token(LT);
{if ("" != null) return t.image;}
        break;
        }
      case LE:{
        t = jj_consume_token(LE);
{if ("" != null) return t.image;}
        break;
        }
      case NE:{
        t = jj_consume_token(NE);
{if ("" != null) return t.image;}
        break;
        }
      case EQ:{
        t = jj_consume_token(EQ);
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comparison_operator");
    }
}

// string_expression_comparison ::= string_expression comparison_operator {string_expression | all_or_any_expression}
  final public void string_expression_comparison() throws ParseException {
    trace_call("string_expression_comparison");
    try {
/*@bgen(jjtree) StringExpressionComparison */
  ASTStringExpressionComparison jjtn000 = new ASTStringExpressionComparison(JJTSTRINGEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
      try {
        string_expression();
        s = comparison_operator();
jjtn000.setComparisonOperator(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AVG:
        case CASE:
        case COALESCE:
        case CONCAT:
        case COUNT:
        case FUNCTION:
        case KEY:
        case LOWER:
        case MIN:
        case MAX:
        case NULLIF:
        case SUBSTRING:
        case SUM:
        case TREAT:
        case TRIM:
        case UPPER:
        case VALUE:
        case NAME:
        case OPEN_BRACKET:
        case STRING_LITERAL:
        case INPUT_PARAMETER:{
          string_expression();
          break;
          }
        case ALL:
        case ANY:
        case SOME:{
          all_or_any_expression();
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("string_expression_comparison");
    }
}

// arithmetic_expression_comparison ::= arithmetic_expression comparison_operator {arithmetic_expression | all_or_any_expression}
  final public void arithmetic_expression_comparison() throws ParseException {
    trace_call("arithmetic_expression_comparison");
    try {
/*@bgen(jjtree) ArithmeticExpressionComparison */
  ASTArithmeticExpressionComparison jjtn000 = new ASTArithmeticExpressionComparison(JJTARITHMETICEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
      try {
        arithmetic_expression();
        s = comparison_operator();
jjtn000.setComparisonOperator(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABS:
        case AVG:
        case CASE:
        case COALESCE:
        case COUNT:
        case FUNCTION:
        case INDEX:
        case KEY:
        case LENGTH:
        case LOCATE:
        case MIN:
        case MAX:
        case MOD:
        case NULLIF:
        case SIZE:
        case SQRT:
        case SUM:
        case TREAT:
        case VALUE:
        case NAME:
        case OPEN_BRACKET:
        case NUMERIC_LITERAL:
        case INPUT_PARAMETER:
        case 91:
        case 92:{
          arithmetic_expression();
          break;
          }
        case ALL:
        case ANY:
        case SOME:{
          all_or_any_expression();
          break;
          }
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("arithmetic_expression_comparison");
    }
}

// boolean_expression_comparison ::= boolean_expression {= | <>} {boolean_expression | all_or_any_expression}
  final public void boolean_expression_comparison() throws ParseException {
    trace_call("boolean_expression_comparison");
    try {
/*@bgen(jjtree) BooleanExpressionComparison */
  ASTBooleanExpressionComparison jjtn000 = new ASTBooleanExpressionComparison(JJTBOOLEANEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder sb=new StringBuilder();
      try {
        boolean_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
jjtn000.setComparisonOperator("=");
          break;
          }
        case NE:{
          jj_consume_token(NE);
jjtn000.setComparisonOperator("<>");
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:
        case COALESCE:
        case FALSE:
        case FUNCTION:
        case KEY:
        case NULLIF:
        case TREAT:
        case TRUE:
        case VALUE:
        case NAME:
        case OPEN_BRACKET:
        case INPUT_PARAMETER:{
          boolean_expression();
          break;
          }
        case ALL:
        case ANY:
        case SOME:{
          all_or_any_expression();
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("boolean_expression_comparison");
    }
}

// datetime_expression_comparison ::= datetime_expression comparison_operator {datetime_expression | all_or_any_expression}
  final public void datetime_expression_comparison() throws ParseException {
    trace_call("datetime_expression_comparison");
    try {
/*@bgen(jjtree) DatetimeExpressionComparison */
  ASTDatetimeExpressionComparison jjtn000 = new ASTDatetimeExpressionComparison(JJTDATETIMEEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
      try {
        datetime_expression();
        s = comparison_operator();
jjtn000.setComparisonOperator(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AVG:
        case CASE:
        case COALESCE:
        case COUNT:
        case CURRENT_DATE:
        case CURRENT_TIME:
        case CURRENT_TIMESTAMP:
        case FUNCTION:
        case KEY:
        case MIN:
        case MAX:
        case NULLIF:
        case SUM:
        case TREAT:
        case VALUE:
        case NAME:
        case OPEN_BRACKET:
        case INPUT_PARAMETER:{
          datetime_expression();
          break;
          }
        case ALL:
        case ANY:
        case SOME:{
          all_or_any_expression();
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("datetime_expression_comparison");
    }
}

// entity_type_expression_comparison ::= entity_type_expression {= | <>} entity_type_expression
  final public void entity_type_expression_comparison() throws ParseException {
    trace_call("entity_type_expression_comparison");
    try {
/*@bgen(jjtree) EntityTypeExpressionComparison */
  ASTEntityTypeExpressionComparison jjtn000 = new ASTEntityTypeExpressionComparison(JJTENTITYTYPEEXPRESSIONCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
      try {
        entity_type_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
jjtn000.setComparisonOperator("=");
          break;
          }
        case NE:{
          jj_consume_token(NE);
jjtn000.setComparisonOperator("<>");
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        entity_type_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("entity_type_expression_comparison");
    }
}

// comparison_expression ::=
//    string_expression_comparison |
//    arithmetic_expression_comparison |
//    boolean_expression_comparison |
//    datetime_expression_comparison |
//    enum_expression {= | <>} {enum_expression | all_or_any_expression} |
//    entity_expression {= | <>} {entity_expression | all_or_any_expression} |
//    entity_type_expression_comparison
  final public void comparison_expression() throws ParseException {
    trace_call("comparison_expression");
    try {
/*@bgen(jjtree) ComparisonExpression */
  ASTComparisonExpression jjtn000 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_43(2147483647)) {
          string_expression_comparison();
        } else if (jj_2_44(2147483647)) {
          arithmetic_expression_comparison();
        } else if (jj_2_45(2147483647)) {
          boolean_expression_comparison();
        } else if (jj_2_46(2147483647)) {
          datetime_expression_comparison();
        } else if (jj_2_47(2147483647)) {
          entity_type_expression_comparison();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comparison_expression");
    }
}

// exists_expression ::= [NOT] EXISTS (subquery)
  final public void exists_expression() throws ParseException {
    trace_call("exists_expression");
    try {
/*@bgen(jjtree) ExistsExpression */
  ASTExistsExpression jjtn000 = new ASTExistsExpression(JJTEXISTSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
          break;
          }
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        t = jj_consume_token(EXISTS);
sb.append(" ");
      sb.append(t.image);
        jj_consume_token(OPEN_BRACKET);
        subquery();
        jj_consume_token(CLOSE_BRACKET);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("exists_expression");
    }
}

// entity_or_value_expression ::=
//    single_valued_object_path_expression |
//    state_field_path_expression |
//    simple_entity_or_value_expression
//
// simple_entity_or_value_expression ::=
//    identification_variable |
//    input_parameter |
//    literal
  final public String entity_or_value_expression() throws ParseException {
    trace_call("entity_or_value_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      if (jj_2_48(3)) {
        single_valued_object_path_expression();
{if ("" != null) return sb.toString();}
      } else if (jj_2_49(2)) {
        state_field_path_expression();
{if ("" != null) return sb.toString();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          t = jj_consume_token(NAME);
sb.append(" ");
      sb.append(t.image);
      {if ("" != null) return sb.toString();}
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
sb.append(" ");
      sb.append(t.image);
      {if ("" != null) return sb.toString();}
          break;
          }
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("entity_or_value_expression");
    }
}

// collection_valued_path_expression ::= general_subpath.{collection_valued_field}
  final public void collection_valued_path_expression() throws ParseException {
    trace_call("collection_valued_path_expression");
    try {
/*@bgen(jjtree) CollectionValuedPathExpression */
  ASTCollectionValuedPathExpression jjtn000 = new ASTCollectionValuedPathExpression(JJTCOLLECTIONVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        general_subpath();
        jj_consume_token(DOT);
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setCollectionValuedField(t.image);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("collection_valued_path_expression");
    }
}

//  collection_member_expression ::= entity_or_value_expression [NOT] MEMBER [OF] collection_valued_path_expression
  final public String collection_member_expression() throws ParseException {
    trace_call("collection_member_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      s = entity_or_value_expression();
sb.append(" ");
      sb.append(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      t = jj_consume_token(MEMBER);
sb.append(" ");
      sb.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OF:{
        t = jj_consume_token(OF);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      collection_valued_path_expression();
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("collection_member_expression");
    }
}

// empty_collection_comparison_expression ::= collection_valued_path_expression IS [NOT] EMPTY
  final public String empty_collection_comparison_expression() throws ParseException {
    trace_call("empty_collection_comparison_expression");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      collection_valued_path_expression();
      t = jj_consume_token(IS);
sb.append(" ");
      sb.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        t = jj_consume_token(NOT);
sb.append(" ");
      sb.append(t.image);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      t = jj_consume_token(EMPTY);
sb.append(" ");
      sb.append(t.image);
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("empty_collection_comparison_expression");
    }
}

// null_comparison_expression ::= {single_valued_path_expression | input_parameter} IS [NOT] NULL
  final public void null_comparison_expression() throws ParseException {
    trace_call("null_comparison_expression");
    try {
/*@bgen(jjtree) NullComparisonExpression */
  ASTNullComparisonExpression jjtn000 = new ASTNullComparisonExpression(JJTNULLCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY:
        case KEY:
        case TREAT:
        case VALUE:
        case NAME:{
          single_valued_path_expression();
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtn000.setInputParameter(t.image);
          break;
          }
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
jjtn000.setNot(true);
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        jj_consume_token(NULL);
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("null_comparison_expression");
    }
}

// like_expression ::= string_expression [NOT] LIKE pattern_value [ESCAPE escape_character]
  final public void like_expression() throws ParseException {
    trace_call("like_expression");
    try {
/*@bgen(jjtree) LikeExpression */
  ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        string_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
jjtn000.setNot(true);
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        jj_consume_token(LIKE);
        t = jj_consume_token(STRING_LITERAL);
jjtn000.setPatternValue(t.image);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ESCAPE:{
          jj_consume_token(ESCAPE);
          t = jj_consume_token(STRING_LITERAL);
sb.append(" ");
       sb.append(t.image);
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("like_expression");
    }
}

// in_item ::= literal | single_valued_input_parameter
  final public void in_item() throws ParseException {
    trace_call("in_item");
    try {
/*@bgen(jjtree) InItem */
  ASTInItem jjtn000 = new ASTInItem(JJTINITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING_LITERAL:{
          t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setLiteral(t.image);
          break;
          }
        case INPUT_PARAMETER:{
          t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setInputParameter(t.image);
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("in_item");
    }
}

// in_expression ::= {state_valued_path_expression | type_discriminator} [NOT] IN
//        {(in_item{, in_item}*) | (subquery) | collection_valued_input_parameter}
  final public void in_expression() throws ParseException {
    trace_call("in_expression");
    try {
/*@bgen(jjtree) InExpression */
  ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_50(3)) {
          state_valued_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE:{
            type_discriminator();
            break;
            }
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
jjtn000.setNot(true);
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          ;
        }
        jj_consume_token(IN);
        if (jj_2_51(2)) {
          jj_consume_token(OPEN_BRACKET);
          in_item();
          label_17:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[89] = jj_gen;
              break label_17;
            }
            jj_consume_token(COMMA);
            in_item();
          }
          jj_consume_token(CLOSE_BRACKET);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_BRACKET:{
            jj_consume_token(OPEN_BRACKET);
            subquery();
            jj_consume_token(CLOSE_BRACKET);
            break;
            }
          case INPUT_PARAMETER:{
            t = jj_consume_token(INPUT_PARAMETER);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setInputParameter(t.image);
            break;
            }
          default:
            jj_la1[90] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("in_expression");
    }
}

// between_expression ::=
//    arithmetic_between_expression |
//    string_between_expression |
//    datetime_between_expression
  final public void between_expression() throws ParseException {
    trace_call("between_expression");
    try {
/*@bgen(jjtree) BetweenExpression */
  ASTBetweenExpression jjtn000 = new ASTBetweenExpression(JJTBETWEENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_52(2147483647)) {
          arithmetic_between_expression();
        } else if (jj_2_53(2147483647)) {
          string_between_expression();
        } else if (jj_2_54(2147483647)) {
          datetime_between_expression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("between_expression");
    }
}

// arithmetic_between_expression ::= arithmetic_expression [NOT] BETWEEN arithmetic_expression AND arithmetic_expression
  final public void arithmetic_between_expression() throws ParseException {
    trace_call("arithmetic_between_expression");
    try {
/*@bgen(jjtree) ArithmeticBetweenExpression */
  ASTArithmeticBetweenExpression jjtn000 = new ASTArithmeticBetweenExpression(JJTARITHMETICBETWEENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        arithmetic_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
jjtn000.setNot(true);
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        jj_consume_token(BETWEEN);
        arithmetic_expression();
        jj_consume_token(AND);
        arithmetic_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("arithmetic_between_expression");
    }
}

// string_between_expression ::= string_expression [NOT] BETWEEN string_expression AND string_expression
  final public void string_between_expression() throws ParseException {
    trace_call("string_between_expression");
    try {
/*@bgen(jjtree) StringBetweenExpression */
  ASTStringBetweenExpression jjtn000 = new ASTStringBetweenExpression(JJTSTRINGBETWEENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        string_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
jjtn000.setNot(true);
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        jj_consume_token(BETWEEN);
        string_expression();
        jj_consume_token(AND);
        string_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("string_between_expression");
    }
}

// datetime_between_expression ::= datetime_expression [NOT] BETWEEN datetime_expression AND datetime_expression
  final public void datetime_between_expression() throws ParseException {
    trace_call("datetime_between_expression");
    try {
/*@bgen(jjtree) DatetimeBetweenExpression */
  ASTDatetimeBetweenExpression jjtn000 = new ASTDatetimeBetweenExpression(JJTDATETIMEBETWEENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        datetime_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
jjtn000.setNot(true);
          break;
          }
        default:
          jj_la1[93] = jj_gen;
          ;
        }
        jj_consume_token(BETWEEN);
        datetime_expression();
        jj_consume_token(AND);
        datetime_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("datetime_between_expression");
    }
}

// simple_cond_expression ::=
//    comparison_expression |
//    between_expression |
//      in_expression |
//    like_expression |
//    null_comparison_expression |
//    empty_collection_comparison_expression |
//    collection_member_expression |
//    exists_expression
  final public void simple_cond_expression() throws ParseException {
    trace_call("simple_cond_expression");
    try {
/*@bgen(jjtree) SimpleCondExpression */
  ASTSimpleCondExpression jjtn000 = new ASTSimpleCondExpression(JJTSIMPLECONDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_55(2147483647)) {
          comparison_expression();
        } else if (jj_2_56(2147483647)) {
          between_expression();
        } else if (jj_2_57(2147483647)) {
          in_expression();
        } else if (jj_2_58(2147483647)) {
          like_expression();
        } else if (jj_2_59(2147483647)) {
          null_comparison_expression();
        } else if (jj_2_60(2147483647)) {
          s = empty_collection_comparison_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
        } else if (jj_2_61(2147483647)) {
          s = collection_member_expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
sb.append(" ");
      sb.append(s);
        } else if (jj_2_62(2147483647)) {
          exists_expression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("simple_cond_expression");
    }
}

// conditional_primary ::= simple_cond_expression | (conditional_expression)
  final public void conditional_primary() throws ParseException {
    trace_call("conditional_primary");
    try {
/*@bgen(jjtree) ConditionalPrimary */
  ASTConditionalPrimary jjtn000 = new ASTConditionalPrimary(JJTCONDITIONALPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        if (jj_2_63(3)) {
          simple_cond_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_BRACKET:{
            jj_consume_token(OPEN_BRACKET);
            conditional_expression();
            jj_consume_token(CLOSE_BRACKET);
            break;
            }
          default:
            jj_la1[94] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("conditional_primary");
    }
}

// conditional_factor ::= [NOT] conditional_primary
  final public void conditional_factor() throws ParseException {
    trace_call("conditional_factor");
    try {
/*@bgen(jjtree) ConditionalFactor */
  ASTConditionalFactor jjtn000 = new ASTConditionalFactor(JJTCONDITIONALFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_64(2)) {
          jj_consume_token(NOT);
jjtn000.setNot(true);
        } else {
          ;
        }
        conditional_primary();
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("conditional_factor");
    }
}

// conditional_term ::= conditional_factor | conditional_term AND conditional_factor
// LEFT RECURSION
// SOLVED AS:
// conditional_term ::= conditional_factor {AND conditional_factor}*
  final public void conditional_term() throws ParseException {
    trace_call("conditional_term");
    try {
/*@bgen(jjtree) ConditionalTerm */
  ASTConditionalTerm jjtn000 = new ASTConditionalTerm(JJTCONDITIONALTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        conditional_factor();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:{
            ;
            break;
            }
          default:
            jj_la1[95] = jj_gen;
            break label_18;
          }
          jj_consume_token(AND);
          conditional_factor();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("conditional_term");
    }
}

// conditional_expression ::= conditional_term | conditional_expression OR conditional_term
// LEFT RECURSION
// SOLVED AS:
// conditional_expression ::= conditional_term {OR conditional_term}*
  final public void conditional_expression() throws ParseException {
    trace_call("conditional_expression");
    try {
/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        conditional_term();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OR:{
            ;
            break;
            }
          default:
            jj_la1[96] = jj_gen;
            break label_19;
          }
          jj_consume_token(OR);
          conditional_term();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("conditional_expression");
    }
}

// where_clause ::= WHERE conditional_expression
  final public void where_clause() throws ParseException {
    trace_call("where_clause");
    try {
/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHERE);
        conditional_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("where_clause");
    }
}

//   single_valued_path_expression ::=
//      qualified_identification_variable |
//      TREAT(qualified_identification_variable AS subtype) |
//      state_field_path_expression |
//      single_valued_object_path_expression
//
//  MODIFIED as: ('state_field_path_expression' and 'single_valued_object_path_expression' could be the same from a syntactic point of view)
//
//   single_valued_path_expression ::=
//      qualified_identification_variable |
//      TREAT(qualified_identification_variable AS subtype) |
//      state_field_path_expression |
  final public void single_valued_path_expression() throws ParseException {
    trace_call("single_valued_path_expression");
    try {
/*@bgen(jjtree) SingleValuedPathExpression */
  ASTSingleValuedPathExpression jjtn000 = new ASTSingleValuedPathExpression(JJTSINGLEVALUEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_65(3)) {
          state_field_path_expression();
        } else if (jj_2_66(3)) {
          jj_consume_token(TREAT);
          jj_consume_token(OPEN_BRACKET);
          qualified_identification_variable();
          jj_consume_token(AS);
          s = subtype();
jjtn000.setSubtype(s);
          jj_consume_token(CLOSE_BRACKET);
        } else if (jj_2_67(3)) {
          qualified_identification_variable();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("single_valued_path_expression");
    }
}

// simple_select_expression::=
//    single_valued_path_expression |
//    aggregate_expression |
//    scalar_expression |
//    identification_variable
  final public void simple_select_expression() throws ParseException {
    trace_call("simple_select_expression");
    try {
/*@bgen(jjtree) SimpleSelectExpression */
  ASTSimpleSelectExpression jjtn000 = new ASTSimpleSelectExpression(JJTSIMPLESELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        if (jj_2_68(2147483647)) {
          single_valued_path_expression();
        } else if (jj_2_69(2)) {
          aggregate_expression();
        } else if (jj_2_70(3)) {
          scalar_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
            break;
            }
          default:
            jj_la1[97] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("simple_select_expression");
    }
}

// simple_select_clause ::= SELECT [DISTINCT] simple_select_expression
  final public void simple_select_clause() throws ParseException {
    trace_call("simple_select_clause");
    try {
/*@bgen(jjtree) SimpleSelectClause */
  ASTSimpleSelectClause jjtn000 = new ASTSimpleSelectClause(JJTSIMPLESELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(SELECT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DISTINCT:{
          jj_consume_token(DISTINCT);
jjtn000.setDistinct(true);
          break;
          }
        default:
          jj_la1[98] = jj_gen;
          ;
        }
        simple_select_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("simple_select_clause");
    }
}

// derived_collection_member_declaration ::= IN
//     superquery_identification_variable.{single_valued_object_field.}*collection_valued_field
  final public void derived_collection_member_declaration() throws ParseException {
    trace_call("derived_collection_member_declaration");
    try {
/*@bgen(jjtree) DerivedCollectionMemberDeclaration */
  ASTDerivedCollectionMemberDeclaration jjtn000 = new ASTDerivedCollectionMemberDeclaration(JJTDERIVEDCOLLECTIONMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(IN);
        t = jj_consume_token(NAME);
jjtn000.setIdentificationVariable(t.image);
        jj_consume_token(DOT);
        label_20:
        while (true) {
          if (jj_2_71(2)) {
            ;
          } else {
            break label_20;
          }
          t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
          jj_consume_token(DOT);
        }
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setCollectionValuedField(t.image);
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("derived_collection_member_declaration");
    }
}

// treated_derived_path ::= TREAT(general_derived_path AS subtype)
  final public void treated_derived_path() throws ParseException {
    trace_call("treated_derived_path");
    try {
/*@bgen(jjtree) TreatedDerivedPath */
  ASTTreatedDerivedPath jjtn000 = new ASTTreatedDerivedPath(JJTTREATEDDERIVEDPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(TREAT);
        jj_consume_token(OPEN_BRACKET);
        general_derived_path();
        jj_consume_token(AS);
        s = subtype();
sb.append(" ");
      sb.append(s);
        jj_consume_token(CLOSE_BRACKET);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("treated_derived_path");
    }
}

// simple_derived_path ::= superquery_identification_variable{.single_valued_object_field}*
  final public void simple_derived_path() throws ParseException {
    trace_call("simple_derived_path");
    try {
/*@bgen(jjtree) SimpleDerivedPath */
  ASTSimpleDerivedPath jjtn000 = new ASTSimpleDerivedPath(JJTSIMPLEDERIVEDPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        t = jj_consume_token(NAME);
jjtn000.setIdentificationVariable(t.image);
        label_21:
        while (true) {
          if (jj_2_72(2)) {
            ;
          } else {
            break label_21;
          }
          jj_consume_token(DOT);
          t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
        }
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("simple_derived_path");
    }
}

// general_derived_path ::= simple_derived_path | treated_derived_path{.single_valued_object_field}*
  final public void general_derived_path() throws ParseException {
    trace_call("general_derived_path");
    try {
/*@bgen(jjtree) GeneralDerivedPath */
  ASTGeneralDerivedPath jjtn000 = new ASTGeneralDerivedPath(JJTGENERALDERIVEDPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          simple_derived_path();
          break;
          }
        case TREAT:{
          treated_derived_path();
          label_22:
          while (true) {
            if (jj_2_73(2)) {
              ;
            } else {
              break label_22;
            }
            jj_consume_token(DOT);
            t = jj_consume_token(NAME);
jjtn000.addPath(t.image);
          }
          break;
          }
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("general_derived_path");
    }
}

// derived_path_expression ::=
//    general_derived_path.single_valued_object_field |
//    general_derived_path.collection_valued_field
  final public void derived_path_expression() throws ParseException {
    trace_call("derived_path_expression");
    try {
/*@bgen(jjtree) DerivedPathExpression */
  ASTDerivedPathExpression jjtn000 = new ASTDerivedPathExpression(JJTDERIVEDPATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        general_derived_path();
        jj_consume_token(DOT);
        t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setField(t.image);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("derived_path_expression");
    }
}

// subselect_identification_variable_declaration ::=
//    identification_variable_declaration |
//    derived_path_expression [AS] identification_variable {join}* |
//    derived_collection_member_declaration
  final public void subselect_identification_variable_declaration() throws ParseException {
    trace_call("subselect_identification_variable_declaration");
    try {
/*@bgen(jjtree) SubselectIdentificationVariableDeclaration */
  ASTSubselectIdentificationVariableDeclaration jjtn000 = new ASTSubselectIdentificationVariableDeclaration(JJTSUBSELECTIDENTIFICATIONVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
      try {
        if (jj_2_74(2147483647)) {
          identification_variable_declaration();
        } else if (jj_2_75(2)) {
          general_derived_path();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AS:{
            jj_consume_token(AS);
            break;
            }
          default:
            jj_la1[100] = jj_gen;
            ;
          }
          t = jj_consume_token(NAME);
jjtn000.setEntityAlias(t.image);
          label_23:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INNER:
            case JOIN:
            case LEFT:{
              ;
              break;
              }
            default:
              jj_la1[101] = jj_gen;
              break label_23;
            }
            join();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:{
            derived_collection_member_declaration();
            break;
            }
          default:
            jj_la1[102] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("subselect_identification_variable_declaration");
    }
}

// subquery_from_clause ::=
//    FROM subselect_identification_variable_declaration {, subselect_identification_variable_declaration |
//           collection_member_declaration}*
  final public void subquery_from_clause() throws ParseException {
    trace_call("subquery_from_clause");
    try {
/*@bgen(jjtree) SubqueryFromClause */
  ASTSubqueryFromClause jjtn000 = new ASTSubqueryFromClause(JJTSUBQUERYFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(FROM);
        subselect_identification_variable_declaration();
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[103] = jj_gen;
            break label_24;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            jj_consume_token(COMMA);
            subselect_identification_variable_declaration();
            break;
            }
          case IN:{
            collection_member_declaration();
            break;
            }
          default:
            jj_la1[104] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("subquery_from_clause");
    }
}

//   collection_member_declaration ::=
//      IN (collection_valued_path_expression) [AS] identification_variable
  final public void collection_member_declaration() throws ParseException {
    trace_call("collection_member_declaration");
    try {
Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      jj_consume_token(IN);
      jj_consume_token(OPEN_BRACKET);
      collection_valued_path_expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      t = jj_consume_token(NAME);
sb.append(" ");
     sb.append(t.image);
      jj_consume_token(CLOSE_BRACKET);
    } finally {
      trace_return("collection_member_declaration");
    }
}

// subquery ::= simple_select_clause subquery_from_clause [where_clause]
//    [groupby_clause] [having_clause]
  final public void subquery() throws ParseException {
    trace_call("subquery");
    try {
/*@bgen(jjtree) Subquery */
  ASTSubquery jjtn000 = new ASTSubquery(JJTSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        simple_select_clause();
        subquery_from_clause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHERE:{
          where_clause();
          break;
          }
        default:
          jj_la1[106] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GROUP:{
          groupby_clause();
          break;
          }
        default:
          jj_la1[107] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HAVING:{
          having_clause();
          break;
          }
        default:
          jj_la1[108] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("subquery");
    }
}

// orderby_item ::= { state_field_path_expression | general_identification_variable | result_variable } [ASC | DESC]
  final public void orderby_item() throws ParseException {
    trace_call("orderby_item");
    try {
/*@bgen(jjtree) OrderByItem */
  ASTOrderByItem jjtn000 = new ASTOrderByItem(JJTORDERBYITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        if (jj_2_76(3)) {
          state_field_path_expression();
        } else if (jj_2_77(2)) {
          general_identification_variable();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            t = jj_consume_token(NAME);
jjtn000.setResultVariable(t.image);
            break;
            }
          default:
            jj_la1[109] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASC:
        case DESC:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASC:{
            jj_consume_token(ASC);
jjtn000.setOrderByType(org.minijpa.jdbc.model.OrderByType.ASC);
            break;
            }
          case DESC:{
            jj_consume_token(DESC);
jjtn000.setOrderByType(org.minijpa.jdbc.model.OrderByType.DESC);
            break;
            }
          default:
            jj_la1[110] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("orderby_item");
    }
}

// orderby_clause ::= ORDER BY orderby_item {, orderby_item}*
  final public void orderby_clause() throws ParseException {
    trace_call("orderby_clause");
    try {
/*@bgen(jjtree) OrderByClause */
  ASTOrderByClause jjtn000 = new ASTOrderByClause(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ORDER);
        jj_consume_token(BY);
        orderby_item();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[112] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          orderby_item();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("orderby_clause");
    }
}

// having_clause ::= HAVING conditional_expression
  final public void having_clause() throws ParseException {
    trace_call("having_clause");
    try {
/*@bgen(jjtree) HavingClause */
  ASTHavingClause jjtn000 = new ASTHavingClause(JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(HAVING);
        conditional_expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("having_clause");
    }
}

// groupby_item ::= single_valued_path_expression | identification_variable
  final public void groupby_item() throws ParseException {
    trace_call("groupby_item");
    try {
/*@bgen(jjtree) GroupByItem */
  ASTGroupByItem jjtn000 = new ASTGroupByItem(JJTGROUPBYITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        if (jj_2_78(2)) {
          single_valued_path_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            t = jj_consume_token(NAME);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdentificationVariable(t.image);
            break;
            }
          default:
            jj_la1[113] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("groupby_item");
    }
}

// groupby_clause ::= GROUP BY groupby_item {, groupby_item}*
  final public void groupby_clause() throws ParseException {
    trace_call("groupby_clause");
    try {
/*@bgen(jjtree) GroupByClause */
  ASTGroupByClause jjtn000 = new ASTGroupByClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuilder sb=new StringBuilder();
  String s;
      try {
        jj_consume_token(GROUP);
        jj_consume_token(BY);
        groupby_item();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[114] = jj_gen;
            break label_26;
          }
          jj_consume_token(COMMA);
          groupby_item();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("groupby_clause");
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_65()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_66()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_67()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_68()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_69()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_70()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_71()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_72()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_73()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_74()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_75()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_76()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_77()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_78()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_3R_comparison_expression_2296_3_131()
 {
    if (jj_3R_boolean_expression_comparison_2212_3_53()) return true;
    return false;
  }

  private boolean jj_3R_type_discriminator_1528_3_47()
 {
    if (!jj_rescan) trace_call("type_discriminator(LOOKING AHEAD...)");
    if (jj_scan_token(TYPE)) { if (!jj_rescan) trace_return("type_discriminator(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("type_discriminator(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_type_discriminator_1534_4_239()) {
    jj_scanpos = xsp;
    if (jj_3R_type_discriminator_1536_4_240()) { if (!jj_rescan) trace_return("type_discriminator(LOOKAHEAD FAILED)"); return true; }
    }
    }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("type_discriminator(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("type_discriminator(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_75()
 {
    if (jj_3R_general_derived_path_3014_3_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_subselect_identification_variable_declaration_3069_4_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_map_field_identification_variable_760_2_222()
 {
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2292_3_130()
 {
    if (jj_3R_arithmetic_expression_comparison_2192_3_52()) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3057_3_264()
 {
    if (jj_3R_identification_variable_declaration_706_4_35()) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3057_3_243()
 {
    if (!jj_rescan) trace_call("subselect_identification_variable_declaration(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subselect_identification_variable_declaration_3057_3_264()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3R_subselect_identification_variable_declaration_3073_3_265()) { if (!jj_rescan) trace_return("subselect_identification_variable_declaration(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("subselect_identification_variable_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_comparison_expression_2288_3_60()
 {
    if (!jj_rescan) trace_call("comparison_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparison_expression_2288_3_129()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2292_3_130()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2296_3_131()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2300_3_132()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_expression_2338_3_133()) { if (!jj_rescan) trace_return("comparison_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("comparison_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_comparison_expression_2288_3_129()
 {
    if (jj_3R_string_expression_comparison_2172_3_51()) return true;
    return false;
  }

  private boolean jj_3R_map_field_identification_variable_747_2_221()
 {
    if (jj_scan_token(KEY)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_map_field_identification_variable_747_2_175()
 {
    if (!jj_rescan) trace_call("map_field_identification_variable(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_map_field_identification_variable_747_2_221()) {
    jj_scanpos = xsp;
    if (jj_3R_map_field_identification_variable_760_2_222()) { if (!jj_rescan) trace_return("map_field_identification_variable(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("map_field_identification_variable(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_simple_when_clause_1506_3_272()
 {
    if (!jj_rescan) trace_call("simple_when_clause(LOOKING AHEAD...)");
    if (jj_scan_token(WHEN)) { if (!jj_rescan) trace_return("simple_when_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("simple_when_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(THEN)) { if (!jj_rescan) trace_return("simple_when_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("simple_when_clause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("simple_when_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_11()
 {
    if (jj_3R_identification_variable_declaration_706_4_35()) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_comparison_2264_4_123()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_comparison_2259_4_122()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_comparison_2257_3_55()
 {
    if (!jj_rescan) trace_call("entity_type_expression_comparison(LOOKING AHEAD...)");
    if (jj_3R_entity_type_expression_1665_3_121()) { if (!jj_rescan) trace_return("entity_type_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_entity_type_expression_comparison_2259_4_122()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_type_expression_comparison_2264_4_123()) { if (!jj_rescan) trace_return("entity_type_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    }
    if (jj_3R_entity_type_expression_1665_3_121()) { if (!jj_rescan) trace_return("entity_type_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("entity_type_expression_comparison(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_73()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_coalesce_expression_1485_3_285()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_scalar_expression_1411_3_31()) return true;
    return false;
  }

  private boolean jj_3R_general_derived_path_3017_3_165()
 {
    if (jj_3R_treated_derived_path_2970_3_214()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_identification_variable_declaration_711_5_212()
 {
    if (jj_3R_fetch_join_649_3_248()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_comparison_2246_4_120()
 {
    if (jj_3R_all_or_any_expression_2103_3_200()) return true;
    return false;
  }

  private boolean jj_3R_general_derived_path_3014_3_70()
 {
    if (!jj_rescan) trace_call("general_derived_path(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_general_derived_path_3014_3_164()) {
    jj_scanpos = xsp;
    if (jj_3R_general_derived_path_3017_3_165()) { if (!jj_rescan) trace_return("general_derived_path(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("general_derived_path(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_general_derived_path_3014_3_164()
 {
    if (jj_3R_simple_derived_path_2991_3_213()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_comparison_2244_4_119()
 {
    if (jj_3R_datetime_expression_1848_3_43()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_join_627_3_34()) return true;
    return false;
  }

  private boolean jj_3R_identification_variable_declaration_708_5_163()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_identification_variable_declaration_711_5_212()) return true;
    }
    return false;
  }

  private boolean jj_3R_coalesce_expression_1475_3_250()
 {
    if (!jj_rescan) trace_call("coalesce_expression(LOOKING AHEAD...)");
    if (jj_scan_token(COALESCE)) { if (!jj_rescan) trace_return("coalesce_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("coalesce_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("coalesce_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    if (jj_3R_coalesce_expression_1485_3_285()) { if (!jj_rescan) trace_return("coalesce_expression(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_coalesce_expression_1485_3_285()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("coalesce_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("coalesce_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_identification_variable_declaration_706_4_35()
 {
    if (!jj_rescan) trace_call("identification_variable_declaration(LOOKING AHEAD...)");
    if (jj_3R_range_variable_declaration_686_3_79()) { if (!jj_rescan) trace_return("identification_variable_declaration(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_identification_variable_declaration_708_5_163()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("identification_variable_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_datetime_expression_comparison_2238_3_54()
 {
    if (!jj_rescan) trace_call("datetime_expression_comparison(LOOKING AHEAD...)");
    if (jj_3R_datetime_expression_1848_3_43()) { if (!jj_rescan) trace_return("datetime_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_comparison_operator_2133_3_110()) { if (!jj_rescan) trace_return("datetime_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_datetime_expression_comparison_2244_4_119()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_comparison_2246_4_120()) { if (!jj_rescan) trace_return("datetime_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("datetime_expression_comparison(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_72()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2227_4_118()
 {
    if (jj_3R_all_or_any_expression_2103_3_200()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2225_4_117()
 {
    if (jj_3R_boolean_expression_1799_3_45()) return true;
    return false;
  }

  private boolean jj_3R_simple_derived_path_2991_3_213()
 {
    if (!jj_rescan) trace_call("simple_derived_path(LOOKING AHEAD...)");
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("simple_derived_path(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("simple_derived_path(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_range_variable_declaration_686_3_79()
 {
    if (!jj_rescan) trace_call("range_variable_declaration(LOOKING AHEAD...)");
    if (jj_3R_anyIdentifier_142_4_83()) { if (!jj_rescan) trace_return("range_variable_declaration(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("range_variable_declaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("range_variable_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_boolean_expression_comparison_2219_4_116()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_comparison_2214_4_115()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_nullif_expression_1446_3_251()
 {
    if (!jj_rescan) trace_call("nullif_expression(LOOKING AHEAD...)");
    if (jj_scan_token(NULLIF)) { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(COMMA)) { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("nullif_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_boolean_expression_comparison_2212_3_53()
 {
    if (!jj_rescan) trace_call("boolean_expression_comparison(LOOKING AHEAD...)");
    if (jj_3R_boolean_expression_1799_3_45()) { if (!jj_rescan) trace_return("boolean_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_boolean_expression_comparison_2214_4_115()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_comparison_2219_4_116()) { if (!jj_rescan) trace_return("boolean_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    }
    xsp = jj_scanpos;
    if (jj_3R_boolean_expression_comparison_2225_4_117()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_comparison_2227_4_118()) { if (!jj_rescan) trace_return("boolean_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("boolean_expression_comparison(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_treated_derived_path_2970_3_214()
 {
    if (!jj_rescan) trace_call("treated_derived_path(LOOKING AHEAD...)");
    if (jj_scan_token(TREAT)) { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_general_derived_path_3014_3_70()) { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(AS)) { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_subtype_560_3_211()) { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("treated_derived_path(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_scalar_expression_1434_3_75()
 {
    if (jj_3R_entity_type_expression_1665_3_121()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_comparison_2200_4_114()
 {
    if (jj_3R_all_or_any_expression_2103_3_200()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_comparison_2198_4_113()
 {
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    return false;
  }

  private boolean jj_3R_scalar_expression_1431_3_74()
 {
    if (jj_3R_case_expression_1644_3_171()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_comparison_2192_3_52()
 {
    if (!jj_rescan) trace_call("arithmetic_expression_comparison(LOOKING AHEAD...)");
    if (jj_3R_arithmetic_expression_2077_3_44()) { if (!jj_rescan) trace_return("arithmetic_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_comparison_operator_2133_3_110()) { if (!jj_rescan) trace_return("arithmetic_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_expression_comparison_2198_4_113()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_expression_comparison_2200_4_114()) { if (!jj_rescan) trace_return("arithmetic_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("arithmetic_expression_comparison(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_25()
 {
    if (jj_3R_boolean_expression_1799_3_45()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    return false;
  }

  private boolean jj_3R_fetch_join_649_3_248()
 {
    if (!jj_rescan) trace_call("fetch_join(LOOKING AHEAD...)");
    if (jj_3R_join_spec_429_3_77()) { if (!jj_rescan) trace_return("fetch_join(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(FETCH)) { if (!jj_rescan) trace_return("fetch_join(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_join_association_path_expression_583_3_78()) { if (!jj_rescan) trace_return("fetch_join(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("fetch_join(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_23()
 {
    if (jj_3R_datetime_expression_1848_3_43()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_comparison_2180_4_112()
 {
    if (jj_3R_all_or_any_expression_2103_3_200()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_comparison_2178_4_111()
 {
    if (jj_3R_string_expression_1907_3_42()) return true;
    return false;
  }

  private boolean jj_3R_scalar_expression_1411_3_31()
 {
    if (!jj_rescan) trace_call("scalar_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_scalar_expression_1431_3_74()) {
    jj_scanpos = xsp;
    if (jj_3R_scalar_expression_1434_3_75()) { if (!jj_rescan) trace_return("scalar_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("scalar_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_22()
 {
    if (jj_3R_string_expression_1907_3_42()) return true;
    return false;
  }

  private boolean jj_3R_derived_collection_member_declaration_2941_3_277()
 {
    if (!jj_rescan) trace_call("derived_collection_member_declaration(LOOKING AHEAD...)");
    if (jj_scan_token(IN)) { if (!jj_rescan) trace_return("derived_collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("derived_collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(DOT)) { if (!jj_rescan) trace_return("derived_collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("derived_collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("derived_collection_member_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_string_expression_comparison_2172_3_51()
 {
    if (!jj_rescan) trace_call("string_expression_comparison(LOOKING AHEAD...)");
    if (jj_3R_string_expression_1907_3_42()) { if (!jj_rescan) trace_return("string_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_comparison_operator_2133_3_110()) { if (!jj_rescan) trace_return("string_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_string_expression_comparison_2178_4_111()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_comparison_2180_4_112()) { if (!jj_rescan) trace_return("string_expression_comparison(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("string_expression_comparison(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_join_627_3_34()
 {
    if (!jj_rescan) trace_call("join(LOOKING AHEAD...)");
    if (jj_3R_join_spec_429_3_77()) { if (!jj_rescan) trace_return("join(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_join_association_path_expression_583_3_78()) { if (!jj_rescan) trace_return("join(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("join(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("join(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_function_arg_1392_3_286()
 {
    if (jj_3R_scalar_expression_1411_3_31()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2158_3_199()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_simple_select_clause_2923_4_241()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_simple_select_clause_2921_3_206()
 {
    if (!jj_rescan) trace_call("simple_select_clause(LOOKING AHEAD...)");
    if (jj_scan_token(SELECT)) { if (!jj_rescan) trace_return("simple_select_clause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_select_clause_2923_4_241()) jj_scanpos = xsp;
    if (jj_3R_simple_select_expression_2894_3_242()) { if (!jj_rescan) trace_return("simple_select_clause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("simple_select_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_comparison_operator_2153_3_198()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2148_3_197()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2143_3_196()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_function_arg_1374_3_275()
 {
    if (!jj_rescan) trace_call("function_arg(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_function_arg_1392_3_286()) { if (!jj_rescan) trace_return("function_arg(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("function_arg(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_simple_select_expression_2906_3_263()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2138_3_195()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_single_valued_path_expression_2859_3_29()) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_scalar_expression_1411_3_31()) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_2133_3_110()
 {
    if (!jj_rescan) trace_call("comparison_operator(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparison_operator_2133_3_194()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2138_3_195()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2143_3_196()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2148_3_197()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2153_3_198()) {
    jj_scanpos = xsp;
    if (jj_3R_comparison_operator_2158_3_199()) { if (!jj_rescan) trace_return("comparison_operator(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("comparison_operator(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_comparison_operator_2133_3_194()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_aggregate_expression_1262_3_30()) return true;
    return false;
  }

  private boolean jj_3R_simple_select_expression_2894_3_262()
 {
    if (jj_3R_single_valued_path_expression_2859_3_29()) return true;
    return false;
  }

  private boolean jj_3R_simple_select_expression_2894_3_242()
 {
    if (!jj_rescan) trace_call("simple_select_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_select_expression_2894_3_262()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_select_expression_2906_3_263()) { if (!jj_rescan) trace_return("simple_select_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("simple_select_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_join_association_path_expression_589_3_174()
 {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_join_single_valued_path_expression_482_3_220()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_subtype_560_3_211()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_join_association_path_expression_583_3_78()
 {
    if (!jj_rescan) trace_call("join_association_path_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_association_path_expression_583_3_173()) {
    jj_scanpos = xsp;
    if (jj_3R_join_association_path_expression_589_3_174()) { if (!jj_rescan) trace_return("join_association_path_expression(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("join_association_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_join_association_path_expression_583_3_173()
 {
    if (jj_3R_join_single_valued_path_expression_482_3_220()) return true;
    return false;
  }

  private boolean jj_3R_function_invocation_1348_4_261()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_function_arg_1374_3_275()) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2116_3_238()
 {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2110_3_237()
 {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_qualified_identification_variable_785_2_69()) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2104_3_236()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_all_or_any_expression_2103_3_200()
 {
    if (!jj_rescan) trace_call("all_or_any_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_all_or_any_expression_2104_3_236()) {
    jj_scanpos = xsp;
    if (jj_3R_all_or_any_expression_2110_3_237()) {
    jj_scanpos = xsp;
    if (jj_3R_all_or_any_expression_2116_3_238()) { if (!jj_rescan) trace_return("all_or_any_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("all_or_any_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_subquery_3130_3_152()) { if (!jj_rescan) trace_return("all_or_any_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("all_or_any_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("all_or_any_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_function_invocation_1335_3_170()
 {
    if (!jj_rescan) trace_call("function_invocation(LOOKING AHEAD...)");
    if (jj_scan_token(FUNCTION)) { if (!jj_rescan) trace_return("function_invocation(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("function_invocation(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("function_invocation(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_function_invocation_1348_4_261()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("function_invocation(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("function_invocation(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_66()
 {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_qualified_identification_variable_785_2_69()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_subtype_560_3_211()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_subtype_560_3_211()
 {
    if (!jj_rescan) trace_call("subtype(LOOKING AHEAD...)");
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("subtype(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("subtype(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_single_valued_path_expression_2859_3_29()
 {
    if (!jj_rescan) trace_call("single_valued_path_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) { if (!jj_rescan) trace_return("single_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("single_valued_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_65()
 {
    if (jj_3R_state_field_path_expression_898_2_37()) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1320_3_73()
 {
    if (jj_3R_function_invocation_1335_3_170()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2085_4_181()
 {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2080_4_180()
 {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1312_4_185()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2079_4_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_expression_2080_4_180()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_expression_2085_4_181()) return true;
    }
    if (jj_3R_arithmetic_term_2049_3_100()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_single_valued_object_path_expression_1243_3_41()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_expression_2077_3_44()
 {
    if (!jj_rescan) trace_call("arithmetic_expression(LOOKING AHEAD...)");
    if (jj_3R_arithmetic_term_2049_3_100()) { if (!jj_rescan) trace_return("arithmetic_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arithmetic_expression_2079_4_101()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("arithmetic_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_17()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_where_clause_2835_3_245()
 {
    if (!jj_rescan) trace_call("where_clause(LOOKING AHEAD...)");
    if (jj_scan_token(WHERE)) { if (!jj_rescan) trace_return("where_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_conditional_expression_2822_3_268()) { if (!jj_rescan) trace_return("where_clause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("where_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_aggregate_expression_1300_4_184()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1294_4_72()
 {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1300_4_184()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1312_4_185()) return true;
    }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_term_2059_4_49()
 {
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_conditional_expression_2824_4_280()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_conditional_term_2803_3_279()) return true;
    return false;
  }

  private boolean jj_3R_conditional_expression_2822_3_268()
 {
    if (!jj_rescan) trace_call("conditional_expression(LOOKING AHEAD...)");
    if (jj_3R_conditional_term_2803_3_279()) { if (!jj_rescan) trace_return("conditional_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_conditional_expression_2824_4_280()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("conditional_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_arithmetic_term_2054_4_48()
 {
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1285_4_183()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_term_2054_4_48()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_term_2059_4_49()) return true;
    }
    if (jj_3R_arithmetic_factor_2026_2_50()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_term_2049_3_100()
 {
    if (!jj_rescan) trace_call("arithmetic_term(LOOKING AHEAD...)");
    if (jj_3R_arithmetic_factor_2026_2_50()) { if (!jj_rescan) trace_return("arithmetic_term(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("arithmetic_term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_aggregate_expression_1278_4_169()
 {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1273_4_168()
 {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_conditional_term_2805_4_288()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_conditional_factor_2781_2_287()) return true;
    return false;
  }

  private boolean jj_3R_conditional_term_2803_3_279()
 {
    if (!jj_rescan) trace_call("conditional_term(LOOKING AHEAD...)");
    if (jj_3R_conditional_factor_2781_2_287()) { if (!jj_rescan) trace_return("conditional_term(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_conditional_term_2805_4_288()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("conditional_term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_aggregate_expression_1268_4_167()
 {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_factor_2032_3_187()
 {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1263_4_166()
 {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1262_3_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1263_4_166()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1268_4_167()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1273_4_168()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1278_4_169()) return true;
    }
    }
    }
    if (jj_scan_token(OPEN_BRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1285_4_183()) jj_scanpos = xsp;
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_aggregate_expression_1262_3_30()
 {
    if (!jj_rescan) trace_call("aggregate_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregate_expression_1262_3_71()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1294_4_72()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregate_expression_1320_3_73()) { if (!jj_rescan) trace_return("aggregate_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("aggregate_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_arithmetic_factor_2027_3_108()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_factor_2027_3_186()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_factor_2032_3_187()) return true;
    }
    return false;
  }

  private boolean jj_3R_arithmetic_factor_2027_3_186()
 {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_single_valued_embeddable_object_field_455_3_33()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_factor_2026_2_50()
 {
    if (!jj_rescan) trace_call("arithmetic_factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_factor_2027_3_108()) jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1966_3_109()) { if (!jj_rescan) trace_return("arithmetic_factor(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("arithmetic_factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_join_single_valued_path_expression_482_3_220()
 {
    if (!jj_rescan) trace_call("join_single_valued_path_expression(LOOKING AHEAD...)");
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("join_single_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(DOT)) { if (!jj_rescan) trace_return("join_single_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("join_single_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("join_single_valued_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_64()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_conditional_factor_2781_2_287()
 {
    if (!jj_rescan) trace_call("conditional_factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) jj_scanpos = xsp;
    if (jj_3R_conditional_primary_2764_3_289()) { if (!jj_rescan) trace_return("conditional_factor(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("conditional_factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_arithmetic_primary_2013_3_193()
 {
    if (jj_3R_function_invocation_1335_3_170()) return true;
    return false;
  }

  private boolean jj_3R_single_valued_object_path_expression_1243_3_41()
 {
    if (!jj_rescan) trace_call("single_valued_object_path_expression(LOOKING AHEAD...)");
    if (jj_3R_general_subpath_857_4_82()) { if (!jj_rescan) trace_return("single_valued_object_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(DOT)) { if (!jj_rescan) trace_return("single_valued_object_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("single_valued_object_path_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("single_valued_object_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_arithmetic_primary_2010_3_192()
 {
    if (jj_3R_case_expression_1644_3_171()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_aggregate_expression_1262_3_30()) return true;
    return false;
  }

  private boolean jj_3R_conditional_primary_2767_4_290()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_conditional_expression_2822_3_268()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1999_3_191()
 {
    if (jj_3R_functions_returning_numerics_1105_3_235()) return true;
    return false;
  }

  private boolean jj_3R_conditional_primary_2764_3_289()
 {
    if (!jj_rescan) trace_call("conditional_primary(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3R_conditional_primary_2767_4_290()) { if (!jj_rescan) trace_return("conditional_primary(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("conditional_primary(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_63()
 {
    if (jj_3R_simple_cond_expression_2716_3_68()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_exists_expression_2351_3_67()) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1993_3_190()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_single_valued_embeddable_object_field_455_4_76()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_single_valued_embeddable_object_field_455_3_33()
 {
    if (!jj_rescan) trace_call("single_valued_embeddable_object_field(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_single_valued_embeddable_object_field_455_4_76()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("single_valued_embeddable_object_field(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_61()
 {
    if (jj_3R_collection_member_expression_2443_3_66()) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2752_3_160()
 {
    if (jj_3R_exists_expression_2351_3_67()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1215_3_260()
 {
    if (jj_scan_token(INDEX)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_empty_collection_comparison_expression_2480_3_65()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2744_3_159()
 {
    if (jj_3R_collection_member_expression_2443_3_66()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_null_comparison_expression_2508_2_64()) return true;
    return false;
  }

  private boolean jj_3R_join_spec_439_4_219()
 {
    if (jj_scan_token(INNER)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1972_3_189()
 {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_3R_like_expression_2535_3_63()) return true;
    return false;
  }

  private boolean jj_3R_join_spec_433_5_252()
 {
    if (jj_scan_token(OUTER)) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2736_3_158()
 {
    if (jj_3R_empty_collection_comparison_expression_2480_3_65()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_3R_in_expression_2586_2_62()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1199_3_259()
 {
    if (jj_scan_token(SIZE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_collection_valued_path_expression_2424_3_146()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_primary_1966_3_109()
 {
    if (!jj_rescan) trace_call("arithmetic_primary(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_primary_1966_3_188()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1972_3_189()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1993_3_190()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_1999_3_191()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_2010_3_192()) {
    jj_scanpos = xsp;
    if (jj_3R_arithmetic_primary_2013_3_193()) { if (!jj_rescan) trace_return("arithmetic_primary(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("arithmetic_primary(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_arithmetic_primary_1966_3_188()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3130_3_152()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2732_3_157()
 {
    if (jj_3R_null_comparison_expression_2508_2_64()) return true;
    return false;
  }

  private boolean jj_3R_join_spec_429_4_172()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_spec_429_4_218()) {
    jj_scanpos = xsp;
    if (jj_3R_join_spec_439_4_219()) return true;
    }
    return false;
  }

  private boolean jj_3R_join_spec_429_4_218()
 {
    if (jj_scan_token(LEFT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_spec_433_5_252()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_join_spec_429_3_77()
 {
    if (!jj_rescan) trace_call("join_spec(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_join_spec_429_4_172()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) { if (!jj_rescan) trace_return("join_spec(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("join_spec(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_56()
 {
    if (jj_3R_between_expression_2630_3_61()) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2728_3_156()
 {
    if (jj_3R_like_expression_2535_3_63()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_comparison_expression_2288_3_60()) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2724_3_155()
 {
    if (jj_3R_in_expression_2586_2_62()) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2720_3_154()
 {
    if (jj_3R_between_expression_2630_3_61()) return true;
    return false;
  }

  private boolean jj_3R_simple_cond_expression_2716_3_68()
 {
    if (!jj_rescan) trace_call("simple_cond_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_cond_expression_2716_3_153()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2720_3_154()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2724_3_155()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2728_3_156()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2732_3_157()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2736_3_158()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2744_3_159()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_cond_expression_2752_3_160()) { if (!jj_rescan) trace_return("simple_cond_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("simple_cond_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_simple_cond_expression_2716_3_153()
 {
    if (jj_3R_comparison_expression_2288_3_60()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1178_3_258()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1937_3_93()
 {
    if (jj_3R_function_invocation_1335_3_170()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1935_3_92()
 {
    if (jj_3R_case_expression_1644_3_171()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_aggregate_expression_1262_3_30()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1162_3_257()
 {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_constructor_expression_395_2_32()
 {
    if (!jj_rescan) trace_call("constructor_expression(LOOKING AHEAD...)");
    if (jj_scan_token(NEW)) { if (!jj_rescan) trace_return("constructor_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("constructor_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("constructor_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_string_expression_1926_3_91()
 {
    if (jj_3R_functions_returning_strings_935_3_178()) return true;
    return false;
  }

  private boolean jj_3R_datetime_between_expression_2688_4_128()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1921_3_90()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_datetime_between_expression_2686_3_59()
 {
    if (!jj_rescan) trace_call("datetime_between_expression(LOOKING AHEAD...)");
    if (jj_3R_datetime_expression_1848_3_43()) { if (!jj_rescan) trace_return("datetime_between_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_datetime_between_expression_2688_4_128()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) { if (!jj_rescan) trace_return("datetime_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_datetime_expression_1848_3_43()) { if (!jj_rescan) trace_return("datetime_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(AND)) { if (!jj_rescan) trace_return("datetime_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_datetime_expression_1848_3_43()) { if (!jj_rescan) trace_return("datetime_between_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("datetime_between_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1916_3_89()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1146_3_256()
 {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_scalar_expression_1411_3_31()) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1907_3_88()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3130_3_152()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_string_expression_1907_3_42()
 {
    if (!jj_rescan) trace_call("string_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_string_expression_1907_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1916_3_89()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1921_3_90()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1926_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1935_3_92()) {
    jj_scanpos = xsp;
    if (jj_3R_string_expression_1937_3_93()) { if (!jj_rescan) trace_return("string_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("string_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_7()
 {
    if (jj_3R_aggregate_expression_1262_3_30()) return true;
    return false;
  }

  private boolean jj_3R_string_between_expression_2669_4_127()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_single_valued_path_expression_2859_3_29()) return true;
    return false;
  }

  private boolean jj_3R_string_between_expression_2667_3_58()
 {
    if (!jj_rescan) trace_call("string_between_expression(LOOKING AHEAD...)");
    if (jj_3R_string_expression_1907_3_42()) { if (!jj_rescan) trace_return("string_between_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_string_between_expression_2669_4_127()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) { if (!jj_rescan) trace_return("string_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_string_expression_1907_3_42()) { if (!jj_rescan) trace_return("string_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(AND)) { if (!jj_rescan) trace_return("string_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_string_expression_1907_3_42()) { if (!jj_rescan) trace_return("string_between_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("string_between_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_functions_returning_numerics_1118_3_255()
 {
    if (jj_scan_token(LOCATE)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1885_3_99()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3130_3_152()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_between_expression_2650_4_126()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_arithmetic_between_expression_2648_3_57()
 {
    if (!jj_rescan) trace_call("arithmetic_between_expression(LOOKING AHEAD...)");
    if (jj_3R_arithmetic_expression_2077_3_44()) { if (!jj_rescan) trace_return("arithmetic_between_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arithmetic_between_expression_2650_4_126()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) { if (!jj_rescan) trace_return("arithmetic_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_arithmetic_expression_2077_3_44()) { if (!jj_rescan) trace_return("arithmetic_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(AND)) { if (!jj_rescan) trace_return("arithmetic_between_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_arithmetic_expression_2077_3_44()) { if (!jj_rescan) trace_return("arithmetic_between_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("arithmetic_between_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_54()
 {
    if (jj_3R_datetime_between_expression_2686_3_59()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1878_3_98()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_string_between_expression_2667_3_58()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_constructor_expression_395_2_32()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_arithmetic_between_expression_2648_3_57()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1105_3_254()
 {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_numerics_1105_3_235()
 {
    if (!jj_rescan) trace_call("functions_returning_numerics(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_numerics_1105_3_254()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1118_3_255()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1146_3_256()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1162_3_257()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1178_3_258()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1199_3_259()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_numerics_1215_3_260()) { if (!jj_rescan) trace_return("functions_returning_numerics(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("functions_returning_numerics(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_datetime_expression_1871_3_97()
 {
    if (jj_3R_function_invocation_1335_3_170()) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2638_3_136()
 {
    if (jj_3R_datetime_between_expression_2686_3_59()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1868_3_96()
 {
    if (jj_3R_case_expression_1644_3_171()) return true;
    return false;
  }

  private boolean jj_3R_null_309_27_28()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2634_3_135()
 {
    if (jj_3R_string_between_expression_2667_3_58()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_aggregate_expression_1262_3_30()) return true;
    return false;
  }

  private boolean jj_3R_between_expression_2630_3_61()
 {
    if (!jj_rescan) trace_call("between_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_between_expression_2630_3_134()) {
    jj_scanpos = xsp;
    if (jj_3R_between_expression_2634_3_135()) {
    jj_scanpos = xsp;
    if (jj_3R_between_expression_2638_3_136()) { if (!jj_rescan) trace_return("between_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("between_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_between_expression_2630_3_134()
 {
    if (jj_3R_arithmetic_between_expression_2648_3_57()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_scalar_expression_1411_3_31()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1858_3_95()
 {
    if (jj_3R_functions_returning_datetime_1071_3_179()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_aggregate_expression_1262_3_30()) return true;
    return false;
  }

  private boolean jj_3R_null_309_12_27()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_309_12_27()) {
    jj_scanpos = xsp;
    if (jj_3R_null_309_27_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_datetime_expression_1852_3_94()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_1083_3_232()
 {
    if (jj_scan_token(CURRENT_TIMESTAMP)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_single_valued_path_expression_2859_3_29()) return true;
    return false;
  }

  private boolean jj_3R_datetime_expression_1848_3_43()
 {
    if (!jj_rescan) trace_call("datetime_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1852_3_94()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1858_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1868_3_96()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1871_3_97()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1878_3_98()) {
    jj_scanpos = xsp;
    if (jj_3R_datetime_expression_1885_3_99()) { if (!jj_rescan) trace_return("datetime_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("datetime_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_33()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2614_4_140()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_1077_3_231()
 {
    if (jj_scan_token(CURRENT_TIME)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2610_4_139()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3130_3_152()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2605_6_203()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_in_item_2564_3_56()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_1071_3_230()
 {
    if (jj_scan_token(CURRENT_DATE)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_datetime_1071_3_179()
 {
    if (!jj_rescan) trace_call("functions_returning_datetime(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_datetime_1071_3_230()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_datetime_1077_3_231()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_datetime_1083_3_232()) { if (!jj_rescan) trace_return("functions_returning_datetime(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("functions_returning_datetime(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_in_item_2564_3_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_in_expression_2605_6_203()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2593_4_138()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1825_3_106()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_subquery_3130_3_152()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2590_3_137()
 {
    if (jj_3R_type_discriminator_1528_3_47()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1818_3_105()
 {
    if (jj_3R_function_invocation_1335_3_170()) return true;
    return false;
  }

  private boolean jj_3R_in_expression_2586_2_62()
 {
    if (!jj_rescan) trace_call("in_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_in_expression_2590_3_137()) { if (!jj_rescan) trace_return("in_expression(LOOKAHEAD FAILED)"); return true; }
    }
    xsp = jj_scanpos;
    if (jj_3R_in_expression_2593_4_138()) jj_scanpos = xsp;
    if (jj_scan_token(IN)) { if (!jj_rescan) trace_return("in_expression(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3R_in_expression_2610_4_139()) {
    jj_scanpos = xsp;
    if (jj_3R_in_expression_2614_4_140()) { if (!jj_rescan) trace_return("in_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("in_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_functions_returning_strings_1046_5_229()
 {
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1815_3_104()
 {
    if (jj_3R_case_expression_1644_3_171()) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1809_3_103()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1803_3_102()
 {
    if (jj_3R_boolean_literal_1772_2_182()) return true;
    return false;
  }

  private boolean jj_3R_in_item_2570_3_125()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_1033_5_228()
 {
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_boolean_expression_1799_3_45()
 {
    if (!jj_rescan) trace_call("boolean_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1803_3_102()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1809_3_103()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1815_3_104()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1818_3_105()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_expression_1825_3_106()) { if (!jj_rescan) trace_return("boolean_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("boolean_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_32()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_in_item_2564_3_56()
 {
    if (!jj_rescan) trace_call("in_item(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_in_item_2564_3_124()) {
    jj_scanpos = xsp;
    if (jj_3R_in_item_2570_3_125()) { if (!jj_rescan) trace_return("in_item(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("in_item(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_in_item_2564_3_124()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_1018_5_39()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_like_expression_2548_4_142()
 {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_1012_5_86()
 {
    if (jj_scan_token(BOTH)) return true;
    return false;
  }

  private boolean jj_3R_boolean_literal_1777_2_234()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_1007_5_85()
 {
    if (jj_scan_token(TRAILING)) return true;
    return false;
  }

  private boolean jj_3R_boolean_literal_1772_2_233()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_1002_5_84()
 {
    if (jj_scan_token(LEADING)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_1002_5_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_1002_5_84()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_1007_5_85()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_1012_5_86()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_boolean_literal_1772_2_182()
 {
    if (!jj_rescan) trace_call("boolean_literal(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_boolean_literal_1772_2_233()) {
    jj_scanpos = xsp;
    if (jj_3R_boolean_literal_1777_2_234()) { if (!jj_rescan) trace_return("boolean_literal(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("boolean_literal(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_like_expression_2537_4_141()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_1002_5_38()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_1018_5_39()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_like_expression_2535_3_63()
 {
    if (!jj_rescan) trace_call("like_expression(LOOKING AHEAD...)");
    if (jj_3R_string_expression_1907_3_42()) { if (!jj_rescan) trace_return("like_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_like_expression_2537_4_141()) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) { if (!jj_rescan) trace_return("like_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(STRING_LITERAL)) { if (!jj_rescan) trace_return("like_expression(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_like_expression_2548_4_142()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("like_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_functions_returning_strings_991_3_227()
 {
    if (jj_scan_token(TRIM)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2518_3_145()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_978_5_274()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2511_4_144()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2509_3_143()
 {
    if (jj_3R_single_valued_path_expression_2859_3_29()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3R_null_comparison_expression_2508_2_64()
 {
    if (!jj_rescan) trace_call("null_comparison_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_comparison_expression_2509_3_143()) {
    jj_scanpos = xsp;
    if (jj_3R_null_comparison_expression_2511_4_144()) { if (!jj_rescan) trace_return("null_comparison_expression(LOOKAHEAD FAILED)"); return true; }
    }
    if (jj_scan_token(IS)) { if (!jj_rescan) trace_return("null_comparison_expression(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_null_comparison_expression_2518_3_145()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) { if (!jj_rescan) trace_return("null_comparison_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("null_comparison_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_functions_returning_strings_963_3_226()
 {
    if (jj_scan_token(SUBSTRING)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_arithmetic_expression_2077_3_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_functions_returning_strings_978_5_274()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_empty_collection_comparison_expression_2487_3_147()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_950_5_273()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_single_valued_object_path_expression_1243_3_41()) return true;
    return false;
  }

  private boolean jj_3R_empty_collection_comparison_expression_2480_3_65()
 {
    if (!jj_rescan) trace_call("empty_collection_comparison_expression(LOOKING AHEAD...)");
    if (jj_3R_collection_valued_path_expression_2424_3_146()) { if (!jj_rescan) trace_return("empty_collection_comparison_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(IS)) { if (!jj_rescan) trace_return("empty_collection_comparison_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_empty_collection_comparison_expression_2487_3_147()) jj_scanpos = xsp;
    if (jj_scan_token(EMPTY)) { if (!jj_rescan) trace_return("empty_collection_comparison_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("empty_collection_comparison_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_groupby_clause_3237_4_270()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_groupby_item_3214_3_269()) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_935_3_225()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_string_expression_1907_3_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_functions_returning_strings_950_5_273()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_functions_returning_strings_935_3_178()
 {
    if (!jj_rescan) trace_call("functions_returning_strings(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_functions_returning_strings_935_3_225()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_963_3_226()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_991_3_227()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_1033_5_228()) {
    jj_scanpos = xsp;
    if (jj_3R_functions_returning_strings_1046_5_229()) { if (!jj_rescan) trace_return("functions_returning_strings(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("functions_returning_strings(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_groupby_clause_3233_3_246()
 {
    if (!jj_rescan) trace_call("groupby_clause(LOOKING AHEAD...)");
    if (jj_scan_token(GROUP)) { if (!jj_rescan) trace_return("groupby_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(BY)) { if (!jj_rescan) trace_return("groupby_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_groupby_item_3214_3_269()) { if (!jj_rescan) trace_return("groupby_clause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_groupby_clause_3237_4_270()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("groupby_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_collection_member_expression_2461_3_150()
 {
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_state_valued_path_expression_917_4_87()
 {
    if (jj_3R_general_identification_variable_807_2_36()) return true;
    return false;
  }

  private boolean jj_3R_groupby_item_3218_3_281()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_state_valued_path_expression_914_4_40()
 {
    if (!jj_rescan) trace_call("state_valued_path_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_state_valued_path_expression_917_4_87()) { if (!jj_rescan) trace_return("state_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("state_valued_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_15()
 {
    if (jj_3R_state_field_path_expression_898_2_37()) return true;
    return false;
  }

  private boolean jj_3R_collection_member_expression_2449_3_149()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_groupby_item_3214_3_269()
 {
    if (!jj_rescan) trace_call("groupby_item(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3R_groupby_item_3218_3_281()) { if (!jj_rescan) trace_return("groupby_item(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("groupby_item(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_78()
 {
    if (jj_3R_single_valued_path_expression_2859_3_29()) return true;
    return false;
  }

  private boolean jj_3R_anyIdentifier_142_4_83()
 {
    if (!jj_rescan) trace_call("anyIdentifier(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) { if (!jj_rescan) trace_return("anyIdentifier(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("anyIdentifier(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_collection_member_expression_2443_3_66()
 {
    if (!jj_rescan) trace_call("collection_member_expression(LOOKING AHEAD...)");
    if (jj_3R_entity_or_value_expression_2385_3_148()) { if (!jj_rescan) trace_return("collection_member_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_collection_member_expression_2449_3_149()) jj_scanpos = xsp;
    if (jj_scan_token(MEMBER)) { if (!jj_rescan) trace_return("collection_member_expression(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_collection_member_expression_2461_3_150()) jj_scanpos = xsp;
    if (jj_3R_collection_valued_path_expression_2424_3_146()) { if (!jj_rescan) trace_return("collection_member_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("collection_member_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_entity_type_expression_1675_3_202()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_1669_3_201()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_having_clause_3201_3_247()
 {
    if (!jj_rescan) trace_call("having_clause(LOOKING AHEAD...)");
    if (jj_scan_token(HAVING)) { if (!jj_rescan) trace_return("having_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_conditional_expression_2822_3_268()) { if (!jj_rescan) trace_return("having_clause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("having_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_29()
 {
    if (jj_3R_type_discriminator_1528_3_47()) return true;
    return false;
  }

  private boolean jj_3R_entity_type_expression_1665_3_121()
 {
    if (!jj_rescan) trace_call("entity_type_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_type_expression_1669_3_201()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_type_expression_1675_3_202()) { if (!jj_rescan) trace_return("entity_type_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("entity_type_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_state_field_path_expression_898_2_37()
 {
    if (!jj_rescan) trace_call("state_field_path_expression(LOOKING AHEAD...)");
    if (jj_3R_general_subpath_857_4_82()) { if (!jj_rescan) trace_return("state_field_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(DOT)) { if (!jj_rescan) trace_return("state_field_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_anyIdentifier_142_4_83()) { if (!jj_rescan) trace_return("state_field_path_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("state_field_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_collection_valued_path_expression_2424_3_146()
 {
    if (!jj_rescan) trace_call("collection_valued_path_expression(LOOKING AHEAD...)");
    if (jj_3R_general_subpath_857_4_82()) { if (!jj_rescan) trace_return("collection_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(DOT)) { if (!jj_rescan) trace_return("collection_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("collection_valued_path_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("collection_valued_path_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_case_expression_1654_3_217()
 {
    if (jj_3R_nullif_expression_1446_3_251()) return true;
    return false;
  }

  private boolean jj_3R_case_expression_1651_3_216()
 {
    if (jj_3R_coalesce_expression_1475_3_250()) return true;
    return false;
  }

  private boolean jj_3R_case_expression_1648_3_215()
 {
    if (jj_3R_simple_case_expression_1568_3_249()) return true;
    return false;
  }

  private boolean jj_3R_treated_subpath_879_3_224()
 {
    if (!jj_rescan) trace_call("treated_subpath(LOOKING AHEAD...)");
    if (jj_scan_token(TREAT)) { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_general_subpath_857_4_82()) { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(AS)) { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("treated_subpath(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_28()
 {
    if (jj_3R_general_case_expression_1612_3_46()) return true;
    return false;
  }

  private boolean jj_3R_case_expression_1644_3_171()
 {
    if (!jj_rescan) trace_call("case_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_case_expression_1648_3_215()) {
    jj_scanpos = xsp;
    if (jj_3R_case_expression_1651_3_216()) {
    jj_scanpos = xsp;
    if (jj_3R_case_expression_1654_3_217()) { if (!jj_rescan) trace_return("case_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("case_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_entity_or_value_expression_2407_3_205()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_entity_or_value_expression_2399_3_204()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_general_subpath_859_4_177()
 {
    if (jj_3R_treated_subpath_879_3_224()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_general_subpath_857_4_82()
 {
    if (!jj_rescan) trace_call("general_subpath(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_general_subpath_857_4_176()) {
    jj_scanpos = xsp;
    if (jj_3R_general_subpath_859_4_177()) { if (!jj_rescan) trace_return("general_subpath(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("general_subpath(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_general_subpath_857_4_176()
 {
    if (jj_3R_simple_subpath_831_2_223()) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_state_field_path_expression_898_2_37()) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_3R_general_identification_variable_807_2_36()) return true;
    return false;
  }

  private boolean jj_3R_general_case_expression_1618_4_283()
 {
    if (jj_3R_when_clause_1597_3_107()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_single_valued_object_path_expression_1243_3_41()) return true;
    return false;
  }

  private boolean jj_3R_entity_or_value_expression_2385_3_148()
 {
    if (!jj_rescan) trace_call("entity_or_value_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_or_value_expression_2399_3_204()) {
    jj_scanpos = xsp;
    if (jj_3R_entity_or_value_expression_2407_3_205()) { if (!jj_rescan) trace_return("entity_or_value_expression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("entity_or_value_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_76()
 {
    if (jj_3R_state_field_path_expression_898_2_37()) return true;
    return false;
  }

  private boolean jj_3R_general_case_expression_1612_3_46()
 {
    if (!jj_rescan) trace_call("general_case_expression(LOOKING AHEAD...)");
    if (jj_scan_token(CASE)) { if (!jj_rescan) trace_return("general_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_when_clause_1597_3_107()) { if (!jj_rescan) trace_return("general_case_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_general_case_expression_1618_4_283()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) { if (!jj_rescan) trace_return("general_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("general_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(END)) { if (!jj_rescan) trace_return("general_case_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("general_case_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_subquery_3139_4_210()
 {
    if (jj_3R_having_clause_3201_3_247()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_subquery_3136_4_209()
 {
    if (jj_3R_groupby_clause_3233_3_246()) return true;
    return false;
  }

  private boolean jj_3R_simple_subpath_834_2_253()
 {
    if (jj_3R_general_identification_variable_807_2_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_subquery_3133_4_208()
 {
    if (jj_3R_where_clause_2835_3_245()) return true;
    return false;
  }

  private boolean jj_3R_simple_subpath_831_2_223()
 {
    if (!jj_rescan) trace_call("simple_subpath(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_subpath_834_2_253()) { if (!jj_rescan) trace_return("simple_subpath(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("simple_subpath(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_13()
 {
    if (jj_3R_general_identification_variable_807_2_36()) return true;
    return false;
  }

  private boolean jj_3R_when_clause_1597_3_107()
 {
    if (!jj_rescan) trace_call("when_clause(LOOKING AHEAD...)");
    if (jj_scan_token(WHEN)) { if (!jj_rescan) trace_return("when_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_conditional_expression_2822_3_268()) { if (!jj_rescan) trace_return("when_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(THEN)) { if (!jj_rescan) trace_return("when_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("when_clause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("when_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_subquery_3130_3_152()
 {
    if (!jj_rescan) trace_call("subquery(LOOKING AHEAD...)");
    if (jj_3R_simple_select_clause_2921_3_206()) { if (!jj_rescan) trace_return("subquery(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_subquery_from_clause_3087_3_207()) { if (!jj_rescan) trace_return("subquery(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3133_4_208()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3136_4_209()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3139_4_210()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("subquery(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_exists_expression_2352_3_151()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_exists_expression_2351_3_67()
 {
    if (!jj_rescan) trace_call("exists_expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_exists_expression_2352_3_151()) jj_scanpos = xsp;
    if (jj_scan_token(EXISTS)) { if (!jj_rescan) trace_return("exists_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("exists_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_subquery_3130_3_152()) { if (!jj_rescan) trace_return("exists_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("exists_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("exists_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_47()
 {
    if (jj_3R_entity_type_expression_comparison_2257_3_55()) return true;
    return false;
  }

  private boolean jj_3R_general_identification_variable_812_2_81()
 {
    if (jj_3R_map_field_identification_variable_747_2_175()) return true;
    return false;
  }

  private boolean jj_3R_simple_case_expression_1575_4_284()
 {
    if (jj_3R_simple_when_clause_1506_3_272()) return true;
    return false;
  }

  private boolean jj_3R_collection_member_declaration_3108_3_278()
 {
    if (!jj_rescan) trace_call("collection_member_declaration(LOOKING AHEAD...)");
    if (jj_scan_token(IN)) { if (!jj_rescan) trace_return("collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(OPEN_BRACKET)) { if (!jj_rescan) trace_return("collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_collection_valued_path_expression_2424_3_146()) { if (!jj_rescan) trace_return("collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) { if (!jj_rescan) trace_return("collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CLOSE_BRACKET)) { if (!jj_rescan) trace_return("collection_member_declaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("collection_member_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_general_identification_variable_807_2_80()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_general_identification_variable_807_2_36()
 {
    if (!jj_rescan) trace_call("general_identification_variable(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_general_identification_variable_807_2_80()) {
    jj_scanpos = xsp;
    if (jj_3R_general_identification_variable_812_2_81()) { if (!jj_rescan) trace_return("general_identification_variable(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("general_identification_variable(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_comparison_expression_2338_3_133()
 {
    if (jj_3R_entity_type_expression_comparison_2257_3_55()) return true;
    return false;
  }

  private boolean jj_3R_simple_case_expression_1568_3_249()
 {
    if (!jj_rescan) trace_call("simple_case_expression(LOOKING AHEAD...)");
    if (jj_scan_token(CASE)) { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_case_operand_1550_3_271()) { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_simple_when_clause_1506_3_272()) { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_simple_case_expression_1575_4_284()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_scalar_expression_1411_3_31()) { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(END)) { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("simple_case_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_subquery_from_clause_3094_4_267()
 {
    if (jj_3R_collection_member_declaration_3108_3_278()) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3090_4_266()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_subselect_identification_variable_declaration_3057_3_243()) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3090_4_244()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_from_clause_3090_4_266()) {
    jj_scanpos = xsp;
    if (jj_3R_subquery_from_clause_3094_4_267()) return true;
    }
    return false;
  }

  private boolean jj_3R_qualified_identification_variable_790_2_162()
 {
    if (jj_scan_token(ENTRY)) return true;
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_case_operand_1553_3_282()
 {
    if (jj_3R_type_discriminator_1528_3_47()) return true;
    return false;
  }

  private boolean jj_3R_subquery_from_clause_3087_3_207()
 {
    if (!jj_rescan) trace_call("subquery_from_clause(LOOKING AHEAD...)");
    if (jj_scan_token(FROM)) { if (!jj_rescan) trace_return("subquery_from_clause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_subselect_identification_variable_declaration_3057_3_243()) { if (!jj_rescan) trace_return("subquery_from_clause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_subquery_from_clause_3090_4_244()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("subquery_from_clause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_qualified_identification_variable_785_2_69()
 {
    if (!jj_rescan) trace_call("qualified_identification_variable(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_qualified_identification_variable_785_2_161()) {
    jj_scanpos = xsp;
    if (jj_3R_qualified_identification_variable_790_2_162()) { if (!jj_rescan) trace_return("qualified_identification_variable(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("qualified_identification_variable(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_qualified_identification_variable_785_2_161()
 {
    if (jj_3R_map_field_identification_variable_747_2_175()) return true;
    return false;
  }

  private boolean jj_3R_case_operand_1550_3_271()
 {
    if (!jj_rescan) trace_call("case_operand(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_case_operand_1553_3_282()) { if (!jj_rescan) trace_return("case_operand(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("case_operand(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_27()
 {
    if (jj_3R_state_valued_path_expression_914_4_40()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_datetime_expression_comparison_2238_3_54()) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3073_3_265()
 {
    if (jj_3R_derived_collection_member_declaration_2941_3_277()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_boolean_expression_comparison_2212_3_53()) return true;
    return false;
  }

  private boolean jj_3R_type_discriminator_1536_4_240()
 {
    if (jj_scan_token(INPUT_PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_subselect_identification_variable_declaration_3069_4_276()
 {
    if (jj_3R_join_627_3_34()) return true;
    return false;
  }

  private boolean jj_3R_type_discriminator_1534_4_239()
 {
    if (jj_3R_single_valued_object_path_expression_1243_3_41()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_arithmetic_expression_comparison_2192_3_52()) return true;
    return false;
  }

  private boolean jj_3R_comparison_expression_2300_3_132()
 {
    if (jj_3R_datetime_expression_comparison_2238_3_54()) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_3R_identification_variable_declaration_706_4_35()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_general_identification_variable_807_2_36()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_string_expression_comparison_2172_3_51()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JpqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[115];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffffe0,0x0,0x0,0x0,0x0,0x800000,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x20000,0x380000,0x40,0x800,0x800000,0x800000,0x0,0x40800,0x0,0x403f8840,0x18000,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,0x0,0x0,0x18000,0x40000000,0x40018000,0x380000,0x18000,0x20000,0x18000,0x0,0x40,0x18000,0x0,0x0,0x0,0x0,0x0,0x280,0x0,0x78a80,0x58ac0,0x0,0x40018280,0x3d8a80,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x800000,0x0,0x20,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x400400,0x400400,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xffffffff,0x0,0x4,0x8,0x8000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x10000000,0x820,0x820,0x0,0x0,0x0,0x0,0x920,0x920,0x0,0x40,0x200,0x200,0x200,0x200,0x200,0x200,0x0,0x0,0x400,0x400,0x0,0x8000,0x0,0x40085010,0x60000,0x0,0x0,0x0,0x60002,0x0,0x408ed212,0x800000,0x0,0x200,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x800000,0x0,0x800002,0x0,0x800002,0x8000,0x800002,0x0,0x40085010,0x800002,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80868202,0xc08e5212,0x0,0x80800202,0x80860202,0x0,0x200000,0x0,0x200000,0x2000000,0x200000,0x200,0x200000,0x200000,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x920,0x40,0x40,0x40,0x0,0x0,0x4,0x8,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x3fff,0x800,0x0,0x0,0x0,0x0,0x4000,0x0,0x2000,0x0,0x2000,0x4000,0x0,0x0,0x0,0x2000,0x2020,0x0,0x0,0x0,0x0,0x4000,0x0,0x1000,0x1000,0x3000,0x3000,0x3020,0x3000,0x4000,0x4000,0x10,0x10,0x40000,0x242,0x0,0x1,0x4,0x0,0x0,0x2000,0x4,0x4000,0x181d33e7,0x102100,0x4000,0x103020,0x100,0x400,0x400,0x0,0x102000,0x102000,0x102000,0x112000,0x80,0x110080,0x100000,0x12000,0x140242,0x0,0x80000,0x100001,0x0,0x18000000,0x18000000,0x60000000,0x18000000,0x18000000,0x0,0x7e00000,0x153266,0x18193025,0x6000000,0x1130a0,0x113024,0x6000000,0x0,0x102000,0x0,0x0,0x0,0x103020,0x0,0x0,0x0,0x140000,0x100,0x0,0x4000,0x110000,0x0,0x0,0x0,0x10000,0x0,0x0,0x2000,0x0,0x2020,0x0,0x0,0x0,0x4000,0x4000,0x0,0x800,0x0,0x0,0x2000,0x0,0x0,0x4000,0x2000,0x4000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[78];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public JpqlParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JpqlParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JpqlParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 115; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 115; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JpqlParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JpqlParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 115; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JpqlParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 115; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JpqlParser(JpqlParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 115; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JpqlParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 115; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 } else {
	   trace_scan(jj_scanpos, kind);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[95];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 115; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 95; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 78; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			   case 60: jj_3_61(); break;
			   case 61: jj_3_62(); break;
			   case 62: jj_3_63(); break;
			   case 63: jj_3_64(); break;
			   case 64: jj_3_65(); break;
			   case 65: jj_3_66(); break;
			   case 66: jj_3_67(); break;
			   case 67: jj_3_68(); break;
			   case 68: jj_3_69(); break;
			   case 69: jj_3_70(); break;
			   case 70: jj_3_71(); break;
			   case 71: jj_3_72(); break;
			   case 72: jj_3_73(); break;
			   case 73: jj_3_74(); break;
			   case 74: jj_3_75(); break;
			   case 75: jj_3_76(); break;
			   case 76: jj_3_77(); break;
			   case 77: jj_3_78(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

//  public static void main(String args[]) throws ParseException {
//    JpqlParser parser = new JpqlParser(System.in);
//    parser.QL_statement();
//  }
}
