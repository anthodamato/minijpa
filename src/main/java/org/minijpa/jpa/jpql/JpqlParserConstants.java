/* Generated By:JJTree&JavaCC: Do not edit this line. JpqlParserConstants.java */
package org.minijpa.jpa.jpql;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JpqlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AS = 5;
  /** RegularExpression Id. */
  int ABS = 6;
  /** RegularExpression Id. */
  int ALL = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int ANY = 9;
  /** RegularExpression Id. */
  int ASC = 10;
  /** RegularExpression Id. */
  int AVG = 11;
  /** RegularExpression Id. */
  int BETWEEN = 12;
  /** RegularExpression Id. */
  int BOTH = 13;
  /** RegularExpression Id. */
  int BY = 14;
  /** RegularExpression Id. */
  int CASE = 15;
  /** RegularExpression Id. */
  int COALESCE = 16;
  /** RegularExpression Id. */
  int CONCAT = 17;
  /** RegularExpression Id. */
  int COUNT = 18;
  /** RegularExpression Id. */
  int CURRENT_DATE = 19;
  /** RegularExpression Id. */
  int CURRENT_TIME = 20;
  /** RegularExpression Id. */
  int CURRENT_TIMESTAMP = 21;
  /** RegularExpression Id. */
  int DESC = 22;
  /** RegularExpression Id. */
  int DISTINCT = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int EMPTY = 25;
  /** RegularExpression Id. */
  int END = 26;
  /** RegularExpression Id. */
  int ENTRY = 27;
  /** RegularExpression Id. */
  int ESCAPE = 28;
  /** RegularExpression Id. */
  int EXISTS = 29;
  /** RegularExpression Id. */
  int FETCH = 30;
  /** RegularExpression Id. */
  int FROM = 31;
  /** RegularExpression Id. */
  int FUNCTION = 32;
  /** RegularExpression Id. */
  int GROUP = 33;
  /** RegularExpression Id. */
  int HAVING = 34;
  /** RegularExpression Id. */
  int INDEX = 35;
  /** RegularExpression Id. */
  int INNER = 36;
  /** RegularExpression Id. */
  int IN = 37;
  /** RegularExpression Id. */
  int IS = 38;
  /** RegularExpression Id. */
  int JOIN = 39;
  /** RegularExpression Id. */
  int KEY = 40;
  /** RegularExpression Id. */
  int LEADING = 41;
  /** RegularExpression Id. */
  int LEFT = 42;
  /** RegularExpression Id. */
  int LENGTH = 43;
  /** RegularExpression Id. */
  int LIKE = 44;
  /** RegularExpression Id. */
  int LOCATE = 45;
  /** RegularExpression Id. */
  int LOWER = 46;
  /** RegularExpression Id. */
  int MEMBER = 47;
  /** RegularExpression Id. */
  int MIN = 48;
  /** RegularExpression Id. */
  int MAX = 49;
  /** RegularExpression Id. */
  int MOD = 50;
  /** RegularExpression Id. */
  int NEW = 51;
  /** RegularExpression Id. */
  int NOT = 52;
  /** RegularExpression Id. */
  int NULL = 53;
  /** RegularExpression Id. */
  int NULLIF = 54;
  /** RegularExpression Id. */
  int OBJECT = 55;
  /** RegularExpression Id. */
  int OF = 56;
  /** RegularExpression Id. */
  int OR = 57;
  /** RegularExpression Id. */
  int ORDER = 58;
  /** RegularExpression Id. */
  int OUTER = 59;
  /** RegularExpression Id. */
  int SELECT = 60;
  /** RegularExpression Id. */
  int SIZE = 61;
  /** RegularExpression Id. */
  int SOME = 62;
  /** RegularExpression Id. */
  int SQRT = 63;
  /** RegularExpression Id. */
  int SUBSTRING = 64;
  /** RegularExpression Id. */
  int SUM = 65;
  /** RegularExpression Id. */
  int THEN = 66;
  /** RegularExpression Id. */
  int TRAILING = 67;
  /** RegularExpression Id. */
  int TREAT = 68;
  /** RegularExpression Id. */
  int TRIM = 69;
  /** RegularExpression Id. */
  int TYPE = 70;
  /** RegularExpression Id. */
  int UPPER = 71;
  /** RegularExpression Id. */
  int WHEN = 72;
  /** RegularExpression Id. */
  int WHERE = 73;
  /** RegularExpression Id. */
  int VALUE = 74;
  /** RegularExpression Id. */
  int NAME = 75;
  /** RegularExpression Id. */
  int RESULT_VARIABLE = 76;
  /** RegularExpression Id. */
  int COMMA = 77;
  /** RegularExpression Id. */
  int DOT = 78;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 79;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 80;
  /** RegularExpression Id. */
  int STRING_LITERAL = 81;
  /** RegularExpression Id. */
  int NUMERIC_LITERAL = 82;
  /** RegularExpression Id. */
  int INPUT_PARAMETER = 83;
  /** RegularExpression Id. */
  int GT = 84;
  /** RegularExpression Id. */
  int GE = 85;
  /** RegularExpression Id. */
  int LT = 86;
  /** RegularExpression Id. */
  int LE = 87;
  /** RegularExpression Id. */
  int NE = 88;
  /** RegularExpression Id. */
  int EQ = 89;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"AS\"",
    "\"ABS\"",
    "\"ALL\"",
    "\"AND\"",
    "\"ANY\"",
    "\"ASC\"",
    "\"AVG\"",
    "\"BETWEEN\"",
    "\"BOTH\"",
    "\"BY\"",
    "\"CASE\"",
    "\"COALESCE\"",
    "\"CONCAT\"",
    "\"COUNT\"",
    "\"CURRENT_DATE\"",
    "\"CURRENT_TIME\"",
    "\"CURRENT_TIMESTAMP\"",
    "\"DESC\"",
    "\"DISTINCT\"",
    "\"ELSE\"",
    "\"EMPTY\"",
    "\"END\"",
    "\"ENTRY\"",
    "\"ESCAPE\"",
    "\"EXISTS\"",
    "\"FETCH\"",
    "\"FROM\"",
    "\"FUNCTION\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"INDEX\"",
    "\"INNER\"",
    "\"IN\"",
    "\"IS\"",
    "\"JOIN\"",
    "\"KEY\"",
    "\"LEADING\"",
    "\"LEFT\"",
    "\"LENGTH\"",
    "\"LIKE\"",
    "\"LOCATE\"",
    "\"LOWER\"",
    "\"MEMBER\"",
    "\"MIN\"",
    "\"MAX\"",
    "\"MOD\"",
    "\"NEW\"",
    "\"NOT\"",
    "\"NULL\"",
    "\"NULLIF\"",
    "\"OBJECT\"",
    "\"OF\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTER\"",
    "\"SELECT\"",
    "\"SIZE\"",
    "\"SOME\"",
    "\"SQRT\"",
    "\"SUBSTRING\"",
    "\"SUM\"",
    "\"THEN\"",
    "\"TRAILING\"",
    "\"TREAT\"",
    "\"TRIM\"",
    "\"TYPE\"",
    "\"UPPER\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"VALUE\"",
    "<NAME>",
    "<RESULT_VARIABLE>",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "<STRING_LITERAL>",
    "<NUMERIC_LITERAL>",
    "<INPUT_PARAMETER>",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"<>\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
  };

}
